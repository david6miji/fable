
bluetooth_rxtx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007d20  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .persistent   00000020  10000000  10000000  00020000  2**0
                  ALLOC
  2 .data         0000093e  10000020  0000bd20  00010020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00002918  10000960  0000c65e  00010960  2**3
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  0001095e  2**0
                  CONTENTS, READONLY
  5 .comment      00000070  00000000  00000000  00010987  2**0
                  CONTENTS, READONLY
  6 .debug_info   000070e9  00000000  00000000  000109f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f18  00000000  00000000  00017ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000730  00000000  00000000  000199f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000007f8  00000000  00000000  0001a128  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000678  00000000  00000000  0001a920  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002fb1  00000000  00000000  0001af98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000029dc  00000000  00000000  0001df49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001c50  00000000  00000000  00020928  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <_NVIC_Handler_Functions>:
    4000:	e0 3f 00 10 2d 99 00 00 99 99 00 00 99 99 00 00     .?..-...........
    4010:	99 99 00 00 99 99 00 00 99 99 00 00 00 00 00 00     ................
    4020:	00 00 00 00 00 00 00 00 00 00 00 00 99 99 00 00     ................
    4030:	99 99 00 00 00 00 00 00 99 99 00 00 99 99 00 00     ................
    4040:	99 99 00 00 15 54 00 00 99 99 00 00 99 99 00 00     .....T..........
    4050:	99 99 00 00 99 99 00 00 99 99 00 00 99 99 00 00     ................
    4060:	99 99 00 00 99 99 00 00 99 99 00 00 99 99 00 00     ................
    4070:	99 99 00 00 99 99 00 00 99 99 00 00 99 99 00 00     ................
    4080:	99 99 00 00 99 99 00 00 99 99 00 00 99 99 00 00     ................
    4090:	99 99 00 00 31 55 00 00 99 99 00 00 99 99 00 00     ....1U..........
    40a0:	21 99 00 00 99 99 00 00 b9 59 00 00 99 99 00 00     !........Y......
    40b0:	99 99 00 00 99 99 00 00 99 99 00 00 99 99 00 00     ................
    40c0:	99 99 00 00 99 99 00 00 99 99 00 00                 ............

000040cc <deregister_tm_clones>:
    40cc:	4b04      	ldr	r3, [pc, #16]	; (40e0 <deregister_tm_clones+0x14>)
    40ce:	4805      	ldr	r0, [pc, #20]	; (40e4 <deregister_tm_clones+0x18>)
    40d0:	1a1b      	subs	r3, r3, r0
    40d2:	2b06      	cmp	r3, #6
    40d4:	d902      	bls.n	40dc <deregister_tm_clones+0x10>
    40d6:	4b04      	ldr	r3, [pc, #16]	; (40e8 <deregister_tm_clones+0x1c>)
    40d8:	b103      	cbz	r3, 40dc <deregister_tm_clones+0x10>
    40da:	4718      	bx	r3
    40dc:	4770      	bx	lr
    40de:	bf00      	nop
    40e0:	10000963 	.word	0x10000963
    40e4:	10000960 	.word	0x10000960
    40e8:	00000000 	.word	0x00000000

000040ec <register_tm_clones>:
    40ec:	4905      	ldr	r1, [pc, #20]	; (4104 <register_tm_clones+0x18>)
    40ee:	4806      	ldr	r0, [pc, #24]	; (4108 <register_tm_clones+0x1c>)
    40f0:	1a09      	subs	r1, r1, r0
    40f2:	1089      	asrs	r1, r1, #2
    40f4:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    40f8:	1049      	asrs	r1, r1, #1
    40fa:	d002      	beq.n	4102 <register_tm_clones+0x16>
    40fc:	4b03      	ldr	r3, [pc, #12]	; (410c <register_tm_clones+0x20>)
    40fe:	b103      	cbz	r3, 4102 <register_tm_clones+0x16>
    4100:	4718      	bx	r3
    4102:	4770      	bx	lr
    4104:	10000960 	.word	0x10000960
    4108:	10000960 	.word	0x10000960
    410c:	00000000 	.word	0x00000000

00004110 <__do_global_dtors_aux>:
    4110:	b510      	push	{r4, lr}
    4112:	4c06      	ldr	r4, [pc, #24]	; (412c <__do_global_dtors_aux+0x1c>)
    4114:	7823      	ldrb	r3, [r4, #0]
    4116:	b943      	cbnz	r3, 412a <__do_global_dtors_aux+0x1a>
    4118:	f7ff ffd8 	bl	40cc <deregister_tm_clones>
    411c:	4b04      	ldr	r3, [pc, #16]	; (4130 <__do_global_dtors_aux+0x20>)
    411e:	b113      	cbz	r3, 4126 <__do_global_dtors_aux+0x16>
    4120:	4804      	ldr	r0, [pc, #16]	; (4134 <__do_global_dtors_aux+0x24>)
    4122:	f3af 8000 	nop.w
    4126:	2301      	movs	r3, #1
    4128:	7023      	strb	r3, [r4, #0]
    412a:	bd10      	pop	{r4, pc}
    412c:	10000960 	.word	0x10000960
    4130:	00000000 	.word	0x00000000
    4134:	0000bcfc 	.word	0x0000bcfc

00004138 <frame_dummy>:
    4138:	b508      	push	{r3, lr}
    413a:	4b08      	ldr	r3, [pc, #32]	; (415c <frame_dummy+0x24>)
    413c:	b11b      	cbz	r3, 4146 <frame_dummy+0xe>
    413e:	4808      	ldr	r0, [pc, #32]	; (4160 <frame_dummy+0x28>)
    4140:	4908      	ldr	r1, [pc, #32]	; (4164 <frame_dummy+0x2c>)
    4142:	f3af 8000 	nop.w
    4146:	4808      	ldr	r0, [pc, #32]	; (4168 <frame_dummy+0x30>)
    4148:	6803      	ldr	r3, [r0, #0]
    414a:	b913      	cbnz	r3, 4152 <frame_dummy+0x1a>
    414c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4150:	e7cc      	b.n	40ec <register_tm_clones>
    4152:	4b06      	ldr	r3, [pc, #24]	; (416c <frame_dummy+0x34>)
    4154:	2b00      	cmp	r3, #0
    4156:	d0f9      	beq.n	414c <frame_dummy+0x14>
    4158:	4798      	blx	r3
    415a:	e7f7      	b.n	414c <frame_dummy+0x14>
    415c:	00000000 	.word	0x00000000
    4160:	0000bcfc 	.word	0x0000bcfc
    4164:	10000964 	.word	0x10000964
    4168:	10000960 	.word	0x10000960
    416c:	00000000 	.word	0x00000000

00004170 <atexit>:
    4170:	4601      	mov	r1, r0
    4172:	2000      	movs	r0, #0
    4174:	4602      	mov	r2, r0
    4176:	4603      	mov	r3, r0
    4178:	f000 b88c 	b.w	4294 <__register_exitproc>

0000417c <__libc_fini_array>:
    417c:	b538      	push	{r3, r4, r5, lr}
    417e:	4b08      	ldr	r3, [pc, #32]	; (41a0 <__libc_fini_array+0x24>)
    4180:	4d08      	ldr	r5, [pc, #32]	; (41a4 <__libc_fini_array+0x28>)
    4182:	1aed      	subs	r5, r5, r3
    4184:	10ac      	asrs	r4, r5, #2
    4186:	bf18      	it	ne
    4188:	18ed      	addne	r5, r5, r3
    418a:	d005      	beq.n	4198 <__libc_fini_array+0x1c>
    418c:	3c01      	subs	r4, #1
    418e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    4192:	4798      	blx	r3
    4194:	2c00      	cmp	r4, #0
    4196:	d1f9      	bne.n	418c <__libc_fini_array+0x10>
    4198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    419c:	f007 bdb8 	b.w	bd10 <_fini>
    41a0:	0000bd1c 	.word	0x0000bd1c
    41a4:	0000bd20 	.word	0x0000bd20

000041a8 <__libc_init_array>:
    41a8:	b570      	push	{r4, r5, r6, lr}
    41aa:	4e0f      	ldr	r6, [pc, #60]	; (41e8 <__libc_init_array+0x40>)
    41ac:	4d0f      	ldr	r5, [pc, #60]	; (41ec <__libc_init_array+0x44>)
    41ae:	1b76      	subs	r6, r6, r5
    41b0:	10b6      	asrs	r6, r6, #2
    41b2:	bf18      	it	ne
    41b4:	2400      	movne	r4, #0
    41b6:	d005      	beq.n	41c4 <__libc_init_array+0x1c>
    41b8:	3401      	adds	r4, #1
    41ba:	f855 3b04 	ldr.w	r3, [r5], #4
    41be:	4798      	blx	r3
    41c0:	42a6      	cmp	r6, r4
    41c2:	d1f9      	bne.n	41b8 <__libc_init_array+0x10>
    41c4:	4e0a      	ldr	r6, [pc, #40]	; (41f0 <__libc_init_array+0x48>)
    41c6:	4d0b      	ldr	r5, [pc, #44]	; (41f4 <__libc_init_array+0x4c>)
    41c8:	f007 fd98 	bl	bcfc <_init>
    41cc:	1b76      	subs	r6, r6, r5
    41ce:	10b6      	asrs	r6, r6, #2
    41d0:	bf18      	it	ne
    41d2:	2400      	movne	r4, #0
    41d4:	d006      	beq.n	41e4 <__libc_init_array+0x3c>
    41d6:	3401      	adds	r4, #1
    41d8:	f855 3b04 	ldr.w	r3, [r5], #4
    41dc:	4798      	blx	r3
    41de:	42a6      	cmp	r6, r4
    41e0:	d1f9      	bne.n	41d6 <__libc_init_array+0x2e>
    41e2:	bd70      	pop	{r4, r5, r6, pc}
    41e4:	bd70      	pop	{r4, r5, r6, pc}
    41e6:	bf00      	nop
    41e8:	0000bd08 	.word	0x0000bd08
    41ec:	0000bd08 	.word	0x0000bd08
    41f0:	0000bd10 	.word	0x0000bd10
    41f4:	0000bd08 	.word	0x0000bd08

000041f8 <memset>:
    41f8:	b470      	push	{r4, r5, r6}
    41fa:	0784      	lsls	r4, r0, #30
    41fc:	d046      	beq.n	428c <memset+0x94>
    41fe:	1e54      	subs	r4, r2, #1
    4200:	2a00      	cmp	r2, #0
    4202:	d041      	beq.n	4288 <memset+0x90>
    4204:	b2cd      	uxtb	r5, r1
    4206:	4603      	mov	r3, r0
    4208:	e002      	b.n	4210 <memset+0x18>
    420a:	1e62      	subs	r2, r4, #1
    420c:	b3e4      	cbz	r4, 4288 <memset+0x90>
    420e:	4614      	mov	r4, r2
    4210:	f803 5b01 	strb.w	r5, [r3], #1
    4214:	079a      	lsls	r2, r3, #30
    4216:	d1f8      	bne.n	420a <memset+0x12>
    4218:	2c03      	cmp	r4, #3
    421a:	d92e      	bls.n	427a <memset+0x82>
    421c:	b2cd      	uxtb	r5, r1
    421e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    4222:	2c0f      	cmp	r4, #15
    4224:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    4228:	d919      	bls.n	425e <memset+0x66>
    422a:	4626      	mov	r6, r4
    422c:	f103 0210 	add.w	r2, r3, #16
    4230:	3e10      	subs	r6, #16
    4232:	2e0f      	cmp	r6, #15
    4234:	f842 5c10 	str.w	r5, [r2, #-16]
    4238:	f842 5c0c 	str.w	r5, [r2, #-12]
    423c:	f842 5c08 	str.w	r5, [r2, #-8]
    4240:	f842 5c04 	str.w	r5, [r2, #-4]
    4244:	f102 0210 	add.w	r2, r2, #16
    4248:	d8f2      	bhi.n	4230 <memset+0x38>
    424a:	f1a4 0210 	sub.w	r2, r4, #16
    424e:	f022 020f 	bic.w	r2, r2, #15
    4252:	f004 040f 	and.w	r4, r4, #15
    4256:	3210      	adds	r2, #16
    4258:	2c03      	cmp	r4, #3
    425a:	4413      	add	r3, r2
    425c:	d90d      	bls.n	427a <memset+0x82>
    425e:	461e      	mov	r6, r3
    4260:	4622      	mov	r2, r4
    4262:	3a04      	subs	r2, #4
    4264:	2a03      	cmp	r2, #3
    4266:	f846 5b04 	str.w	r5, [r6], #4
    426a:	d8fa      	bhi.n	4262 <memset+0x6a>
    426c:	1f22      	subs	r2, r4, #4
    426e:	f022 0203 	bic.w	r2, r2, #3
    4272:	3204      	adds	r2, #4
    4274:	4413      	add	r3, r2
    4276:	f004 0403 	and.w	r4, r4, #3
    427a:	b12c      	cbz	r4, 4288 <memset+0x90>
    427c:	b2c9      	uxtb	r1, r1
    427e:	441c      	add	r4, r3
    4280:	f803 1b01 	strb.w	r1, [r3], #1
    4284:	42a3      	cmp	r3, r4
    4286:	d1fb      	bne.n	4280 <memset+0x88>
    4288:	bc70      	pop	{r4, r5, r6}
    428a:	4770      	bx	lr
    428c:	4614      	mov	r4, r2
    428e:	4603      	mov	r3, r0
    4290:	e7c2      	b.n	4218 <memset+0x20>
    4292:	bf00      	nop

00004294 <__register_exitproc>:
    4294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4298:	4c25      	ldr	r4, [pc, #148]	; (4330 <__register_exitproc+0x9c>)
    429a:	4606      	mov	r6, r0
    429c:	6825      	ldr	r5, [r4, #0]
    429e:	4688      	mov	r8, r1
    42a0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    42a4:	4692      	mov	sl, r2
    42a6:	4699      	mov	r9, r3
    42a8:	b3c4      	cbz	r4, 431c <__register_exitproc+0x88>
    42aa:	6860      	ldr	r0, [r4, #4]
    42ac:	281f      	cmp	r0, #31
    42ae:	dc17      	bgt.n	42e0 <__register_exitproc+0x4c>
    42b0:	1c41      	adds	r1, r0, #1
    42b2:	b176      	cbz	r6, 42d2 <__register_exitproc+0x3e>
    42b4:	eb04 0380 	add.w	r3, r4, r0, lsl #2
    42b8:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
    42bc:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
    42c0:	2201      	movs	r2, #1
    42c2:	4082      	lsls	r2, r0
    42c4:	4315      	orrs	r5, r2
    42c6:	2e02      	cmp	r6, #2
    42c8:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
    42cc:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
    42d0:	d01e      	beq.n	4310 <__register_exitproc+0x7c>
    42d2:	1c83      	adds	r3, r0, #2
    42d4:	6061      	str	r1, [r4, #4]
    42d6:	2000      	movs	r0, #0
    42d8:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
    42dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42e0:	4b14      	ldr	r3, [pc, #80]	; (4334 <__register_exitproc+0xa0>)
    42e2:	b303      	cbz	r3, 4326 <__register_exitproc+0x92>
    42e4:	f44f 70c8 	mov.w	r0, #400	; 0x190
    42e8:	f3af 8000 	nop.w
    42ec:	4604      	mov	r4, r0
    42ee:	b1d0      	cbz	r0, 4326 <__register_exitproc+0x92>
    42f0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    42f4:	2700      	movs	r7, #0
    42f6:	e884 0088 	stmia.w	r4, {r3, r7}
    42fa:	4638      	mov	r0, r7
    42fc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    4300:	2101      	movs	r1, #1
    4302:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    4306:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    430a:	2e00      	cmp	r6, #0
    430c:	d0e1      	beq.n	42d2 <__register_exitproc+0x3e>
    430e:	e7d1      	b.n	42b4 <__register_exitproc+0x20>
    4310:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    4314:	431a      	orrs	r2, r3
    4316:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    431a:	e7da      	b.n	42d2 <__register_exitproc+0x3e>
    431c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    4320:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    4324:	e7c1      	b.n	42aa <__register_exitproc+0x16>
    4326:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    432a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    432e:	bf00      	nop
    4330:	0000b288 	.word	0x0000b288
    4334:	00000000 	.word	0x00000000

00004338 <register_fini>:
    4338:	4b02      	ldr	r3, [pc, #8]	; (4344 <register_fini+0xc>)
    433a:	b113      	cbz	r3, 4342 <register_fini+0xa>
    433c:	4802      	ldr	r0, [pc, #8]	; (4348 <register_fini+0x10>)
    433e:	f7ff bf17 	b.w	4170 <atexit>
    4342:	4770      	bx	lr
    4344:	00000000 	.word	0x00000000
    4348:	0000417d 	.word	0x0000417d

0000434c <rssi_reset>:
int8_t rssi_min;
uint8_t rssi_count = 0;
int32_t rssi_sum = 0;

static void rssi_reset(void)
{
    434c:	b480      	push	{r7}
    434e:	af00      	add	r7, sp, #0
	rssi_count = 0;
    4350:	4b07      	ldr	r3, [pc, #28]	; (4370 <rssi_reset+0x24>)
    4352:	2200      	movs	r2, #0
    4354:	701a      	strb	r2, [r3, #0]
	rssi_sum = 0;
    4356:	4b07      	ldr	r3, [pc, #28]	; (4374 <rssi_reset+0x28>)
    4358:	2200      	movs	r2, #0
    435a:	601a      	str	r2, [r3, #0]
	rssi_max = INT8_MIN;
    435c:	4b06      	ldr	r3, [pc, #24]	; (4378 <rssi_reset+0x2c>)
    435e:	2280      	movs	r2, #128	; 0x80
    4360:	701a      	strb	r2, [r3, #0]
	rssi_min = INT8_MAX;
    4362:	4b06      	ldr	r3, [pc, #24]	; (437c <rssi_reset+0x30>)
    4364:	227f      	movs	r2, #127	; 0x7f
    4366:	701a      	strb	r2, [r3, #0]
}
    4368:	46bd      	mov	sp, r7
    436a:	f85d 7b04 	ldr.w	r7, [sp], #4
    436e:	4770      	bx	lr
    4370:	10000a49 	.word	0x10000a49
    4374:	10000a4c 	.word	0x10000a4c
    4378:	10000b04 	.word	0x10000b04
    437c:	10000bb8 	.word	0x10000bb8

00004380 <rssi_add>:

static void rssi_add(int8_t v)
{
    4380:	b480      	push	{r7}
    4382:	b083      	sub	sp, #12
    4384:	af00      	add	r7, sp, #0
    4386:	4603      	mov	r3, r0
    4388:	71fb      	strb	r3, [r7, #7]
	rssi_max = (v > rssi_max) ? v : rssi_max;
    438a:	4b14      	ldr	r3, [pc, #80]	; (43dc <rssi_add+0x5c>)
    438c:	781b      	ldrb	r3, [r3, #0]
    438e:	b25a      	sxtb	r2, r3
    4390:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4394:	4293      	cmp	r3, r2
    4396:	bfb8      	it	lt
    4398:	4613      	movlt	r3, r2
    439a:	b2da      	uxtb	r2, r3
    439c:	4b0f      	ldr	r3, [pc, #60]	; (43dc <rssi_add+0x5c>)
    439e:	701a      	strb	r2, [r3, #0]
	rssi_min = (v < rssi_min) ? v : rssi_min;
    43a0:	4b0f      	ldr	r3, [pc, #60]	; (43e0 <rssi_add+0x60>)
    43a2:	781b      	ldrb	r3, [r3, #0]
    43a4:	b25a      	sxtb	r2, r3
    43a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
    43aa:	4293      	cmp	r3, r2
    43ac:	bfa8      	it	ge
    43ae:	4613      	movge	r3, r2
    43b0:	b2da      	uxtb	r2, r3
    43b2:	4b0b      	ldr	r3, [pc, #44]	; (43e0 <rssi_add+0x60>)
    43b4:	701a      	strb	r2, [r3, #0]
	rssi_sum += ((int32_t)v * 256);  // scaled int math (x256)
    43b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
    43ba:	021a      	lsls	r2, r3, #8
    43bc:	4b09      	ldr	r3, [pc, #36]	; (43e4 <rssi_add+0x64>)
    43be:	681b      	ldr	r3, [r3, #0]
    43c0:	4413      	add	r3, r2
    43c2:	4a08      	ldr	r2, [pc, #32]	; (43e4 <rssi_add+0x64>)
    43c4:	6013      	str	r3, [r2, #0]
	rssi_count += 1;
    43c6:	4b08      	ldr	r3, [pc, #32]	; (43e8 <rssi_add+0x68>)
    43c8:	781b      	ldrb	r3, [r3, #0]
    43ca:	3301      	adds	r3, #1
    43cc:	b2da      	uxtb	r2, r3
    43ce:	4b06      	ldr	r3, [pc, #24]	; (43e8 <rssi_add+0x68>)
    43d0:	701a      	strb	r2, [r3, #0]
}
    43d2:	370c      	adds	r7, #12
    43d4:	46bd      	mov	sp, r7
    43d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    43da:	4770      	bx	lr
    43dc:	10000b04 	.word	0x10000b04
    43e0:	10000bb8 	.word	0x10000bb8
    43e4:	10000a4c 	.word	0x10000a4c
    43e8:	10000a49 	.word	0x10000a49

000043ec <rssi_iir_update>:

/* For sweep mode, update IIR per channel. Otherwise, use single value. */
static void rssi_iir_update(void)
{
    43ec:	b480      	push	{r7}
    43ee:	b085      	sub	sp, #20
    43f0:	af00      	add	r7, sp, #0
	int32_t avg;
	int32_t rssi_iir_acc;

	/* Use array to track 79 Bluetooth channels, or just first
	 * slot of array if not sweeping. */
	if (hop_mode > 0)
    43f2:	4b1f      	ldr	r3, [pc, #124]	; (4470 <rssi_iir_update+0x84>)
    43f4:	781b      	ldrb	r3, [r3, #0]
    43f6:	2b00      	cmp	r3, #0
    43f8:	d006      	beq.n	4408 <rssi_iir_update+0x1c>
		i = channel - 2402;
    43fa:	4b1e      	ldr	r3, [pc, #120]	; (4474 <rssi_iir_update+0x88>)
    43fc:	881b      	ldrh	r3, [r3, #0]
    43fe:	b29b      	uxth	r3, r3
    4400:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    4404:	60fb      	str	r3, [r7, #12]
    4406:	e001      	b.n	440c <rssi_iir_update+0x20>
	else
		i = 0;
    4408:	2300      	movs	r3, #0
    440a:	60fb      	str	r3, [r7, #12]

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    440c:	4b1a      	ldr	r3, [pc, #104]	; (4478 <rssi_iir_update+0x8c>)
    440e:	781b      	ldrb	r3, [r3, #0]
    4410:	2b00      	cmp	r3, #0
    4412:	d008      	beq.n	4426 <rssi_iir_update+0x3a>
		avg = (rssi_sum  + 128) / rssi_count;
    4414:	4b19      	ldr	r3, [pc, #100]	; (447c <rssi_iir_update+0x90>)
    4416:	681b      	ldr	r3, [r3, #0]
    4418:	3380      	adds	r3, #128	; 0x80
    441a:	4a17      	ldr	r2, [pc, #92]	; (4478 <rssi_iir_update+0x8c>)
    441c:	7812      	ldrb	r2, [r2, #0]
    441e:	fb93 f3f2 	sdiv	r3, r3, r2
    4422:	60bb      	str	r3, [r7, #8]
    4424:	e001      	b.n	442a <rssi_iir_update+0x3e>
	else
		avg = 0; // really an error
    4426:	2300      	movs	r3, #0
    4428:	60bb      	str	r3, [r7, #8]
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    442a:	4a15      	ldr	r2, [pc, #84]	; (4480 <rssi_iir_update+0x94>)
    442c:	68fb      	ldr	r3, [r7, #12]
    442e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4432:	b21a      	sxth	r2, r3
    4434:	4613      	mov	r3, r2
    4436:	019b      	lsls	r3, r3, #6
    4438:	1a9b      	subs	r3, r3, r2
    443a:	009b      	lsls	r3, r3, #2
    443c:	4413      	add	r3, r2
    443e:	607b      	str	r3, [r7, #4]
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    4440:	68ba      	ldr	r2, [r7, #8]
    4442:	4613      	mov	r3, r2
    4444:	005b      	lsls	r3, r3, #1
    4446:	4413      	add	r3, r2
    4448:	687a      	ldr	r2, [r7, #4]
    444a:	4413      	add	r3, r2
    444c:	607b      	str	r3, [r7, #4]
	rssi_iir[i] = (int16_t)((rssi_iir_acc + 128) / 256);
    444e:	687b      	ldr	r3, [r7, #4]
    4450:	3380      	adds	r3, #128	; 0x80
    4452:	2b00      	cmp	r3, #0
    4454:	da00      	bge.n	4458 <rssi_iir_update+0x6c>
    4456:	33ff      	adds	r3, #255	; 0xff
    4458:	121b      	asrs	r3, r3, #8
    445a:	b299      	uxth	r1, r3
    445c:	4a08      	ldr	r2, [pc, #32]	; (4480 <rssi_iir_update+0x94>)
    445e:	68fb      	ldr	r3, [r7, #12]
    4460:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
    4464:	3714      	adds	r7, #20
    4466:	46bd      	mov	sp, r7
    4468:	f85d 7b04 	ldr.w	r7, [sp], #4
    446c:	4770      	bx	lr
    446e:	bf00      	nop
    4470:	1000097c 	.word	0x1000097c
    4474:	1000049c 	.word	0x1000049c
    4478:	10000a49 	.word	0x10000a49
    447c:	10000a4c 	.word	0x10000a4c
    4480:	100009a0 	.word	0x100009a0

00004484 <cs_threshold_set>:
/* Set CC2400 carrier sense threshold and store value to
 * global. CC2400 RSSI is determined by 54dBm + level. CS threshold is
 * in 4dBm steps, so the provided level is rounded to the nearest
 * multiple of 4 by adding 56. Useful range is -100 to -20. */
static void cs_threshold_set(int8_t level, u8 samples)
{
    4484:	b580      	push	{r7, lr}
    4486:	b082      	sub	sp, #8
    4488:	af00      	add	r7, sp, #0
    448a:	4603      	mov	r3, r0
    448c:	460a      	mov	r2, r1
    448e:	71fb      	strb	r3, [r7, #7]
    4490:	4613      	mov	r3, r2
    4492:	71bb      	strb	r3, [r7, #6]
	level = MIN(MAX(level,-120),(-20));
    4494:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4498:	f113 0f14 	cmn.w	r3, #20
    449c:	d00d      	beq.n	44ba <cs_threshold_set+0x36>
    449e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    44a2:	f113 0f13 	cmn.w	r3, #19
    44a6:	da08      	bge.n	44ba <cs_threshold_set+0x36>
    44a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
    44ac:	f06f 0277 	mvn.w	r2, #119	; 0x77
    44b0:	4293      	cmp	r3, r2
    44b2:	bfb8      	it	lt
    44b4:	4613      	movlt	r3, r2
    44b6:	b2db      	uxtb	r3, r3
    44b8:	e000      	b.n	44bc <cs_threshold_set+0x38>
    44ba:	23ec      	movs	r3, #236	; 0xec
    44bc:	71fb      	strb	r3, [r7, #7]
	cc2400_set(RSSI, (uint8_t)((level + 56) & (0x3f << 2)) | (samples&3));
    44be:	79fb      	ldrb	r3, [r7, #7]
    44c0:	3338      	adds	r3, #56	; 0x38
    44c2:	b2db      	uxtb	r3, r3
    44c4:	b29b      	uxth	r3, r3
    44c6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    44ca:	b29a      	uxth	r2, r3
    44cc:	79bb      	ldrb	r3, [r7, #6]
    44ce:	b29b      	uxth	r3, r3
    44d0:	f003 0303 	and.w	r3, r3, #3
    44d4:	b29b      	uxth	r3, r3
    44d6:	4313      	orrs	r3, r2
    44d8:	b29b      	uxth	r3, r3
    44da:	b29b      	uxth	r3, r3
    44dc:	2006      	movs	r0, #6
    44de:	4619      	mov	r1, r3
    44e0:	f005 fc42 	bl	9d68 <cc2400_set>
	cs_threshold_cur = level;
    44e4:	4a08      	ldr	r2, [pc, #32]	; (4508 <cs_threshold_set+0x84>)
    44e6:	79fb      	ldrb	r3, [r7, #7]
    44e8:	7013      	strb	r3, [r2, #0]
	cs_no_squelch = (level <= -120);
    44ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
    44ee:	f113 0f77 	cmn.w	r3, #119	; 0x77
    44f2:	bfb4      	ite	lt
    44f4:	2301      	movlt	r3, #1
    44f6:	2300      	movge	r3, #0
    44f8:	b2db      	uxtb	r3, r3
    44fa:	461a      	mov	r2, r3
    44fc:	4b03      	ldr	r3, [pc, #12]	; (450c <cs_threshold_set+0x88>)
    44fe:	701a      	strb	r2, [r3, #0]
}
    4500:	3708      	adds	r7, #8
    4502:	46bd      	mov	sp, r7
    4504:	bd80      	pop	{r7, pc}
    4506:	bf00      	nop
    4508:	1000044d 	.word	0x1000044d
    450c:	1000097e 	.word	0x1000097e

00004510 <enqueue>:

static int enqueue(u8 type, u8 *buf)
{
    4510:	b580      	push	{r7, lr}
    4512:	b088      	sub	sp, #32
    4514:	af00      	add	r7, sp, #0
    4516:	4603      	mov	r3, r0
    4518:	6039      	str	r1, [r7, #0]
    451a:	71fb      	strb	r3, [r7, #7]
	usb_pkt_rx *f = usb_enqueue();
    451c:	f004 f9ba 	bl	8894 <usb_enqueue>
    4520:	61f8      	str	r0, [r7, #28]

	/* fail if queue is full */
	if (f == NULL) {
    4522:	69fb      	ldr	r3, [r7, #28]
    4524:	2b00      	cmp	r3, #0
    4526:	d109      	bne.n	453c <enqueue+0x2c>
		status |= FIFO_OVERFLOW;
    4528:	4b5e      	ldr	r3, [pc, #376]	; (46a4 <enqueue+0x194>)
    452a:	781b      	ldrb	r3, [r3, #0]
    452c:	b2db      	uxtb	r3, r3
    452e:	f043 0304 	orr.w	r3, r3, #4
    4532:	b2da      	uxtb	r2, r3
    4534:	4b5b      	ldr	r3, [pc, #364]	; (46a4 <enqueue+0x194>)
    4536:	701a      	strb	r2, [r3, #0]
		return 0;
    4538:	2300      	movs	r3, #0
    453a:	e0af      	b.n	469c <enqueue+0x18c>
	}

	f->pkt_type = type;
    453c:	69fb      	ldr	r3, [r7, #28]
    453e:	79fa      	ldrb	r2, [r7, #7]
    4540:	701a      	strb	r2, [r3, #0]
	if(type == SPECAN) {
    4542:	79fb      	ldrb	r3, [r7, #7]
    4544:	2b04      	cmp	r3, #4
    4546:	d113      	bne.n	4570 <enqueue+0x60>
		f->clkn_high = (clkn >> 20) & 0xff;
    4548:	4b57      	ldr	r3, [pc, #348]	; (46a8 <enqueue+0x198>)
    454a:	681b      	ldr	r3, [r3, #0]
    454c:	0d1b      	lsrs	r3, r3, #20
    454e:	b2da      	uxtb	r2, r3
    4550:	69fb      	ldr	r3, [r7, #28]
    4552:	70da      	strb	r2, [r3, #3]
		f->clk100ns = CLK100NS;
    4554:	4b54      	ldr	r3, [pc, #336]	; (46a8 <enqueue+0x198>)
    4556:	681b      	ldr	r3, [r3, #0]
    4558:	f3c3 0313 	ubfx	r3, r3, #0, #20
    455c:	f640 4235 	movw	r2, #3125	; 0xc35
    4560:	fb02 f203 	mul.w	r2, r2, r3
    4564:	4b51      	ldr	r3, [pc, #324]	; (46ac <enqueue+0x19c>)
    4566:	681b      	ldr	r3, [r3, #0]
    4568:	441a      	add	r2, r3
    456a:	69fb      	ldr	r3, [r7, #28]
    456c:	605a      	str	r2, [r3, #4]
    456e:	e008      	b.n	4582 <enqueue+0x72>
	} else {
		f->clkn_high = idle_buf_clkn_high;
    4570:	4b4f      	ldr	r3, [pc, #316]	; (46b0 <enqueue+0x1a0>)
    4572:	681b      	ldr	r3, [r3, #0]
    4574:	b2da      	uxtb	r2, r3
    4576:	69fb      	ldr	r3, [r7, #28]
    4578:	70da      	strb	r2, [r3, #3]
		f->clk100ns = idle_buf_clk100ns;
    457a:	4b4e      	ldr	r3, [pc, #312]	; (46b4 <enqueue+0x1a4>)
    457c:	681a      	ldr	r2, [r3, #0]
    457e:	69fb      	ldr	r3, [r7, #28]
    4580:	605a      	str	r2, [r3, #4]
	}
	f->channel = idle_buf_channel - 2402;
    4582:	4b4d      	ldr	r3, [pc, #308]	; (46b8 <enqueue+0x1a8>)
    4584:	881b      	ldrh	r3, [r3, #0]
    4586:	b29b      	uxth	r3, r3
    4588:	b2db      	uxtb	r3, r3
    458a:	3b62      	subs	r3, #98	; 0x62
    458c:	b2da      	uxtb	r2, r3
    458e:	69fb      	ldr	r3, [r7, #28]
    4590:	709a      	strb	r2, [r3, #2]
	f->rssi_min = rssi_min;
    4592:	4b4a      	ldr	r3, [pc, #296]	; (46bc <enqueue+0x1ac>)
    4594:	781b      	ldrb	r3, [r3, #0]
    4596:	b2da      	uxtb	r2, r3
    4598:	69fb      	ldr	r3, [r7, #28]
    459a:	725a      	strb	r2, [r3, #9]
	f->rssi_max = rssi_max;
    459c:	4b48      	ldr	r3, [pc, #288]	; (46c0 <enqueue+0x1b0>)
    459e:	781b      	ldrb	r3, [r3, #0]
    45a0:	b2da      	uxtb	r2, r3
    45a2:	69fb      	ldr	r3, [r7, #28]
    45a4:	721a      	strb	r2, [r3, #8]
	if (hop_mode != HOP_NONE)
    45a6:	4b47      	ldr	r3, [pc, #284]	; (46c4 <enqueue+0x1b4>)
    45a8:	781b      	ldrb	r3, [r3, #0]
    45aa:	2b00      	cmp	r3, #0
    45ac:	d011      	beq.n	45d2 <enqueue+0xc2>
		f->rssi_avg = (int8_t)((rssi_iir[idle_buf_channel-2402] + 128)/256);
    45ae:	4b42      	ldr	r3, [pc, #264]	; (46b8 <enqueue+0x1a8>)
    45b0:	881b      	ldrh	r3, [r3, #0]
    45b2:	b29b      	uxth	r3, r3
    45b4:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    45b8:	4a43      	ldr	r2, [pc, #268]	; (46c8 <enqueue+0x1b8>)
    45ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    45be:	b21b      	sxth	r3, r3
    45c0:	3380      	adds	r3, #128	; 0x80
    45c2:	2b00      	cmp	r3, #0
    45c4:	da00      	bge.n	45c8 <enqueue+0xb8>
    45c6:	33ff      	adds	r3, #255	; 0xff
    45c8:	121b      	asrs	r3, r3, #8
    45ca:	b2da      	uxtb	r2, r3
    45cc:	69fb      	ldr	r3, [r7, #28]
    45ce:	729a      	strb	r2, [r3, #10]
    45d0:	e00a      	b.n	45e8 <enqueue+0xd8>
	else
		f->rssi_avg = (int8_t)((rssi_iir[0] + 128)/256);
    45d2:	4b3d      	ldr	r3, [pc, #244]	; (46c8 <enqueue+0x1b8>)
    45d4:	881b      	ldrh	r3, [r3, #0]
    45d6:	b21b      	sxth	r3, r3
    45d8:	3380      	adds	r3, #128	; 0x80
    45da:	2b00      	cmp	r3, #0
    45dc:	da00      	bge.n	45e0 <enqueue+0xd0>
    45de:	33ff      	adds	r3, #255	; 0xff
    45e0:	121b      	asrs	r3, r3, #8
    45e2:	b2da      	uxtb	r2, r3
    45e4:	69fb      	ldr	r3, [r7, #28]
    45e6:	729a      	strb	r2, [r3, #10]
	f->rssi_count = rssi_count;
    45e8:	4b38      	ldr	r3, [pc, #224]	; (46cc <enqueue+0x1bc>)
    45ea:	781a      	ldrb	r2, [r3, #0]
    45ec:	69fb      	ldr	r3, [r7, #28]
    45ee:	72da      	strb	r2, [r3, #11]

	USRLED_SET;
    45f0:	4b37      	ldr	r3, [pc, #220]	; (46d0 <enqueue+0x1c0>)
    45f2:	2202      	movs	r2, #2
    45f4:	601a      	str	r2, [r3, #0]

	// Unrolled copy of 50 bytes from buf to fifo
	u32 *p1 = (u32 *)f->data;
    45f6:	69fb      	ldr	r3, [r7, #28]
    45f8:	330e      	adds	r3, #14
    45fa:	61bb      	str	r3, [r7, #24]
	u32 *p2 = (u32 *)buf;
    45fc:	683b      	ldr	r3, [r7, #0]
    45fe:	617b      	str	r3, [r7, #20]
	p1[0] = p2[0];
    4600:	697b      	ldr	r3, [r7, #20]
    4602:	681a      	ldr	r2, [r3, #0]
    4604:	69bb      	ldr	r3, [r7, #24]
    4606:	601a      	str	r2, [r3, #0]
	p1[1] = p2[1];
    4608:	69bb      	ldr	r3, [r7, #24]
    460a:	3304      	adds	r3, #4
    460c:	697a      	ldr	r2, [r7, #20]
    460e:	6852      	ldr	r2, [r2, #4]
    4610:	601a      	str	r2, [r3, #0]
	p1[2] = p2[2];
    4612:	69bb      	ldr	r3, [r7, #24]
    4614:	3308      	adds	r3, #8
    4616:	697a      	ldr	r2, [r7, #20]
    4618:	6892      	ldr	r2, [r2, #8]
    461a:	601a      	str	r2, [r3, #0]
	p1[3] = p2[3];
    461c:	69bb      	ldr	r3, [r7, #24]
    461e:	330c      	adds	r3, #12
    4620:	697a      	ldr	r2, [r7, #20]
    4622:	68d2      	ldr	r2, [r2, #12]
    4624:	601a      	str	r2, [r3, #0]
	p1[4] = p2[4];
    4626:	69bb      	ldr	r3, [r7, #24]
    4628:	3310      	adds	r3, #16
    462a:	697a      	ldr	r2, [r7, #20]
    462c:	6912      	ldr	r2, [r2, #16]
    462e:	601a      	str	r2, [r3, #0]
	p1[5] = p2[5];
    4630:	69bb      	ldr	r3, [r7, #24]
    4632:	3314      	adds	r3, #20
    4634:	697a      	ldr	r2, [r7, #20]
    4636:	6952      	ldr	r2, [r2, #20]
    4638:	601a      	str	r2, [r3, #0]
	p1[6] = p2[6];
    463a:	69bb      	ldr	r3, [r7, #24]
    463c:	3318      	adds	r3, #24
    463e:	697a      	ldr	r2, [r7, #20]
    4640:	6992      	ldr	r2, [r2, #24]
    4642:	601a      	str	r2, [r3, #0]
	p1[7] = p2[7];
    4644:	69bb      	ldr	r3, [r7, #24]
    4646:	331c      	adds	r3, #28
    4648:	697a      	ldr	r2, [r7, #20]
    464a:	69d2      	ldr	r2, [r2, #28]
    464c:	601a      	str	r2, [r3, #0]
	p1[8] = p2[8];
    464e:	69bb      	ldr	r3, [r7, #24]
    4650:	3320      	adds	r3, #32
    4652:	697a      	ldr	r2, [r7, #20]
    4654:	6a12      	ldr	r2, [r2, #32]
    4656:	601a      	str	r2, [r3, #0]
	p1[9] = p2[9];
    4658:	69bb      	ldr	r3, [r7, #24]
    465a:	3324      	adds	r3, #36	; 0x24
    465c:	697a      	ldr	r2, [r7, #20]
    465e:	6a52      	ldr	r2, [r2, #36]	; 0x24
    4660:	601a      	str	r2, [r3, #0]
	p1[10] = p2[10];
    4662:	69bb      	ldr	r3, [r7, #24]
    4664:	3328      	adds	r3, #40	; 0x28
    4666:	697a      	ldr	r2, [r7, #20]
    4668:	6a92      	ldr	r2, [r2, #40]	; 0x28
    466a:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
    466c:	69bb      	ldr	r3, [r7, #24]
    466e:	332c      	adds	r3, #44	; 0x2c
    4670:	697a      	ldr	r2, [r7, #20]
    4672:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    4674:	601a      	str	r2, [r3, #0]
	/* Avoid gcc warning about strict-aliasing */
	u16 *p3 = (u16 *)f->data;
    4676:	69fb      	ldr	r3, [r7, #28]
    4678:	330e      	adds	r3, #14
    467a:	613b      	str	r3, [r7, #16]
	u16 *p4 = (u16 *)buf;
    467c:	683b      	ldr	r3, [r7, #0]
    467e:	60fb      	str	r3, [r7, #12]
	p3[24] = p4[24];
    4680:	693b      	ldr	r3, [r7, #16]
    4682:	3330      	adds	r3, #48	; 0x30
    4684:	68fa      	ldr	r2, [r7, #12]
    4686:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    4688:	801a      	strh	r2, [r3, #0]

	f->status = status;
    468a:	4b06      	ldr	r3, [pc, #24]	; (46a4 <enqueue+0x194>)
    468c:	781b      	ldrb	r3, [r3, #0]
    468e:	b2da      	uxtb	r2, r3
    4690:	69fb      	ldr	r3, [r7, #28]
    4692:	705a      	strb	r2, [r3, #1]
	status = 0;
    4694:	4b03      	ldr	r3, [pc, #12]	; (46a4 <enqueue+0x194>)
    4696:	2200      	movs	r2, #0
    4698:	701a      	strb	r2, [r3, #0]

	return 1;
    469a:	2301      	movs	r3, #1
}
    469c:	4618      	mov	r0, r3
    469e:	3720      	adds	r7, #32
    46a0:	46bd      	mov	sp, r7
    46a2:	bd80      	pop	{r7, pc}
    46a4:	10000a48 	.word	0x10000a48
    46a8:	10000be4 	.word	0x10000be4
    46ac:	40004008 	.word	0x40004008
    46b0:	10001028 	.word	0x10001028
    46b4:	10000bc8 	.word	0x10000bc8
    46b8:	10000988 	.word	0x10000988
    46bc:	10000bb8 	.word	0x10000bb8
    46c0:	10000b04 	.word	0x10000b04
    46c4:	1000097c 	.word	0x1000097c
    46c8:	100009a0 	.word	0x100009a0
    46cc:	10000a49 	.word	0x10000a49
    46d0:	2009c038 	.word	0x2009c038

000046d4 <enqueue_with_ts>:

int enqueue_with_ts(u8 type, u8 *buf, u32 ts)
{
    46d4:	b580      	push	{r7, lr}
    46d6:	b08a      	sub	sp, #40	; 0x28
    46d8:	af00      	add	r7, sp, #0
    46da:	4603      	mov	r3, r0
    46dc:	60b9      	str	r1, [r7, #8]
    46de:	607a      	str	r2, [r7, #4]
    46e0:	73fb      	strb	r3, [r7, #15]
	usb_pkt_rx *f = usb_enqueue();
    46e2:	f004 f8d7 	bl	8894 <usb_enqueue>
    46e6:	6278      	str	r0, [r7, #36]	; 0x24

	/* fail if queue is full */
	if (f == NULL) {
    46e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46ea:	2b00      	cmp	r3, #0
    46ec:	d109      	bne.n	4702 <enqueue_with_ts+0x2e>
		status |= FIFO_OVERFLOW;
    46ee:	4b3c      	ldr	r3, [pc, #240]	; (47e0 <enqueue_with_ts+0x10c>)
    46f0:	781b      	ldrb	r3, [r3, #0]
    46f2:	b2db      	uxtb	r3, r3
    46f4:	f043 0304 	orr.w	r3, r3, #4
    46f8:	b2da      	uxtb	r2, r3
    46fa:	4b39      	ldr	r3, [pc, #228]	; (47e0 <enqueue_with_ts+0x10c>)
    46fc:	701a      	strb	r2, [r3, #0]
		return 0;
    46fe:	2300      	movs	r3, #0
    4700:	e069      	b.n	47d6 <enqueue_with_ts+0x102>
	}

	f->clkn_high = 0;
    4702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4704:	2200      	movs	r2, #0
    4706:	70da      	strb	r2, [r3, #3]
	f->clk100ns = ts;
    4708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    470a:	687a      	ldr	r2, [r7, #4]
    470c:	605a      	str	r2, [r3, #4]

	f->channel = channel - 2402;
    470e:	4b35      	ldr	r3, [pc, #212]	; (47e4 <enqueue_with_ts+0x110>)
    4710:	881b      	ldrh	r3, [r3, #0]
    4712:	b29b      	uxth	r3, r3
    4714:	b2db      	uxtb	r3, r3
    4716:	3b62      	subs	r3, #98	; 0x62
    4718:	b2da      	uxtb	r2, r3
    471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    471c:	709a      	strb	r2, [r3, #2]
	f->rssi_avg = 0;
    471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4720:	2200      	movs	r2, #0
    4722:	729a      	strb	r2, [r3, #10]
	f->rssi_count = 0;
    4724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4726:	2200      	movs	r2, #0
    4728:	72da      	strb	r2, [r3, #11]

	USRLED_SET;
    472a:	4b2f      	ldr	r3, [pc, #188]	; (47e8 <enqueue_with_ts+0x114>)
    472c:	2202      	movs	r2, #2
    472e:	601a      	str	r2, [r3, #0]

	// Unrolled copy of 50 bytes from buf to fifo
	u32 *p1 = (u32 *)f->data;
    4730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4732:	330e      	adds	r3, #14
    4734:	623b      	str	r3, [r7, #32]
	u32 *p2 = (u32 *)buf;
    4736:	68bb      	ldr	r3, [r7, #8]
    4738:	61fb      	str	r3, [r7, #28]
	p1[0] = p2[0];
    473a:	69fb      	ldr	r3, [r7, #28]
    473c:	681a      	ldr	r2, [r3, #0]
    473e:	6a3b      	ldr	r3, [r7, #32]
    4740:	601a      	str	r2, [r3, #0]
	p1[1] = p2[1];
    4742:	6a3b      	ldr	r3, [r7, #32]
    4744:	3304      	adds	r3, #4
    4746:	69fa      	ldr	r2, [r7, #28]
    4748:	6852      	ldr	r2, [r2, #4]
    474a:	601a      	str	r2, [r3, #0]
	p1[2] = p2[2];
    474c:	6a3b      	ldr	r3, [r7, #32]
    474e:	3308      	adds	r3, #8
    4750:	69fa      	ldr	r2, [r7, #28]
    4752:	6892      	ldr	r2, [r2, #8]
    4754:	601a      	str	r2, [r3, #0]
	p1[3] = p2[3];
    4756:	6a3b      	ldr	r3, [r7, #32]
    4758:	330c      	adds	r3, #12
    475a:	69fa      	ldr	r2, [r7, #28]
    475c:	68d2      	ldr	r2, [r2, #12]
    475e:	601a      	str	r2, [r3, #0]
	p1[4] = p2[4];
    4760:	6a3b      	ldr	r3, [r7, #32]
    4762:	3310      	adds	r3, #16
    4764:	69fa      	ldr	r2, [r7, #28]
    4766:	6912      	ldr	r2, [r2, #16]
    4768:	601a      	str	r2, [r3, #0]
	p1[5] = p2[5];
    476a:	6a3b      	ldr	r3, [r7, #32]
    476c:	3314      	adds	r3, #20
    476e:	69fa      	ldr	r2, [r7, #28]
    4770:	6952      	ldr	r2, [r2, #20]
    4772:	601a      	str	r2, [r3, #0]
	p1[6] = p2[6];
    4774:	6a3b      	ldr	r3, [r7, #32]
    4776:	3318      	adds	r3, #24
    4778:	69fa      	ldr	r2, [r7, #28]
    477a:	6992      	ldr	r2, [r2, #24]
    477c:	601a      	str	r2, [r3, #0]
	p1[7] = p2[7];
    477e:	6a3b      	ldr	r3, [r7, #32]
    4780:	331c      	adds	r3, #28
    4782:	69fa      	ldr	r2, [r7, #28]
    4784:	69d2      	ldr	r2, [r2, #28]
    4786:	601a      	str	r2, [r3, #0]
	p1[8] = p2[8];
    4788:	6a3b      	ldr	r3, [r7, #32]
    478a:	3320      	adds	r3, #32
    478c:	69fa      	ldr	r2, [r7, #28]
    478e:	6a12      	ldr	r2, [r2, #32]
    4790:	601a      	str	r2, [r3, #0]
	p1[9] = p2[9];
    4792:	6a3b      	ldr	r3, [r7, #32]
    4794:	3324      	adds	r3, #36	; 0x24
    4796:	69fa      	ldr	r2, [r7, #28]
    4798:	6a52      	ldr	r2, [r2, #36]	; 0x24
    479a:	601a      	str	r2, [r3, #0]
	p1[10] = p2[10];
    479c:	6a3b      	ldr	r3, [r7, #32]
    479e:	3328      	adds	r3, #40	; 0x28
    47a0:	69fa      	ldr	r2, [r7, #28]
    47a2:	6a92      	ldr	r2, [r2, #40]	; 0x28
    47a4:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
    47a6:	6a3b      	ldr	r3, [r7, #32]
    47a8:	332c      	adds	r3, #44	; 0x2c
    47aa:	69fa      	ldr	r2, [r7, #28]
    47ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    47ae:	601a      	str	r2, [r3, #0]
	/* Avoid gcc warning about strict-aliasing */
	u16 *p3 = (u16 *)f->data;
    47b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    47b2:	330e      	adds	r3, #14
    47b4:	61bb      	str	r3, [r7, #24]
	u16 *p4 = (u16 *)buf;
    47b6:	68bb      	ldr	r3, [r7, #8]
    47b8:	617b      	str	r3, [r7, #20]
	p3[24] = p4[24];
    47ba:	69bb      	ldr	r3, [r7, #24]
    47bc:	3330      	adds	r3, #48	; 0x30
    47be:	697a      	ldr	r2, [r7, #20]
    47c0:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    47c2:	801a      	strh	r2, [r3, #0]

	f->status = status;
    47c4:	4b06      	ldr	r3, [pc, #24]	; (47e0 <enqueue_with_ts+0x10c>)
    47c6:	781b      	ldrb	r3, [r3, #0]
    47c8:	b2da      	uxtb	r2, r3
    47ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    47cc:	705a      	strb	r2, [r3, #1]
	status = 0;
    47ce:	4b04      	ldr	r3, [pc, #16]	; (47e0 <enqueue_with_ts+0x10c>)
    47d0:	2200      	movs	r2, #0
    47d2:	701a      	strb	r2, [r3, #0]

	return 1;
    47d4:	2301      	movs	r3, #1
}
    47d6:	4618      	mov	r0, r3
    47d8:	3728      	adds	r7, #40	; 0x28
    47da:	46bd      	mov	sp, r7
    47dc:	bd80      	pop	{r7, pc}
    47de:	bf00      	nop
    47e0:	10000a48 	.word	0x10000a48
    47e4:	1000049c 	.word	0x1000049c
    47e8:	2009c038 	.word	0x2009c038

000047ec <cs_threshold_calc_and_set>:

static void cs_threshold_calc_and_set(void)
{
    47ec:	b580      	push	{r7, lr}
    47ee:	b082      	sub	sp, #8
    47f0:	af00      	add	r7, sp, #0

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if ((hop_mode > 0) && (cs_threshold_req > 0)) {
    47f2:	4b17      	ldr	r3, [pc, #92]	; (4850 <cs_threshold_calc_and_set+0x64>)
    47f4:	781b      	ldrb	r3, [r3, #0]
    47f6:	2b00      	cmp	r3, #0
    47f8:	d01d      	beq.n	4836 <cs_threshold_calc_and_set+0x4a>
    47fa:	4b16      	ldr	r3, [pc, #88]	; (4854 <cs_threshold_calc_and_set+0x68>)
    47fc:	781b      	ldrb	r3, [r3, #0]
    47fe:	b25b      	sxtb	r3, r3
    4800:	2b00      	cmp	r3, #0
    4802:	dd18      	ble.n	4836 <cs_threshold_calc_and_set+0x4a>
		int8_t rssi = (int8_t)((rssi_iir[channel-2402] + 128)/256);
    4804:	4b14      	ldr	r3, [pc, #80]	; (4858 <cs_threshold_calc_and_set+0x6c>)
    4806:	881b      	ldrh	r3, [r3, #0]
    4808:	b29b      	uxth	r3, r3
    480a:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    480e:	4a13      	ldr	r2, [pc, #76]	; (485c <cs_threshold_calc_and_set+0x70>)
    4810:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4814:	b21b      	sxth	r3, r3
    4816:	3380      	adds	r3, #128	; 0x80
    4818:	2b00      	cmp	r3, #0
    481a:	da00      	bge.n	481e <cs_threshold_calc_and_set+0x32>
    481c:	33ff      	adds	r3, #255	; 0xff
    481e:	121b      	asrs	r3, r3, #8
    4820:	71bb      	strb	r3, [r7, #6]
		level = rssi - 54 + cs_threshold_req;
    4822:	79ba      	ldrb	r2, [r7, #6]
    4824:	4b0b      	ldr	r3, [pc, #44]	; (4854 <cs_threshold_calc_and_set+0x68>)
    4826:	781b      	ldrb	r3, [r3, #0]
    4828:	b2db      	uxtb	r3, r3
    482a:	4413      	add	r3, r2
    482c:	b2db      	uxtb	r3, r3
    482e:	3b36      	subs	r3, #54	; 0x36
    4830:	b2db      	uxtb	r3, r3
    4832:	71fb      	strb	r3, [r7, #7]

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if ((hop_mode > 0) && (cs_threshold_req > 0)) {
    4834:	e002      	b.n	483c <cs_threshold_calc_and_set+0x50>
		int8_t rssi = (int8_t)((rssi_iir[channel-2402] + 128)/256);
		level = rssi - 54 + cs_threshold_req;
	}
	else {
		level = cs_threshold_req;
    4836:	4b07      	ldr	r3, [pc, #28]	; (4854 <cs_threshold_calc_and_set+0x68>)
    4838:	781b      	ldrb	r3, [r3, #0]
    483a:	71fb      	strb	r3, [r7, #7]
	}
	cs_threshold_set(level, CS_SAMPLES_4);
    483c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4840:	4618      	mov	r0, r3
    4842:	2103      	movs	r1, #3
    4844:	f7ff fe1e 	bl	4484 <cs_threshold_set>
}
    4848:	3708      	adds	r7, #8
    484a:	46bd      	mov	sp, r7
    484c:	bd80      	pop	{r7, pc}
    484e:	bf00      	nop
    4850:	1000097c 	.word	0x1000097c
    4854:	1000044c 	.word	0x1000044c
    4858:	1000049c 	.word	0x1000049c
    485c:	100009a0 	.word	0x100009a0

00004860 <cs_trigger_enable>:
/* CS comes from CC2400 GIO6, which is LPC P2.2, active low. GPIO
 * triggers EINT3, which could be used for other things (but is not
 * currently). TODO - EINT3 should be managed globally, not turned on
 * and off here. */
static void cs_trigger_enable(void)
{
    4860:	b480      	push	{r7}
    4862:	af00      	add	r7, sp, #0
	cs_trigger = 0;
    4864:	4b09      	ldr	r3, [pc, #36]	; (488c <cs_trigger_enable+0x2c>)
    4866:	2200      	movs	r2, #0
    4868:	701a      	strb	r2, [r3, #0]
	ISER0 = ISER0_ISE_EINT3;
    486a:	4b09      	ldr	r3, [pc, #36]	; (4890 <cs_trigger_enable+0x30>)
    486c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    4870:	601a      	str	r2, [r3, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    4872:	4b08      	ldr	r3, [pc, #32]	; (4894 <cs_trigger_enable+0x34>)
    4874:	2204      	movs	r2, #4
    4876:	601a      	str	r2, [r3, #0]
	IO2IntEnF |= PIN_GIO6;     // Enable port 2.2 falling (CS active low)
    4878:	4a07      	ldr	r2, [pc, #28]	; (4898 <cs_trigger_enable+0x38>)
    487a:	4b07      	ldr	r3, [pc, #28]	; (4898 <cs_trigger_enable+0x38>)
    487c:	681b      	ldr	r3, [r3, #0]
    487e:	f043 0304 	orr.w	r3, r3, #4
    4882:	6013      	str	r3, [r2, #0]
}
    4884:	46bd      	mov	sp, r7
    4886:	f85d 7b04 	ldr.w	r7, [sp], #4
    488a:	4770      	bx	lr
    488c:	100010b0 	.word	0x100010b0
    4890:	e000e100 	.word	0xe000e100
    4894:	400280ac 	.word	0x400280ac
    4898:	400280b4 	.word	0x400280b4

0000489c <cs_trigger_disable>:

static void cs_trigger_disable(void)
{
    489c:	b480      	push	{r7}
    489e:	af00      	add	r7, sp, #0
	IO2IntEnF &= ~PIN_GIO6;    // Disable port 2.2 falling (CS active low)
    48a0:	4a09      	ldr	r2, [pc, #36]	; (48c8 <cs_trigger_disable+0x2c>)
    48a2:	4b09      	ldr	r3, [pc, #36]	; (48c8 <cs_trigger_disable+0x2c>)
    48a4:	681b      	ldr	r3, [r3, #0]
    48a6:	f023 0304 	bic.w	r3, r3, #4
    48aa:	6013      	str	r3, [r2, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    48ac:	4b07      	ldr	r3, [pc, #28]	; (48cc <cs_trigger_disable+0x30>)
    48ae:	2204      	movs	r2, #4
    48b0:	601a      	str	r2, [r3, #0]
	ICER0 = ICER0_ICE_EINT3;
    48b2:	4b07      	ldr	r3, [pc, #28]	; (48d0 <cs_trigger_disable+0x34>)
    48b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    48b8:	601a      	str	r2, [r3, #0]
	cs_trigger = 0;
    48ba:	4b06      	ldr	r3, [pc, #24]	; (48d4 <cs_trigger_disable+0x38>)
    48bc:	2200      	movs	r2, #0
    48be:	701a      	strb	r2, [r3, #0]
}
    48c0:	46bd      	mov	sp, r7
    48c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    48c6:	4770      	bx	lr
    48c8:	400280b4 	.word	0x400280b4
    48cc:	400280ac 	.word	0x400280ac
    48d0:	e000e180 	.word	0xe000e180
    48d4:	100010b0 	.word	0x100010b0

000048d8 <vendor_request_handler>:

static int vendor_request_handler(u8 request, u16 *request_params, u8 *data, int *data_len)
{
    48d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    48dc:	b095      	sub	sp, #84	; 0x54
    48de:	af00      	add	r7, sp, #0
    48e0:	60b9      	str	r1, [r7, #8]
    48e2:	607a      	str	r2, [r7, #4]
    48e4:	603b      	str	r3, [r7, #0]
    48e6:	4603      	mov	r3, r0
    48e8:	73fb      	strb	r3, [r7, #15]
	u64 ac_copy;
	int i; // loop counter
	u32 clock;
	int clock_offset;
	u8 length; // string length
	usb_pkt_rx *p = NULL;
    48ea:	2300      	movs	r3, #0
    48ec:	647b      	str	r3, [r7, #68]	; 0x44
	u16 reg_val;

	switch (request) {
    48ee:	7bfb      	ldrb	r3, [r7, #15]
    48f0:	2b3c      	cmp	r3, #60	; 0x3c
    48f2:	f200 8551 	bhi.w	5398 <vendor_request_handler+0xac0>
    48f6:	a201      	add	r2, pc, #4	; (adr r2, 48fc <vendor_request_handler+0x24>)
    48f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    48fc:	000049f1 	.word	0x000049f1
    4900:	000049fb 	.word	0x000049fb
    4904:	00005399 	.word	0x00005399
    4908:	00004a0b 	.word	0x00004a0b
    490c:	00004a2d 	.word	0x00004a2d
    4910:	00004a49 	.word	0x00004a49
    4914:	00004a6b 	.word	0x00004a6b
    4918:	00004a87 	.word	0x00004a87
    491c:	00004aa9 	.word	0x00004aa9
    4920:	00004ac9 	.word	0x00004ac9
    4924:	00004aeb 	.word	0x00004aeb
    4928:	00004d8f 	.word	0x00004d8f
    492c:	00004db5 	.word	0x00004db5
    4930:	00004b61 	.word	0x00004b61
    4934:	00004b6b 	.word	0x00004b6b
    4938:	00004b0b 	.word	0x00004b0b
    493c:	00004c49 	.word	0x00004c49
    4940:	00004c69 	.word	0x00004c69
    4944:	00004ca1 	.word	0x00004ca1
    4948:	00004cc1 	.word	0x00004cc1
    494c:	00004cdd 	.word	0x00004cdd
    4950:	00004d69 	.word	0x00004d69
    4954:	00004d71 	.word	0x00004d71
    4958:	00004d83 	.word	0x00004d83
    495c:	00004e3f 	.word	0x00004e3f
    4960:	00004e5d 	.word	0x00004e5d
    4964:	00005399 	.word	0x00005399
    4968:	00004e69 	.word	0x00004e69
    496c:	00004ce5 	.word	0x00004ce5
    4970:	00004d01 	.word	0x00004d01
    4974:	00004d29 	.word	0x00004d29
    4978:	00004d21 	.word	0x00004d21
    497c:	00004d31 	.word	0x00004d31
    4980:	00004f2d 	.word	0x00004f2d
    4984:	00004ec5 	.word	0x00004ec5
    4988:	00004fa1 	.word	0x00004fa1
    498c:	00004faf 	.word	0x00004faf
    4990:	00004fbf 	.word	0x00004fbf
    4994:	00004fd1 	.word	0x00004fd1
    4998:	0000509d 	.word	0x0000509d
    499c:	000050e3 	.word	0x000050e3
    49a0:	00005171 	.word	0x00005171
    49a4:	000051a5 	.word	0x000051a5
    49a8:	000051c7 	.word	0x000051c7
    49ac:	0000521f 	.word	0x0000521f
    49b0:	0000539d 	.word	0x0000539d
    49b4:	00005251 	.word	0x00005251
    49b8:	00005267 	.word	0x00005267
    49bc:	00005283 	.word	0x00005283
    49c0:	00005299 	.word	0x00005299
    49c4:	000052c5 	.word	0x000052c5
    49c8:	00005115 	.word	0x00005115
    49cc:	00005147 	.word	0x00005147
    49d0:	000052e1 	.word	0x000052e1
    49d4:	00005325 	.word	0x00005325
    49d8:	00004f6f 	.word	0x00004f6f
    49dc:	00005337 	.word	0x00005337
    49e0:	00005399 	.word	0x00005399
    49e4:	0000530f 	.word	0x0000530f
    49e8:	0000537b 	.word	0x0000537b
    49ec:	00005387 	.word	0x00005387

	case UBERTOOTH_PING:
		*data_len = 0;
    49f0:	683b      	ldr	r3, [r7, #0]
    49f2:	2200      	movs	r2, #0
    49f4:	601a      	str	r2, [r3, #0]
		break;
    49f6:	f000 bcd2 	b.w	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_RX_SYMBOLS:
		requested_mode = MODE_RX_SYMBOLS;
    49fa:	4ba1      	ldr	r3, [pc, #644]	; (4c80 <vendor_request_handler+0x3a8>)
    49fc:	2201      	movs	r2, #1
    49fe:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4a00:	683b      	ldr	r3, [r7, #0]
    4a02:	2200      	movs	r2, #0
    4a04:	601a      	str	r2, [r3, #0]
		break;
    4a06:	f000 bcca 	b.w	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_USRLED:
		data[0] = (USRLED) ? 1 : 0;
    4a0a:	4b9e      	ldr	r3, [pc, #632]	; (4c84 <vendor_request_handler+0x3ac>)
    4a0c:	681b      	ldr	r3, [r3, #0]
    4a0e:	f003 0302 	and.w	r3, r3, #2
    4a12:	2b00      	cmp	r3, #0
    4a14:	bf14      	ite	ne
    4a16:	2301      	movne	r3, #1
    4a18:	2300      	moveq	r3, #0
    4a1a:	b2db      	uxtb	r3, r3
    4a1c:	461a      	mov	r2, r3
    4a1e:	687b      	ldr	r3, [r7, #4]
    4a20:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4a22:	683b      	ldr	r3, [r7, #0]
    4a24:	2201      	movs	r2, #1
    4a26:	601a      	str	r2, [r3, #0]
		break;
    4a28:	f000 bcb9 	b.w	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
    4a2c:	68bb      	ldr	r3, [r7, #8]
    4a2e:	881b      	ldrh	r3, [r3, #0]
    4a30:	2b00      	cmp	r3, #0
    4a32:	d004      	beq.n	4a3e <vendor_request_handler+0x166>
			USRLED_SET;
    4a34:	4b94      	ldr	r3, [pc, #592]	; (4c88 <vendor_request_handler+0x3b0>)
    4a36:	2202      	movs	r2, #2
    4a38:	601a      	str	r2, [r3, #0]
		else
			USRLED_CLR;
		break;
    4a3a:	f000 bcb0 	b.w	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
			USRLED_SET;
		else
			USRLED_CLR;
    4a3e:	4b93      	ldr	r3, [pc, #588]	; (4c8c <vendor_request_handler+0x3b4>)
    4a40:	2202      	movs	r2, #2
    4a42:	601a      	str	r2, [r3, #0]
		break;
    4a44:	f000 bcab 	b.w	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_RXLED:
		data[0] = (RXLED) ? 1 : 0;
    4a48:	4b8e      	ldr	r3, [pc, #568]	; (4c84 <vendor_request_handler+0x3ac>)
    4a4a:	681b      	ldr	r3, [r3, #0]
    4a4c:	f003 0310 	and.w	r3, r3, #16
    4a50:	2b00      	cmp	r3, #0
    4a52:	bf14      	ite	ne
    4a54:	2301      	movne	r3, #1
    4a56:	2300      	moveq	r3, #0
    4a58:	b2db      	uxtb	r3, r3
    4a5a:	461a      	mov	r2, r3
    4a5c:	687b      	ldr	r3, [r7, #4]
    4a5e:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4a60:	683b      	ldr	r3, [r7, #0]
    4a62:	2201      	movs	r2, #1
    4a64:	601a      	str	r2, [r3, #0]
		break;
    4a66:	f000 bc9a 	b.w	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
    4a6a:	68bb      	ldr	r3, [r7, #8]
    4a6c:	881b      	ldrh	r3, [r3, #0]
    4a6e:	2b00      	cmp	r3, #0
    4a70:	d004      	beq.n	4a7c <vendor_request_handler+0x1a4>
			RXLED_SET;
    4a72:	4b85      	ldr	r3, [pc, #532]	; (4c88 <vendor_request_handler+0x3b0>)
    4a74:	2210      	movs	r2, #16
    4a76:	601a      	str	r2, [r3, #0]
		else
			RXLED_CLR;
		break;
    4a78:	f000 bc91 	b.w	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
			RXLED_SET;
		else
			RXLED_CLR;
    4a7c:	4b83      	ldr	r3, [pc, #524]	; (4c8c <vendor_request_handler+0x3b4>)
    4a7e:	2210      	movs	r2, #16
    4a80:	601a      	str	r2, [r3, #0]
		break;
    4a82:	f000 bc8c 	b.w	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_TXLED:
		data[0] = (TXLED) ? 1 : 0;
    4a86:	4b7f      	ldr	r3, [pc, #508]	; (4c84 <vendor_request_handler+0x3ac>)
    4a88:	681b      	ldr	r3, [r3, #0]
    4a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4a8e:	2b00      	cmp	r3, #0
    4a90:	bf14      	ite	ne
    4a92:	2301      	movne	r3, #1
    4a94:	2300      	moveq	r3, #0
    4a96:	b2db      	uxtb	r3, r3
    4a98:	461a      	mov	r2, r3
    4a9a:	687b      	ldr	r3, [r7, #4]
    4a9c:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4a9e:	683b      	ldr	r3, [r7, #0]
    4aa0:	2201      	movs	r2, #1
    4aa2:	601a      	str	r2, [r3, #0]
		break;
    4aa4:	f000 bc7b 	b.w	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
    4aa8:	68bb      	ldr	r3, [r7, #8]
    4aaa:	881b      	ldrh	r3, [r3, #0]
    4aac:	2b00      	cmp	r3, #0
    4aae:	d005      	beq.n	4abc <vendor_request_handler+0x1e4>
			TXLED_SET;
    4ab0:	4b75      	ldr	r3, [pc, #468]	; (4c88 <vendor_request_handler+0x3b0>)
    4ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
    4ab6:	601a      	str	r2, [r3, #0]
		else
			TXLED_CLR;
		break;
    4ab8:	f000 bc71 	b.w	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
			TXLED_SET;
		else
			TXLED_CLR;
    4abc:	4b73      	ldr	r3, [pc, #460]	; (4c8c <vendor_request_handler+0x3b4>)
    4abe:	f44f 7280 	mov.w	r2, #256	; 0x100
    4ac2:	601a      	str	r2, [r3, #0]
		break;
    4ac4:	f000 bc6b 	b.w	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_1V8:
		data[0] = (CC1V8) ? 1 : 0;
    4ac8:	4b6e      	ldr	r3, [pc, #440]	; (4c84 <vendor_request_handler+0x3ac>)
    4aca:	681b      	ldr	r3, [r3, #0]
    4acc:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4ad0:	2b00      	cmp	r3, #0
    4ad2:	bf14      	ite	ne
    4ad4:	2301      	movne	r3, #1
    4ad6:	2300      	moveq	r3, #0
    4ad8:	b2db      	uxtb	r3, r3
    4ada:	461a      	mov	r2, r3
    4adc:	687b      	ldr	r3, [r7, #4]
    4ade:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4ae0:	683b      	ldr	r3, [r7, #0]
    4ae2:	2201      	movs	r2, #1
    4ae4:	601a      	str	r2, [r3, #0]
		break;
    4ae6:	f000 bc5a 	b.w	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
    4aea:	68bb      	ldr	r3, [r7, #8]
    4aec:	881b      	ldrh	r3, [r3, #0]
    4aee:	2b00      	cmp	r3, #0
    4af0:	d005      	beq.n	4afe <vendor_request_handler+0x226>
			CC1V8_SET;
    4af2:	4b65      	ldr	r3, [pc, #404]	; (4c88 <vendor_request_handler+0x3b0>)
    4af4:	f44f 7200 	mov.w	r2, #512	; 0x200
    4af8:	601a      	str	r2, [r3, #0]
		else
			CC1V8_CLR;
		break;
    4afa:	f000 bc50 	b.w	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
			CC1V8_SET;
		else
			CC1V8_CLR;
    4afe:	4b63      	ldr	r3, [pc, #396]	; (4c8c <vendor_request_handler+0x3b4>)
    4b00:	f44f 7200 	mov.w	r2, #512	; 0x200
    4b04:	601a      	str	r2, [r3, #0]
		break;
    4b06:	f000 bc4a 	b.w	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_PARTNUM:
		command[0] = 54; /* read part number */
    4b0a:	2336      	movs	r3, #54	; 0x36
    4b0c:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    4b0e:	4b60      	ldr	r3, [pc, #384]	; (4c90 <vendor_request_handler+0x3b8>)
    4b10:	681b      	ldr	r3, [r3, #0]
    4b12:	f107 0124 	add.w	r1, r7, #36	; 0x24
    4b16:	f107 0210 	add.w	r2, r7, #16
    4b1a:	4608      	mov	r0, r1
    4b1c:	4611      	mov	r1, r2
    4b1e:	4798      	blx	r3
		data[0] = result[0] & 0xFF; /* status */
    4b20:	693b      	ldr	r3, [r7, #16]
    4b22:	b2da      	uxtb	r2, r3
    4b24:	687b      	ldr	r3, [r7, #4]
    4b26:	701a      	strb	r2, [r3, #0]
		data[1] = result[1] & 0xFF;
    4b28:	687b      	ldr	r3, [r7, #4]
    4b2a:	3301      	adds	r3, #1
    4b2c:	697a      	ldr	r2, [r7, #20]
    4b2e:	b2d2      	uxtb	r2, r2
    4b30:	701a      	strb	r2, [r3, #0]
		data[2] = (result[1] >> 8) & 0xFF;
    4b32:	687b      	ldr	r3, [r7, #4]
    4b34:	3302      	adds	r3, #2
    4b36:	697a      	ldr	r2, [r7, #20]
    4b38:	0a12      	lsrs	r2, r2, #8
    4b3a:	b2d2      	uxtb	r2, r2
    4b3c:	701a      	strb	r2, [r3, #0]
		data[3] = (result[1] >> 16) & 0xFF;
    4b3e:	687b      	ldr	r3, [r7, #4]
    4b40:	3303      	adds	r3, #3
    4b42:	697a      	ldr	r2, [r7, #20]
    4b44:	0c12      	lsrs	r2, r2, #16
    4b46:	b2d2      	uxtb	r2, r2
    4b48:	701a      	strb	r2, [r3, #0]
		data[4] = (result[1] >> 24) & 0xFF;
    4b4a:	687b      	ldr	r3, [r7, #4]
    4b4c:	3304      	adds	r3, #4
    4b4e:	697a      	ldr	r2, [r7, #20]
    4b50:	0e12      	lsrs	r2, r2, #24
    4b52:	b2d2      	uxtb	r2, r2
    4b54:	701a      	strb	r2, [r3, #0]
		*data_len = 5;
    4b56:	683b      	ldr	r3, [r7, #0]
    4b58:	2205      	movs	r2, #5
    4b5a:	601a      	str	r2, [r3, #0]
		break;
    4b5c:	f000 bc1f 	b.w	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_RESET:
		requested_mode = MODE_RESET;
    4b60:	4b47      	ldr	r3, [pc, #284]	; (4c80 <vendor_request_handler+0x3a8>)
    4b62:	220b      	movs	r2, #11
    4b64:	701a      	strb	r2, [r3, #0]
		break;
    4b66:	f000 bc1a 	b.w	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_SERIAL:
		command[0] = 58; /* read device serial number */
    4b6a:	233a      	movs	r3, #58	; 0x3a
    4b6c:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    4b6e:	4b48      	ldr	r3, [pc, #288]	; (4c90 <vendor_request_handler+0x3b8>)
    4b70:	681b      	ldr	r3, [r3, #0]
    4b72:	f107 0124 	add.w	r1, r7, #36	; 0x24
    4b76:	f107 0210 	add.w	r2, r7, #16
    4b7a:	4608      	mov	r0, r1
    4b7c:	4611      	mov	r1, r2
    4b7e:	4798      	blx	r3
		data[0] = result[0] & 0xFF; /* status */
    4b80:	693b      	ldr	r3, [r7, #16]
    4b82:	b2da      	uxtb	r2, r3
    4b84:	687b      	ldr	r3, [r7, #4]
    4b86:	701a      	strb	r2, [r3, #0]
		data[1] = result[1] & 0xFF;
    4b88:	687b      	ldr	r3, [r7, #4]
    4b8a:	3301      	adds	r3, #1
    4b8c:	697a      	ldr	r2, [r7, #20]
    4b8e:	b2d2      	uxtb	r2, r2
    4b90:	701a      	strb	r2, [r3, #0]
		data[2] = (result[1] >> 8) & 0xFF;
    4b92:	687b      	ldr	r3, [r7, #4]
    4b94:	3302      	adds	r3, #2
    4b96:	697a      	ldr	r2, [r7, #20]
    4b98:	0a12      	lsrs	r2, r2, #8
    4b9a:	b2d2      	uxtb	r2, r2
    4b9c:	701a      	strb	r2, [r3, #0]
		data[3] = (result[1] >> 16) & 0xFF;
    4b9e:	687b      	ldr	r3, [r7, #4]
    4ba0:	3303      	adds	r3, #3
    4ba2:	697a      	ldr	r2, [r7, #20]
    4ba4:	0c12      	lsrs	r2, r2, #16
    4ba6:	b2d2      	uxtb	r2, r2
    4ba8:	701a      	strb	r2, [r3, #0]
		data[4] = (result[1] >> 24) & 0xFF;
    4baa:	687b      	ldr	r3, [r7, #4]
    4bac:	3304      	adds	r3, #4
    4bae:	697a      	ldr	r2, [r7, #20]
    4bb0:	0e12      	lsrs	r2, r2, #24
    4bb2:	b2d2      	uxtb	r2, r2
    4bb4:	701a      	strb	r2, [r3, #0]
		data[5] = result[2] & 0xFF;
    4bb6:	687b      	ldr	r3, [r7, #4]
    4bb8:	3305      	adds	r3, #5
    4bba:	69ba      	ldr	r2, [r7, #24]
    4bbc:	b2d2      	uxtb	r2, r2
    4bbe:	701a      	strb	r2, [r3, #0]
		data[6] = (result[2] >> 8) & 0xFF;
    4bc0:	687b      	ldr	r3, [r7, #4]
    4bc2:	3306      	adds	r3, #6
    4bc4:	69ba      	ldr	r2, [r7, #24]
    4bc6:	0a12      	lsrs	r2, r2, #8
    4bc8:	b2d2      	uxtb	r2, r2
    4bca:	701a      	strb	r2, [r3, #0]
		data[7] = (result[2] >> 16) & 0xFF;
    4bcc:	687b      	ldr	r3, [r7, #4]
    4bce:	3307      	adds	r3, #7
    4bd0:	69ba      	ldr	r2, [r7, #24]
    4bd2:	0c12      	lsrs	r2, r2, #16
    4bd4:	b2d2      	uxtb	r2, r2
    4bd6:	701a      	strb	r2, [r3, #0]
		data[8] = (result[2] >> 24) & 0xFF;
    4bd8:	687b      	ldr	r3, [r7, #4]
    4bda:	3308      	adds	r3, #8
    4bdc:	69ba      	ldr	r2, [r7, #24]
    4bde:	0e12      	lsrs	r2, r2, #24
    4be0:	b2d2      	uxtb	r2, r2
    4be2:	701a      	strb	r2, [r3, #0]
		data[9] = result[3] & 0xFF;
    4be4:	687b      	ldr	r3, [r7, #4]
    4be6:	3309      	adds	r3, #9
    4be8:	69fa      	ldr	r2, [r7, #28]
    4bea:	b2d2      	uxtb	r2, r2
    4bec:	701a      	strb	r2, [r3, #0]
		data[10] = (result[3] >> 8) & 0xFF;
    4bee:	687b      	ldr	r3, [r7, #4]
    4bf0:	330a      	adds	r3, #10
    4bf2:	69fa      	ldr	r2, [r7, #28]
    4bf4:	0a12      	lsrs	r2, r2, #8
    4bf6:	b2d2      	uxtb	r2, r2
    4bf8:	701a      	strb	r2, [r3, #0]
		data[11] = (result[3] >> 16) & 0xFF;
    4bfa:	687b      	ldr	r3, [r7, #4]
    4bfc:	330b      	adds	r3, #11
    4bfe:	69fa      	ldr	r2, [r7, #28]
    4c00:	0c12      	lsrs	r2, r2, #16
    4c02:	b2d2      	uxtb	r2, r2
    4c04:	701a      	strb	r2, [r3, #0]
		data[12] = (result[3] >> 24) & 0xFF;
    4c06:	687b      	ldr	r3, [r7, #4]
    4c08:	330c      	adds	r3, #12
    4c0a:	69fa      	ldr	r2, [r7, #28]
    4c0c:	0e12      	lsrs	r2, r2, #24
    4c0e:	b2d2      	uxtb	r2, r2
    4c10:	701a      	strb	r2, [r3, #0]
		data[13] = result[4] & 0xFF;
    4c12:	687b      	ldr	r3, [r7, #4]
    4c14:	330d      	adds	r3, #13
    4c16:	6a3a      	ldr	r2, [r7, #32]
    4c18:	b2d2      	uxtb	r2, r2
    4c1a:	701a      	strb	r2, [r3, #0]
		data[14] = (result[4] >> 8) & 0xFF;
    4c1c:	687b      	ldr	r3, [r7, #4]
    4c1e:	330e      	adds	r3, #14
    4c20:	6a3a      	ldr	r2, [r7, #32]
    4c22:	0a12      	lsrs	r2, r2, #8
    4c24:	b2d2      	uxtb	r2, r2
    4c26:	701a      	strb	r2, [r3, #0]
		data[15] = (result[4] >> 16) & 0xFF;
    4c28:	687b      	ldr	r3, [r7, #4]
    4c2a:	330f      	adds	r3, #15
    4c2c:	6a3a      	ldr	r2, [r7, #32]
    4c2e:	0c12      	lsrs	r2, r2, #16
    4c30:	b2d2      	uxtb	r2, r2
    4c32:	701a      	strb	r2, [r3, #0]
		data[16] = (result[4] >> 24) & 0xFF;
    4c34:	687b      	ldr	r3, [r7, #4]
    4c36:	3310      	adds	r3, #16
    4c38:	6a3a      	ldr	r2, [r7, #32]
    4c3a:	0e12      	lsrs	r2, r2, #24
    4c3c:	b2d2      	uxtb	r2, r2
    4c3e:	701a      	strb	r2, [r3, #0]
		*data_len = 17;
    4c40:	683b      	ldr	r3, [r7, #0]
    4c42:	2211      	movs	r2, #17
    4c44:	601a      	str	r2, [r3, #0]
		break;
    4c46:	e3aa      	b.n	539e <vendor_request_handler+0xac6>

#ifdef UBERTOOTH_ONE
	case UBERTOOTH_GET_PAEN:
		data[0] = (PAEN) ? 1 : 0;
    4c48:	4b12      	ldr	r3, [pc, #72]	; (4c94 <vendor_request_handler+0x3bc>)
    4c4a:	681b      	ldr	r3, [r3, #0]
    4c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4c50:	2b00      	cmp	r3, #0
    4c52:	bf14      	ite	ne
    4c54:	2301      	movne	r3, #1
    4c56:	2300      	moveq	r3, #0
    4c58:	b2db      	uxtb	r3, r3
    4c5a:	461a      	mov	r2, r3
    4c5c:	687b      	ldr	r3, [r7, #4]
    4c5e:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4c60:	683b      	ldr	r3, [r7, #0]
    4c62:	2201      	movs	r2, #1
    4c64:	601a      	str	r2, [r3, #0]
		break;
    4c66:	e39a      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
    4c68:	68bb      	ldr	r3, [r7, #8]
    4c6a:	881b      	ldrh	r3, [r3, #0]
    4c6c:	2b00      	cmp	r3, #0
    4c6e:	d003      	beq.n	4c78 <vendor_request_handler+0x3a0>
			PAEN_SET;
    4c70:	4b09      	ldr	r3, [pc, #36]	; (4c98 <vendor_request_handler+0x3c0>)
    4c72:	2280      	movs	r2, #128	; 0x80
    4c74:	601a      	str	r2, [r3, #0]
		else
			PAEN_CLR;
		break;
    4c76:	e392      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
			PAEN_SET;
		else
			PAEN_CLR;
    4c78:	4b08      	ldr	r3, [pc, #32]	; (4c9c <vendor_request_handler+0x3c4>)
    4c7a:	2280      	movs	r2, #128	; 0x80
    4c7c:	601a      	str	r2, [r3, #0]
		break;
    4c7e:	e38e      	b.n	539e <vendor_request_handler+0xac6>
    4c80:	10000a3f 	.word	0x10000a3f
    4c84:	2009c034 	.word	0x2009c034
    4c88:	2009c038 	.word	0x2009c038
    4c8c:	2009c03c 	.word	0x2009c03c
    4c90:	10000448 	.word	0x10000448
    4c94:	2009c054 	.word	0x2009c054
    4c98:	2009c058 	.word	0x2009c058
    4c9c:	2009c05c 	.word	0x2009c05c

	case UBERTOOTH_GET_HGM:
		data[0] = (HGM) ? 1 : 0;
    4ca0:	4b92      	ldr	r3, [pc, #584]	; (4eec <vendor_request_handler+0x614>)
    4ca2:	681b      	ldr	r3, [r3, #0]
    4ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4ca8:	2b00      	cmp	r3, #0
    4caa:	bf14      	ite	ne
    4cac:	2301      	movne	r3, #1
    4cae:	2300      	moveq	r3, #0
    4cb0:	b2db      	uxtb	r3, r3
    4cb2:	461a      	mov	r2, r3
    4cb4:	687b      	ldr	r3, [r7, #4]
    4cb6:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4cb8:	683b      	ldr	r3, [r7, #0]
    4cba:	2201      	movs	r2, #1
    4cbc:	601a      	str	r2, [r3, #0]
		break;
    4cbe:	e36e      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
    4cc0:	68bb      	ldr	r3, [r7, #8]
    4cc2:	881b      	ldrh	r3, [r3, #0]
    4cc4:	2b00      	cmp	r3, #0
    4cc6:	d004      	beq.n	4cd2 <vendor_request_handler+0x3fa>
			HGM_SET;
    4cc8:	4b89      	ldr	r3, [pc, #548]	; (4ef0 <vendor_request_handler+0x618>)
    4cca:	f44f 7280 	mov.w	r2, #256	; 0x100
    4cce:	601a      	str	r2, [r3, #0]
		else
			HGM_CLR;
		break;
    4cd0:	e365      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
			HGM_SET;
		else
			HGM_CLR;
    4cd2:	4b88      	ldr	r3, [pc, #544]	; (4ef4 <vendor_request_handler+0x61c>)
    4cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
    4cd8:	601a      	str	r2, [r3, #0]
		break;
    4cda:	e360      	b.n	539e <vendor_request_handler+0xac6>
#endif

#ifdef TX_ENABLE
	case UBERTOOTH_TX_TEST:
		requested_mode = MODE_TX_TEST;
    4cdc:	4b86      	ldr	r3, [pc, #536]	; (4ef8 <vendor_request_handler+0x620>)
    4cde:	2203      	movs	r2, #3
    4ce0:	701a      	strb	r2, [r3, #0]
		break;
    4ce2:	e35c      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_PALEVEL:
		data[0] = cc2400_get(FREND) & 0x7;
    4ce4:	2005      	movs	r0, #5
    4ce6:	f005 f829 	bl	9d3c <cc2400_get>
    4cea:	4603      	mov	r3, r0
    4cec:	b2db      	uxtb	r3, r3
    4cee:	f003 0307 	and.w	r3, r3, #7
    4cf2:	b2da      	uxtb	r2, r3
    4cf4:	687b      	ldr	r3, [r7, #4]
    4cf6:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4cf8:	683b      	ldr	r3, [r7, #0]
    4cfa:	2201      	movs	r2, #1
    4cfc:	601a      	str	r2, [r3, #0]
		break;
    4cfe:	e34e      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
    4d00:	68bb      	ldr	r3, [r7, #8]
    4d02:	881b      	ldrh	r3, [r3, #0]
    4d04:	2b07      	cmp	r3, #7
    4d06:	d809      	bhi.n	4d1c <vendor_request_handler+0x444>
			cc2400_set(FREND, 8 | request_params[0]);
    4d08:	68bb      	ldr	r3, [r7, #8]
    4d0a:	881b      	ldrh	r3, [r3, #0]
    4d0c:	f043 0308 	orr.w	r3, r3, #8
    4d10:	b29b      	uxth	r3, r3
    4d12:	2005      	movs	r0, #5
    4d14:	4619      	mov	r1, r3
    4d16:	f005 f827 	bl	9d68 <cc2400_set>
		} else {
			return 0;
		}
		break;
    4d1a:	e340      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
			cc2400_set(FREND, 8 | request_params[0]);
		} else {
			return 0;
    4d1c:	2300      	movs	r3, #0
    4d1e:	e33f      	b.n	53a0 <vendor_request_handler+0xac8>
		}
		break;

	case UBERTOOTH_RANGE_TEST:
		requested_mode = MODE_RANGE_TEST;
    4d20:	4b75      	ldr	r3, [pc, #468]	; (4ef8 <vendor_request_handler+0x620>)
    4d22:	2205      	movs	r2, #5
    4d24:	701a      	strb	r2, [r3, #0]
		break;
    4d26:	e33a      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_REPEATER:
		requested_mode = MODE_REPEATER;
    4d28:	4b73      	ldr	r3, [pc, #460]	; (4ef8 <vendor_request_handler+0x620>)
    4d2a:	2206      	movs	r2, #6
    4d2c:	701a      	strb	r2, [r3, #0]
		break;
    4d2e:	e336      	b.n	539e <vendor_request_handler+0xac6>
#endif

	case UBERTOOTH_RANGE_CHECK:
		data[0] = rr.valid;
    4d30:	4b72      	ldr	r3, [pc, #456]	; (4efc <vendor_request_handler+0x624>)
    4d32:	781a      	ldrb	r2, [r3, #0]
    4d34:	687b      	ldr	r3, [r7, #4]
    4d36:	701a      	strb	r2, [r3, #0]
		data[1] = rr.request_pa;
    4d38:	687b      	ldr	r3, [r7, #4]
    4d3a:	3301      	adds	r3, #1
    4d3c:	4a6f      	ldr	r2, [pc, #444]	; (4efc <vendor_request_handler+0x624>)
    4d3e:	7852      	ldrb	r2, [r2, #1]
    4d40:	701a      	strb	r2, [r3, #0]
		data[2] = rr.request_num;
    4d42:	687b      	ldr	r3, [r7, #4]
    4d44:	3302      	adds	r3, #2
    4d46:	4a6d      	ldr	r2, [pc, #436]	; (4efc <vendor_request_handler+0x624>)
    4d48:	7892      	ldrb	r2, [r2, #2]
    4d4a:	701a      	strb	r2, [r3, #0]
		data[3] = rr.reply_pa;
    4d4c:	687b      	ldr	r3, [r7, #4]
    4d4e:	3303      	adds	r3, #3
    4d50:	4a6a      	ldr	r2, [pc, #424]	; (4efc <vendor_request_handler+0x624>)
    4d52:	78d2      	ldrb	r2, [r2, #3]
    4d54:	701a      	strb	r2, [r3, #0]
		data[4] = rr.reply_num;
    4d56:	687b      	ldr	r3, [r7, #4]
    4d58:	3304      	adds	r3, #4
    4d5a:	4a68      	ldr	r2, [pc, #416]	; (4efc <vendor_request_handler+0x624>)
    4d5c:	7912      	ldrb	r2, [r2, #4]
    4d5e:	701a      	strb	r2, [r3, #0]
		*data_len = 5;
    4d60:	683b      	ldr	r3, [r7, #0]
    4d62:	2205      	movs	r2, #5
    4d64:	601a      	str	r2, [r3, #0]
		break;
    4d66:	e31a      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_STOP:
		requested_mode = MODE_IDLE;
    4d68:	4b63      	ldr	r3, [pc, #396]	; (4ef8 <vendor_request_handler+0x620>)
    4d6a:	2200      	movs	r2, #0
    4d6c:	701a      	strb	r2, [r3, #0]
		break;
    4d6e:	e316      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_MOD:
		data[0] = modulation;
    4d70:	4b63      	ldr	r3, [pc, #396]	; (4f00 <vendor_request_handler+0x628>)
    4d72:	781b      	ldrb	r3, [r3, #0]
    4d74:	b2da      	uxtb	r2, r3
    4d76:	687b      	ldr	r3, [r7, #4]
    4d78:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4d7a:	683b      	ldr	r3, [r7, #0]
    4d7c:	2201      	movs	r2, #1
    4d7e:	601a      	str	r2, [r3, #0]
		break;
    4d80:	e30d      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_MOD:
		modulation = request_params[0];
    4d82:	68bb      	ldr	r3, [r7, #8]
    4d84:	881b      	ldrh	r3, [r3, #0]
    4d86:	b2da      	uxtb	r2, r3
    4d88:	4b5d      	ldr	r3, [pc, #372]	; (4f00 <vendor_request_handler+0x628>)
    4d8a:	701a      	strb	r2, [r3, #0]
		break;
    4d8c:	e307      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_CHANNEL:
		data[0] = channel & 0xFF;
    4d8e:	4b5d      	ldr	r3, [pc, #372]	; (4f04 <vendor_request_handler+0x62c>)
    4d90:	881b      	ldrh	r3, [r3, #0]
    4d92:	b29b      	uxth	r3, r3
    4d94:	b2da      	uxtb	r2, r3
    4d96:	687b      	ldr	r3, [r7, #4]
    4d98:	701a      	strb	r2, [r3, #0]
		data[1] = (channel >> 8) & 0xFF;
    4d9a:	687b      	ldr	r3, [r7, #4]
    4d9c:	3301      	adds	r3, #1
    4d9e:	4a59      	ldr	r2, [pc, #356]	; (4f04 <vendor_request_handler+0x62c>)
    4da0:	8812      	ldrh	r2, [r2, #0]
    4da2:	b292      	uxth	r2, r2
    4da4:	0a12      	lsrs	r2, r2, #8
    4da6:	b292      	uxth	r2, r2
    4da8:	b2d2      	uxtb	r2, r2
    4daa:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    4dac:	683b      	ldr	r3, [r7, #0]
    4dae:	2202      	movs	r2, #2
    4db0:	601a      	str	r2, [r3, #0]
		break;
    4db2:	e2f4      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_CHANNEL:
		requested_channel = request_params[0];
    4db4:	68bb      	ldr	r3, [r7, #8]
    4db6:	881a      	ldrh	r2, [r3, #0]
    4db8:	4b53      	ldr	r3, [pc, #332]	; (4f08 <vendor_request_handler+0x630>)
    4dba:	801a      	strh	r2, [r3, #0]
		/* bluetooth band sweep mode, start at channel 2402 */
		if (requested_channel > MAX_FREQ) {
    4dbc:	4b52      	ldr	r3, [pc, #328]	; (4f08 <vendor_request_handler+0x630>)
    4dbe:	881b      	ldrh	r3, [r3, #0]
    4dc0:	b29b      	uxth	r3, r3
    4dc2:	f640 22ea 	movw	r2, #2794	; 0xaea
    4dc6:	4293      	cmp	r3, r2
    4dc8:	d907      	bls.n	4dda <vendor_request_handler+0x502>
			hop_mode = HOP_SWEEP;
    4dca:	4b50      	ldr	r3, [pc, #320]	; (4f0c <vendor_request_handler+0x634>)
    4dcc:	2201      	movs	r2, #1
    4dce:	701a      	strb	r2, [r3, #0]
			requested_channel = 2402;
    4dd0:	4b4d      	ldr	r3, [pc, #308]	; (4f08 <vendor_request_handler+0x630>)
    4dd2:	f640 1262 	movw	r2, #2402	; 0x962
    4dd6:	801a      	strh	r2, [r3, #0]
    4dd8:	e020      	b.n	4e1c <vendor_request_handler+0x544>
		}
		/* fixed channel mode, can be outside bluetooth band */
		else {
			hop_mode = HOP_NONE;
    4dda:	4b4c      	ldr	r3, [pc, #304]	; (4f0c <vendor_request_handler+0x634>)
    4ddc:	2200      	movs	r2, #0
    4dde:	701a      	strb	r2, [r3, #0]
			requested_channel = MAX(requested_channel, MIN_FREQ);
    4de0:	4b49      	ldr	r3, [pc, #292]	; (4f08 <vendor_request_handler+0x630>)
    4de2:	881b      	ldrh	r3, [r3, #0]
    4de4:	b29b      	uxth	r3, r3
    4de6:	f640 02dc 	movw	r2, #2268	; 0x8dc
    4dea:	4293      	cmp	r3, r2
    4dec:	d903      	bls.n	4df6 <vendor_request_handler+0x51e>
    4dee:	4b46      	ldr	r3, [pc, #280]	; (4f08 <vendor_request_handler+0x630>)
    4df0:	881b      	ldrh	r3, [r3, #0]
    4df2:	b29b      	uxth	r3, r3
    4df4:	e001      	b.n	4dfa <vendor_request_handler+0x522>
    4df6:	f640 03dc 	movw	r3, #2268	; 0x8dc
    4dfa:	4a43      	ldr	r2, [pc, #268]	; (4f08 <vendor_request_handler+0x630>)
    4dfc:	8013      	strh	r3, [r2, #0]
			requested_channel = MIN(requested_channel, MAX_FREQ);
    4dfe:	4b42      	ldr	r3, [pc, #264]	; (4f08 <vendor_request_handler+0x630>)
    4e00:	881b      	ldrh	r3, [r3, #0]
    4e02:	b29b      	uxth	r3, r3
    4e04:	f640 22e9 	movw	r2, #2793	; 0xae9
    4e08:	4293      	cmp	r3, r2
    4e0a:	d803      	bhi.n	4e14 <vendor_request_handler+0x53c>
    4e0c:	4b3e      	ldr	r3, [pc, #248]	; (4f08 <vendor_request_handler+0x630>)
    4e0e:	881b      	ldrh	r3, [r3, #0]
    4e10:	b29b      	uxth	r3, r3
    4e12:	e001      	b.n	4e18 <vendor_request_handler+0x540>
    4e14:	f640 23ea 	movw	r3, #2794	; 0xaea
    4e18:	4a3b      	ldr	r2, [pc, #236]	; (4f08 <vendor_request_handler+0x630>)
    4e1a:	8013      	strh	r3, [r2, #0]
		}

		if (mode != MODE_BT_FOLLOW_LE) {
    4e1c:	4b3c      	ldr	r3, [pc, #240]	; (4f10 <vendor_request_handler+0x638>)
    4e1e:	781b      	ldrb	r3, [r3, #0]
    4e20:	b2db      	uxtb	r3, r3
    4e22:	2b09      	cmp	r3, #9
    4e24:	d00a      	beq.n	4e3c <vendor_request_handler+0x564>
			channel = requested_channel;
    4e26:	4b38      	ldr	r3, [pc, #224]	; (4f08 <vendor_request_handler+0x630>)
    4e28:	881b      	ldrh	r3, [r3, #0]
    4e2a:	b29a      	uxth	r2, r3
    4e2c:	4b35      	ldr	r3, [pc, #212]	; (4f04 <vendor_request_handler+0x62c>)
    4e2e:	801a      	strh	r2, [r3, #0]
			requested_channel = 0;
    4e30:	4b35      	ldr	r3, [pc, #212]	; (4f08 <vendor_request_handler+0x630>)
    4e32:	2200      	movs	r2, #0
    4e34:	801a      	strh	r2, [r3, #0]

			/* CS threshold is mode-dependent. Update it after
			 * possible mode change. TODO - kludgy. */
			cs_threshold_calc_and_set();
    4e36:	f7ff fcd9 	bl	47ec <cs_threshold_calc_and_set>
		}
		break;
    4e3a:	e2b0      	b.n	539e <vendor_request_handler+0xac6>
    4e3c:	e2af      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_ISP:
		command[0] = 57;
    4e3e:	2339      	movs	r3, #57	; 0x39
    4e40:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    4e42:	4b34      	ldr	r3, [pc, #208]	; (4f14 <vendor_request_handler+0x63c>)
    4e44:	681b      	ldr	r3, [r3, #0]
    4e46:	f107 0124 	add.w	r1, r7, #36	; 0x24
    4e4a:	f107 0210 	add.w	r2, r7, #16
    4e4e:	4608      	mov	r0, r1
    4e50:	4611      	mov	r1, r2
    4e52:	4798      	blx	r3
		*data_len = 0; /* should never return */
    4e54:	683b      	ldr	r3, [r7, #0]
    4e56:	2200      	movs	r2, #0
    4e58:	601a      	str	r2, [r3, #0]
		break;
    4e5a:	e2a0      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_FLASH:
		bootloader_ctrl = DFU_MODE;
    4e5c:	4b2e      	ldr	r3, [pc, #184]	; (4f18 <vendor_request_handler+0x640>)
    4e5e:	4a2f      	ldr	r2, [pc, #188]	; (4f1c <vendor_request_handler+0x644>)
    4e60:	601a      	str	r2, [r3, #0]
		reset();
    4e62:	f005 f94d 	bl	a100 <reset>
		break;
    4e66:	e29a      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
    4e68:	68bb      	ldr	r3, [r7, #8]
    4e6a:	881b      	ldrh	r3, [r3, #0]
    4e6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4e70:	d917      	bls.n	4ea2 <vendor_request_handler+0x5ca>
    4e72:	68bb      	ldr	r3, [r7, #8]
    4e74:	881b      	ldrh	r3, [r3, #0]
    4e76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    4e7a:	d812      	bhi.n	4ea2 <vendor_request_handler+0x5ca>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4e7c:	68bb      	ldr	r3, [r7, #8]
    4e7e:	3302      	adds	r3, #2
    4e80:	881b      	ldrh	r3, [r3, #0]
		bootloader_ctrl = DFU_MODE;
		reset();
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
    4e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4e86:	d90c      	bls.n	4ea2 <vendor_request_handler+0x5ca>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4e88:	68bb      	ldr	r3, [r7, #8]
    4e8a:	3302      	adds	r3, #2
    4e8c:	881b      	ldrh	r3, [r3, #0]
    4e8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    4e92:	d806      	bhi.n	4ea2 <vendor_request_handler+0x5ca>
				request_params[1] < request_params[0])
    4e94:	68bb      	ldr	r3, [r7, #8]
    4e96:	3302      	adds	r3, #2
    4e98:	881a      	ldrh	r2, [r3, #0]
    4e9a:	68bb      	ldr	r3, [r7, #8]
    4e9c:	881b      	ldrh	r3, [r3, #0]
		reset();
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4e9e:	429a      	cmp	r2, r3
    4ea0:	d201      	bcs.n	4ea6 <vendor_request_handler+0x5ce>
				request_params[1] < request_params[0])
			return 0;
    4ea2:	2300      	movs	r3, #0
    4ea4:	e27c      	b.n	53a0 <vendor_request_handler+0xac8>
		low_freq = request_params[0];
    4ea6:	68bb      	ldr	r3, [r7, #8]
    4ea8:	881a      	ldrh	r2, [r3, #0]
    4eaa:	4b1d      	ldr	r3, [pc, #116]	; (4f20 <vendor_request_handler+0x648>)
    4eac:	801a      	strh	r2, [r3, #0]
		high_freq = request_params[1];
    4eae:	68bb      	ldr	r3, [r7, #8]
    4eb0:	885a      	ldrh	r2, [r3, #2]
    4eb2:	4b1c      	ldr	r3, [pc, #112]	; (4f24 <vendor_request_handler+0x64c>)
    4eb4:	801a      	strh	r2, [r3, #0]
		requested_mode = MODE_SPECAN;
    4eb6:	4b10      	ldr	r3, [pc, #64]	; (4ef8 <vendor_request_handler+0x620>)
    4eb8:	2204      	movs	r2, #4
    4eba:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4ebc:	683b      	ldr	r3, [r7, #0]
    4ebe:	2200      	movs	r2, #0
    4ec0:	601a      	str	r2, [r3, #0]
		break;
    4ec2:	e26c      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_LED_SPECAN:
		if (request_params[0] > 256)
    4ec4:	68bb      	ldr	r3, [r7, #8]
    4ec6:	881b      	ldrh	r3, [r3, #0]
    4ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4ecc:	d901      	bls.n	4ed2 <vendor_request_handler+0x5fa>
			return 0;
    4ece:	2300      	movs	r3, #0
    4ed0:	e266      	b.n	53a0 <vendor_request_handler+0xac8>
		rssi_threshold = (int8_t)request_params[0];
    4ed2:	68bb      	ldr	r3, [r7, #8]
    4ed4:	881b      	ldrh	r3, [r3, #0]
    4ed6:	b2da      	uxtb	r2, r3
    4ed8:	4b13      	ldr	r3, [pc, #76]	; (4f28 <vendor_request_handler+0x650>)
    4eda:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_LED_SPECAN;
    4edc:	4b06      	ldr	r3, [pc, #24]	; (4ef8 <vendor_request_handler+0x620>)
    4ede:	2207      	movs	r2, #7
    4ee0:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4ee2:	683b      	ldr	r3, [r7, #0]
    4ee4:	2200      	movs	r2, #0
    4ee6:	601a      	str	r2, [r3, #0]
		break;
    4ee8:	e259      	b.n	539e <vendor_request_handler+0xac6>
    4eea:	bf00      	nop
    4eec:	2009c054 	.word	0x2009c054
    4ef0:	2009c058 	.word	0x2009c058
    4ef4:	2009c05c 	.word	0x2009c05c
    4ef8:	10000a3f 	.word	0x10000a3f
    4efc:	10001070 	.word	0x10001070
    4f00:	10000a42 	.word	0x10000a42
    4f04:	1000049c 	.word	0x1000049c
    4f08:	10000a44 	.word	0x10000a44
    4f0c:	1000097c 	.word	0x1000097c
    4f10:	10000a3e 	.word	0x10000a3e
    4f14:	10000448 	.word	0x10000448
    4f18:	1000001c 	.word	0x1000001c
    4f1c:	4305bb21 	.word	0x4305bb21
    4f20:	1000049e 	.word	0x1000049e
    4f24:	100004a0 	.word	0x100004a0
    4f28:	100004a2 	.word	0x100004a2

	case UBERTOOTH_GET_REV_NUM:
		data[0] = 0x00;
    4f2c:	687b      	ldr	r3, [r7, #4]
    4f2e:	2200      	movs	r2, #0
    4f30:	701a      	strb	r2, [r3, #0]
		data[1] = 0x00;
    4f32:	687b      	ldr	r3, [r7, #4]
    4f34:	3301      	adds	r3, #1
    4f36:	2200      	movs	r2, #0
    4f38:	701a      	strb	r2, [r3, #0]

		length = (u8)strlen(GIT_REVISION);
    4f3a:	48a4      	ldr	r0, [pc, #656]	; (51cc <vendor_request_handler+0x8f4>)
    4f3c:	f006 f974 	bl	b228 <strlen>
    4f40:	4603      	mov	r3, r0
    4f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		data[2] = length;
    4f46:	687b      	ldr	r3, [r7, #4]
    4f48:	3302      	adds	r3, #2
    4f4a:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
    4f4e:	701a      	strb	r2, [r3, #0]

		memcpy(&data[3], GIT_REVISION, length);
    4f50:	687b      	ldr	r3, [r7, #4]
    4f52:	1cda      	adds	r2, r3, #3
    4f54:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    4f58:	4610      	mov	r0, r2
    4f5a:	499c      	ldr	r1, [pc, #624]	; (51cc <vendor_request_handler+0x8f4>)
    4f5c:	461a      	mov	r2, r3
    4f5e:	f006 f8ed 	bl	b13c <memcpy>

		*data_len = 2 + 1 + length;
    4f62:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    4f66:	1cda      	adds	r2, r3, #3
    4f68:	683b      	ldr	r3, [r7, #0]
    4f6a:	601a      	str	r2, [r3, #0]
		break;
    4f6c:	e217      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_COMPILE_INFO:
		length = (u8)strlen(compile_info);
    4f6e:	4898      	ldr	r0, [pc, #608]	; (51d0 <vendor_request_handler+0x8f8>)
    4f70:	f006 f95a 	bl	b228 <strlen>
    4f74:	4603      	mov	r3, r0
    4f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		data[0] = length;
    4f7a:	687b      	ldr	r3, [r7, #4]
    4f7c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
    4f80:	701a      	strb	r2, [r3, #0]
		memcpy(&data[1], compile_info, length);
    4f82:	687b      	ldr	r3, [r7, #4]
    4f84:	1c5a      	adds	r2, r3, #1
    4f86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    4f8a:	4610      	mov	r0, r2
    4f8c:	4990      	ldr	r1, [pc, #576]	; (51d0 <vendor_request_handler+0x8f8>)
    4f8e:	461a      	mov	r2, r3
    4f90:	f006 f8d4 	bl	b13c <memcpy>
		*data_len = 1 + length;
    4f94:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    4f98:	1c5a      	adds	r2, r3, #1
    4f9a:	683b      	ldr	r3, [r7, #0]
    4f9c:	601a      	str	r2, [r3, #0]
		break;
    4f9e:	e1fe      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_BOARD_ID:
		data[0] = BOARD_ID;
    4fa0:	687b      	ldr	r3, [r7, #4]
    4fa2:	2201      	movs	r2, #1
    4fa4:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4fa6:	683b      	ldr	r3, [r7, #0]
    4fa8:	2201      	movs	r2, #1
    4faa:	601a      	str	r2, [r3, #0]
		break;
    4fac:	e1f7      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_SQUELCH:
		cs_threshold_req = (int8_t)request_params[0];
    4fae:	68bb      	ldr	r3, [r7, #8]
    4fb0:	881b      	ldrh	r3, [r3, #0]
    4fb2:	b2da      	uxtb	r2, r3
    4fb4:	4b87      	ldr	r3, [pc, #540]	; (51d4 <vendor_request_handler+0x8fc>)
    4fb6:	701a      	strb	r2, [r3, #0]
		cs_threshold_calc_and_set();
    4fb8:	f7ff fc18 	bl	47ec <cs_threshold_calc_and_set>
		break;
    4fbc:	e1ef      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_SQUELCH:
		data[0] = cs_threshold_req;
    4fbe:	4b85      	ldr	r3, [pc, #532]	; (51d4 <vendor_request_handler+0x8fc>)
    4fc0:	781b      	ldrb	r3, [r3, #0]
    4fc2:	b2da      	uxtb	r2, r3
    4fc4:	687b      	ldr	r3, [r7, #4]
    4fc6:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4fc8:	683b      	ldr	r3, [r7, #0]
    4fca:	2201      	movs	r2, #1
    4fcc:	601a      	str	r2, [r3, #0]
		break;
    4fce:	e1e6      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
    4fd0:	4981      	ldr	r1, [pc, #516]	; (51d8 <vendor_request_handler+0x900>)
    4fd2:	f04f 0200 	mov.w	r2, #0
    4fd6:	f04f 0300 	mov.w	r3, #0
    4fda:	e9c1 2300 	strd	r2, r3, [r1]
		target.access_code = 0;
    4fde:	497e      	ldr	r1, [pc, #504]	; (51d8 <vendor_request_handler+0x900>)
    4fe0:	f04f 0200 	mov.w	r2, #0
    4fe4:	f04f 0300 	mov.w	r3, #0
    4fe8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		for(i=0; i < 8; i++) {
    4fec:	2300      	movs	r3, #0
    4fee:	64fb      	str	r3, [r7, #76]	; 0x4c
    4ff0:	e025      	b.n	503e <vendor_request_handler+0x766>
			target.address |= (uint64_t)data[i] << 8*i;
    4ff2:	4b79      	ldr	r3, [pc, #484]	; (51d8 <vendor_request_handler+0x900>)
    4ff4:	e9d3 ab00 	ldrd	sl, fp, [r3]
    4ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4ffa:	687a      	ldr	r2, [r7, #4]
    4ffc:	4413      	add	r3, r2
    4ffe:	781b      	ldrb	r3, [r3, #0]
    5000:	b2da      	uxtb	r2, r3
    5002:	f04f 0300 	mov.w	r3, #0
    5006:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    5008:	00c9      	lsls	r1, r1, #3
    500a:	f1a1 0620 	sub.w	r6, r1, #32
    500e:	f1c1 0020 	rsb	r0, r1, #32
    5012:	fa03 f901 	lsl.w	r9, r3, r1
    5016:	fa02 f606 	lsl.w	r6, r2, r6
    501a:	ea49 0906 	orr.w	r9, r9, r6
    501e:	fa22 f000 	lsr.w	r0, r2, r0
    5022:	ea49 0900 	orr.w	r9, r9, r0
    5026:	fa02 f801 	lsl.w	r8, r2, r1
    502a:	ea4a 0208 	orr.w	r2, sl, r8
    502e:	ea4b 0309 	orr.w	r3, fp, r9
    5032:	4969      	ldr	r1, [pc, #420]	; (51d8 <vendor_request_handler+0x900>)
    5034:	e9c1 2300 	strd	r2, r3, [r1]
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.access_code = 0;
		for(i=0; i < 8; i++) {
    5038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    503a:	3301      	adds	r3, #1
    503c:	64fb      	str	r3, [r7, #76]	; 0x4c
    503e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5040:	2b07      	cmp	r3, #7
    5042:	ddd6      	ble.n	4ff2 <vendor_request_handler+0x71a>
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(i=0; i < 8; i++) {
    5044:	2300      	movs	r3, #0
    5046:	64fb      	str	r3, [r7, #76]	; 0x4c
    5048:	e024      	b.n	5094 <vendor_request_handler+0x7bc>
			target.access_code |= (uint64_t)data[i+8] << 8*i;
    504a:	4b63      	ldr	r3, [pc, #396]	; (51d8 <vendor_request_handler+0x900>)
    504c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
    5050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5052:	3308      	adds	r3, #8
    5054:	687a      	ldr	r2, [r7, #4]
    5056:	4413      	add	r3, r2
    5058:	781b      	ldrb	r3, [r3, #0]
    505a:	b2da      	uxtb	r2, r3
    505c:	f04f 0300 	mov.w	r3, #0
    5060:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    5062:	00c9      	lsls	r1, r1, #3
    5064:	f1a1 0620 	sub.w	r6, r1, #32
    5068:	f1c1 0020 	rsb	r0, r1, #32
    506c:	fa03 f501 	lsl.w	r5, r3, r1
    5070:	fa02 f606 	lsl.w	r6, r2, r6
    5074:	4335      	orrs	r5, r6
    5076:	fa22 f000 	lsr.w	r0, r2, r0
    507a:	4305      	orrs	r5, r0
    507c:	fa02 f401 	lsl.w	r4, r2, r1
    5080:	ea48 0204 	orr.w	r2, r8, r4
    5084:	ea49 0305 	orr.w	r3, r9, r5
    5088:	4953      	ldr	r1, [pc, #332]	; (51d8 <vendor_request_handler+0x900>)
    508a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		target.address = 0;
		target.access_code = 0;
		for(i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(i=0; i < 8; i++) {
    508e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5090:	3301      	adds	r3, #1
    5092:	64fb      	str	r3, [r7, #76]	; 0x4c
    5094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5096:	2b07      	cmp	r3, #7
    5098:	ddd7      	ble.n	504a <vendor_request_handler+0x772>
			target.access_code |= (uint64_t)data[i+8] << 8*i;
		}
		break;
    509a:	e180      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_START_HOPPING:
		clock_offset = 0;
    509c:	2300      	movs	r3, #0
    509e:	64bb      	str	r3, [r7, #72]	; 0x48
		for(i=0; i < 4; i++) {
    50a0:	2300      	movs	r3, #0
    50a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    50a4:	e00d      	b.n	50c2 <vendor_request_handler+0x7ea>
			clock_offset <<= 8;
    50a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    50a8:	021b      	lsls	r3, r3, #8
    50aa:	64bb      	str	r3, [r7, #72]	; 0x48
			clock_offset |= data[i];
    50ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50ae:	687a      	ldr	r2, [r7, #4]
    50b0:	4413      	add	r3, r2
    50b2:	781b      	ldrb	r3, [r3, #0]
    50b4:	461a      	mov	r2, r3
    50b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    50b8:	4313      	orrs	r3, r2
    50ba:	64bb      	str	r3, [r7, #72]	; 0x48
		}
		break;

	case UBERTOOTH_START_HOPPING:
		clock_offset = 0;
		for(i=0; i < 4; i++) {
    50bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50be:	3301      	adds	r3, #1
    50c0:	64fb      	str	r3, [r7, #76]	; 0x4c
    50c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50c4:	2b03      	cmp	r3, #3
    50c6:	ddee      	ble.n	50a6 <vendor_request_handler+0x7ce>
			clock_offset <<= 8;
			clock_offset |= data[i];
		}
		clkn += clock_offset;
    50c8:	4b44      	ldr	r3, [pc, #272]	; (51dc <vendor_request_handler+0x904>)
    50ca:	681a      	ldr	r2, [r3, #0]
    50cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    50ce:	4413      	add	r3, r2
    50d0:	4a42      	ldr	r2, [pc, #264]	; (51dc <vendor_request_handler+0x904>)
    50d2:	6013      	str	r3, [r2, #0]
		hop_mode = HOP_BLUETOOTH;
    50d4:	4b42      	ldr	r3, [pc, #264]	; (51e0 <vendor_request_handler+0x908>)
    50d6:	2202      	movs	r2, #2
    50d8:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_FOLLOW;
    50da:	4b42      	ldr	r3, [pc, #264]	; (51e4 <vendor_request_handler+0x90c>)
    50dc:	2208      	movs	r2, #8
    50de:	701a      	strb	r2, [r3, #0]
		break;
    50e0:	e15d      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_CLOCK:
		clock = data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
    50e2:	687b      	ldr	r3, [r7, #4]
    50e4:	781b      	ldrb	r3, [r3, #0]
    50e6:	461a      	mov	r2, r3
    50e8:	687b      	ldr	r3, [r7, #4]
    50ea:	3301      	adds	r3, #1
    50ec:	781b      	ldrb	r3, [r3, #0]
    50ee:	021b      	lsls	r3, r3, #8
    50f0:	431a      	orrs	r2, r3
    50f2:	687b      	ldr	r3, [r7, #4]
    50f4:	3302      	adds	r3, #2
    50f6:	781b      	ldrb	r3, [r3, #0]
    50f8:	041b      	lsls	r3, r3, #16
    50fa:	431a      	orrs	r2, r3
    50fc:	687b      	ldr	r3, [r7, #4]
    50fe:	3303      	adds	r3, #3
    5100:	781b      	ldrb	r3, [r3, #0]
    5102:	061b      	lsls	r3, r3, #24
    5104:	4313      	orrs	r3, r2
    5106:	63fb      	str	r3, [r7, #60]	; 0x3c
		clkn = clock;
    5108:	4a34      	ldr	r2, [pc, #208]	; (51dc <vendor_request_handler+0x904>)
    510a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    510c:	6013      	str	r3, [r2, #0]
		cs_threshold_calc_and_set();
    510e:	f7ff fb6d 	bl	47ec <cs_threshold_calc_and_set>
		break;
    5112:	e144      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_AFHMAP:
		for(i=0; i < 10; i++) {
    5114:	2300      	movs	r3, #0
    5116:	64fb      	str	r3, [r7, #76]	; 0x4c
    5118:	e00b      	b.n	5132 <vendor_request_handler+0x85a>
			afh_map[i] = data[i];
    511a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    511c:	687a      	ldr	r2, [r7, #4]
    511e:	4413      	add	r3, r2
    5120:	7819      	ldrb	r1, [r3, #0]
    5122:	4a31      	ldr	r2, [pc, #196]	; (51e8 <vendor_request_handler+0x910>)
    5124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5126:	4413      	add	r3, r2
    5128:	460a      	mov	r2, r1
    512a:	701a      	strb	r2, [r3, #0]
		clkn = clock;
		cs_threshold_calc_and_set();
		break;

	case UBERTOOTH_SET_AFHMAP:
		for(i=0; i < 10; i++) {
    512c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    512e:	3301      	adds	r3, #1
    5130:	64fb      	str	r3, [r7, #76]	; 0x4c
    5132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5134:	2b09      	cmp	r3, #9
    5136:	ddf0      	ble.n	511a <vendor_request_handler+0x842>
			afh_map[i] = data[i];
		}
		afh_enabled = 1;
    5138:	4b2c      	ldr	r3, [pc, #176]	; (51ec <vendor_request_handler+0x914>)
    513a:	2201      	movs	r2, #1
    513c:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
    513e:	683b      	ldr	r3, [r7, #0]
    5140:	220a      	movs	r2, #10
    5142:	601a      	str	r2, [r3, #0]
		break;
    5144:	e12b      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_CLEAR_AFHMAP:
		for(i=0; i < 10; i++) {
    5146:	2300      	movs	r3, #0
    5148:	64fb      	str	r3, [r7, #76]	; 0x4c
    514a:	e007      	b.n	515c <vendor_request_handler+0x884>
			afh_map[i] = 0;
    514c:	4a26      	ldr	r2, [pc, #152]	; (51e8 <vendor_request_handler+0x910>)
    514e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5150:	4413      	add	r3, r2
    5152:	2200      	movs	r2, #0
    5154:	701a      	strb	r2, [r3, #0]
		afh_enabled = 1;
		*data_len = 10;
		break;

	case UBERTOOTH_CLEAR_AFHMAP:
		for(i=0; i < 10; i++) {
    5156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5158:	3301      	adds	r3, #1
    515a:	64fb      	str	r3, [r7, #76]	; 0x4c
    515c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    515e:	2b09      	cmp	r3, #9
    5160:	ddf4      	ble.n	514c <vendor_request_handler+0x874>
			afh_map[i] = 0;
		}
		afh_enabled = 0;
    5162:	4b22      	ldr	r3, [pc, #136]	; (51ec <vendor_request_handler+0x914>)
    5164:	2200      	movs	r2, #0
    5166:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
    5168:	683b      	ldr	r3, [r7, #0]
    516a:	220a      	movs	r2, #10
    516c:	601a      	str	r2, [r3, #0]
		break;
    516e:	e116      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
    5170:	4b1a      	ldr	r3, [pc, #104]	; (51dc <vendor_request_handler+0x904>)
    5172:	681b      	ldr	r3, [r3, #0]
    5174:	63fb      	str	r3, [r7, #60]	; 0x3c
		for(i=0; i < 4; i++) {
    5176:	2300      	movs	r3, #0
    5178:	64fb      	str	r3, [r7, #76]	; 0x4c
    517a:	e00c      	b.n	5196 <vendor_request_handler+0x8be>
			data[i] = (clock >> (8*i)) & 0xff;
    517c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    517e:	687a      	ldr	r2, [r7, #4]
    5180:	4413      	add	r3, r2
    5182:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    5184:	00d2      	lsls	r2, r2, #3
    5186:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    5188:	fa21 f202 	lsr.w	r2, r1, r2
    518c:	b2d2      	uxtb	r2, r2
    518e:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
		break;

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
		for(i=0; i < 4; i++) {
    5190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5192:	3301      	adds	r3, #1
    5194:	64fb      	str	r3, [r7, #76]	; 0x4c
    5196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5198:	2b03      	cmp	r3, #3
    519a:	ddef      	ble.n	517c <vendor_request_handler+0x8a4>
			data[i] = (clock >> (8*i)) & 0xff;
		}
		*data_len = 4;
    519c:	683b      	ldr	r3, [r7, #0]
    519e:	2204      	movs	r2, #4
    51a0:	601a      	str	r2, [r3, #0]
		break;
    51a2:	e0fc      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_BTLE_SNIFFING:
		*data_len = 0;
    51a4:	683b      	ldr	r3, [r7, #0]
    51a6:	2200      	movs	r2, #0
    51a8:	601a      	str	r2, [r3, #0]

		do_hop = 0;
    51aa:	4b11      	ldr	r3, [pc, #68]	; (51f0 <vendor_request_handler+0x918>)
    51ac:	2200      	movs	r2, #0
    51ae:	701a      	strb	r2, [r3, #0]
		hop_mode = HOP_BTLE;
    51b0:	4b0b      	ldr	r3, [pc, #44]	; (51e0 <vendor_request_handler+0x908>)
    51b2:	2203      	movs	r2, #3
    51b4:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_FOLLOW_LE;
    51b6:	4b0b      	ldr	r3, [pc, #44]	; (51e4 <vendor_request_handler+0x90c>)
    51b8:	2209      	movs	r2, #9
    51ba:	701a      	strb	r2, [r3, #0]

		queue_init();
    51bc:	f003 fb5a 	bl	8874 <queue_init>
		cs_threshold_calc_and_set();
    51c0:	f7ff fb14 	bl	47ec <cs_threshold_calc_and_set>
		break;
    51c4:	e0eb      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(i=0; i < 4; i++) {
    51c6:	2300      	movs	r3, #0
    51c8:	64fb      	str	r3, [r7, #76]	; 0x4c
    51ca:	e021      	b.n	5210 <vendor_request_handler+0x938>
    51cc:	0000bb48 	.word	0x0000bb48
    51d0:	0000bb08 	.word	0x0000bb08
    51d4:	1000044c 	.word	0x1000044c
    51d8:	100010b8 	.word	0x100010b8
    51dc:	10000be4 	.word	0x10000be4
    51e0:	1000097c 	.word	0x1000097c
    51e4:	10000a3f 	.word	0x10000a3f
    51e8:	10000bbc 	.word	0x10000bbc
    51ec:	10001024 	.word	0x10001024
    51f0:	1000097d 	.word	0x1000097d
			data[i] = (le.access_address >> (8*i)) & 0xff;
    51f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    51f6:	687a      	ldr	r2, [r7, #4]
    51f8:	4413      	add	r3, r2
    51fa:	4a6c      	ldr	r2, [pc, #432]	; (53ac <vendor_request_handler+0xad4>)
    51fc:	6811      	ldr	r1, [r2, #0]
    51fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    5200:	00d2      	lsls	r2, r2, #3
    5202:	fa21 f202 	lsr.w	r2, r1, r2
    5206:	b2d2      	uxtb	r2, r2
    5208:	701a      	strb	r2, [r3, #0]
		queue_init();
		cs_threshold_calc_and_set();
		break;

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(i=0; i < 4; i++) {
    520a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    520c:	3301      	adds	r3, #1
    520e:	64fb      	str	r3, [r7, #76]	; 0x4c
    5210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5212:	2b03      	cmp	r3, #3
    5214:	ddee      	ble.n	51f4 <vendor_request_handler+0x91c>
			data[i] = (le.access_address >> (8*i)) & 0xff;
		}
		*data_len = 4;
    5216:	683b      	ldr	r3, [r7, #0]
    5218:	2204      	movs	r2, #4
    521a:	601a      	str	r2, [r3, #0]
		break;
    521c:	e0bf      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_ACCESS_ADDRESS:
		le_set_access_address(data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24);
    521e:	687b      	ldr	r3, [r7, #4]
    5220:	781b      	ldrb	r3, [r3, #0]
    5222:	461a      	mov	r2, r3
    5224:	687b      	ldr	r3, [r7, #4]
    5226:	3301      	adds	r3, #1
    5228:	781b      	ldrb	r3, [r3, #0]
    522a:	021b      	lsls	r3, r3, #8
    522c:	431a      	orrs	r2, r3
    522e:	687b      	ldr	r3, [r7, #4]
    5230:	3302      	adds	r3, #2
    5232:	781b      	ldrb	r3, [r3, #0]
    5234:	041b      	lsls	r3, r3, #16
    5236:	431a      	orrs	r2, r3
    5238:	687b      	ldr	r3, [r7, #4]
    523a:	3303      	adds	r3, #3
    523c:	781b      	ldrb	r3, [r3, #0]
    523e:	061b      	lsls	r3, r3, #24
    5240:	4313      	orrs	r3, r2
    5242:	4618      	mov	r0, r3
    5244:	f001 f8f8 	bl	6438 <le_set_access_address>
		le.target_set = 1;
    5248:	4b58      	ldr	r3, [pc, #352]	; (53ac <vendor_request_handler+0xad4>)
    524a:	2201      	movs	r2, #1
    524c:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
    524e:	e0a6      	b.n	539e <vendor_request_handler+0xac6>
		break;

	case UBERTOOTH_DO_SOMETHING_REPLY:
		// after you do something, tell me what you did!
		// don't commit here please
		data[0] = 0x13;
    5250:	687b      	ldr	r3, [r7, #4]
    5252:	2213      	movs	r2, #19
    5254:	701a      	strb	r2, [r3, #0]
		data[1] = 0x37;
    5256:	687b      	ldr	r3, [r7, #4]
    5258:	3301      	adds	r3, #1
    525a:	2237      	movs	r2, #55	; 0x37
    525c:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    525e:	683b      	ldr	r3, [r7, #0]
    5260:	2202      	movs	r2, #2
    5262:	601a      	str	r2, [r3, #0]
		break;
    5264:	e09b      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_CRC_VERIFY:
		data[0] = le.crc_verify ? 1 : 0;
    5266:	4b51      	ldr	r3, [pc, #324]	; (53ac <vendor_request_handler+0xad4>)
    5268:	691b      	ldr	r3, [r3, #16]
    526a:	2b00      	cmp	r3, #0
    526c:	bf14      	ite	ne
    526e:	2301      	movne	r3, #1
    5270:	2300      	moveq	r3, #0
    5272:	b2db      	uxtb	r3, r3
    5274:	461a      	mov	r2, r3
    5276:	687b      	ldr	r3, [r7, #4]
    5278:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    527a:	683b      	ldr	r3, [r7, #0]
    527c:	2201      	movs	r2, #1
    527e:	601a      	str	r2, [r3, #0]
		break;
    5280:	e08d      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_CRC_VERIFY:
		le.crc_verify = request_params[0] ? 1 : 0;
    5282:	68bb      	ldr	r3, [r7, #8]
    5284:	881b      	ldrh	r3, [r3, #0]
    5286:	2b00      	cmp	r3, #0
    5288:	bf14      	ite	ne
    528a:	2301      	movne	r3, #1
    528c:	2300      	moveq	r3, #0
    528e:	b2db      	uxtb	r3, r3
    5290:	461a      	mov	r2, r3
    5292:	4b46      	ldr	r3, [pc, #280]	; (53ac <vendor_request_handler+0xad4>)
    5294:	611a      	str	r2, [r3, #16]
		break;
    5296:	e082      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_POLL:
		p = dequeue();
    5298:	f003 fb2c 	bl	88f4 <dequeue>
    529c:	6478      	str	r0, [r7, #68]	; 0x44
		if (p != NULL) {
    529e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    52a0:	2b00      	cmp	r3, #0
    52a2:	d008      	beq.n	52b6 <vendor_request_handler+0x9de>
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
    52a4:	6878      	ldr	r0, [r7, #4]
    52a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
    52a8:	2240      	movs	r2, #64	; 0x40
    52aa:	f005 ff47 	bl	b13c <memcpy>
			*data_len = sizeof(usb_pkt_rx);
    52ae:	683b      	ldr	r3, [r7, #0]
    52b0:	2240      	movs	r2, #64	; 0x40
    52b2:	601a      	str	r2, [r3, #0]
		} else {
			data[0] = 0;
			*data_len = 1;
		}
		break;
    52b4:	e073      	b.n	539e <vendor_request_handler+0xac6>
		p = dequeue();
		if (p != NULL) {
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
			*data_len = sizeof(usb_pkt_rx);
		} else {
			data[0] = 0;
    52b6:	687b      	ldr	r3, [r7, #4]
    52b8:	2200      	movs	r2, #0
    52ba:	701a      	strb	r2, [r3, #0]
			*data_len = 1;
    52bc:	683b      	ldr	r3, [r7, #0]
    52be:	2201      	movs	r2, #1
    52c0:	601a      	str	r2, [r3, #0]
		}
		break;
    52c2:	e06c      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_BTLE_PROMISC:
		*data_len = 0;
    52c4:	683b      	ldr	r3, [r7, #0]
    52c6:	2200      	movs	r2, #0
    52c8:	601a      	str	r2, [r3, #0]

		hop_mode = HOP_NONE;
    52ca:	4b39      	ldr	r3, [pc, #228]	; (53b0 <vendor_request_handler+0xad8>)
    52cc:	2200      	movs	r2, #0
    52ce:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_PROMISC_LE;
    52d0:	4b38      	ldr	r3, [pc, #224]	; (53b4 <vendor_request_handler+0xadc>)
    52d2:	220a      	movs	r2, #10
    52d4:	701a      	strb	r2, [r3, #0]

		queue_init();
    52d6:	f003 facd 	bl	8874 <queue_init>
		cs_threshold_calc_and_set();
    52da:	f7ff fa87 	bl	47ec <cs_threshold_calc_and_set>
		break;
    52de:	e05e      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_READ_REGISTER:
		reg_val = cc2400_get(request_params[0]);
    52e0:	68bb      	ldr	r3, [r7, #8]
    52e2:	881b      	ldrh	r3, [r3, #0]
    52e4:	b2db      	uxtb	r3, r3
    52e6:	4618      	mov	r0, r3
    52e8:	f004 fd28 	bl	9d3c <cc2400_get>
    52ec:	4603      	mov	r3, r0
    52ee:	877b      	strh	r3, [r7, #58]	; 0x3a
		data[0] = (reg_val >> 8) & 0xff;
    52f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    52f2:	0a1b      	lsrs	r3, r3, #8
    52f4:	b29b      	uxth	r3, r3
    52f6:	b2da      	uxtb	r2, r3
    52f8:	687b      	ldr	r3, [r7, #4]
    52fa:	701a      	strb	r2, [r3, #0]
		data[1] = reg_val & 0xff;
    52fc:	687b      	ldr	r3, [r7, #4]
    52fe:	3301      	adds	r3, #1
    5300:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
    5302:	b2d2      	uxtb	r2, r2
    5304:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    5306:	683b      	ldr	r3, [r7, #0]
    5308:	2202      	movs	r2, #2
    530a:	601a      	str	r2, [r3, #0]
		break;
    530c:	e047      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
    530e:	68bb      	ldr	r3, [r7, #8]
    5310:	881b      	ldrh	r3, [r3, #0]
    5312:	b2da      	uxtb	r2, r3
    5314:	68bb      	ldr	r3, [r7, #8]
    5316:	3302      	adds	r3, #2
    5318:	881b      	ldrh	r3, [r3, #0]
    531a:	4610      	mov	r0, r2
    531c:	4619      	mov	r1, r3
    531e:	f004 fd23 	bl	9d68 <cc2400_set>
		break;
    5322:	e03c      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_BTLE_SLAVE:
		memcpy(slave_mac_address, data, 6);
    5324:	4824      	ldr	r0, [pc, #144]	; (53b8 <vendor_request_handler+0xae0>)
    5326:	6879      	ldr	r1, [r7, #4]
    5328:	2206      	movs	r2, #6
    532a:	f005 ff07 	bl	b13c <memcpy>
		requested_mode = MODE_BT_SLAVE_LE;
    532e:	4b21      	ldr	r3, [pc, #132]	; (53b4 <vendor_request_handler+0xadc>)
    5330:	220c      	movs	r2, #12
    5332:	701a      	strb	r2, [r3, #0]
		break;
    5334:	e033      	b.n	539e <vendor_request_handler+0xac6>

	case UBERTOOTH_BTLE_SET_TARGET:
		// Addresses appear in packets in reverse-octet order.
		// Store the target address in reverse order so that we can do a simple memcmp later
		le.target[0] = data[5];
    5336:	687b      	ldr	r3, [r7, #4]
    5338:	795a      	ldrb	r2, [r3, #5]
    533a:	4b1c      	ldr	r3, [pc, #112]	; (53ac <vendor_request_handler+0xad4>)
    533c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		le.target[1] = data[4];
    5340:	687b      	ldr	r3, [r7, #4]
    5342:	791a      	ldrb	r2, [r3, #4]
    5344:	4b19      	ldr	r3, [pc, #100]	; (53ac <vendor_request_handler+0xad4>)
    5346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		le.target[2] = data[3];
    534a:	687b      	ldr	r3, [r7, #4]
    534c:	78da      	ldrb	r2, [r3, #3]
    534e:	4b17      	ldr	r3, [pc, #92]	; (53ac <vendor_request_handler+0xad4>)
    5350:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		le.target[3] = data[2];
    5354:	687b      	ldr	r3, [r7, #4]
    5356:	789a      	ldrb	r2, [r3, #2]
    5358:	4b14      	ldr	r3, [pc, #80]	; (53ac <vendor_request_handler+0xad4>)
    535a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		le.target[4] = data[1];
    535e:	687b      	ldr	r3, [r7, #4]
    5360:	785a      	ldrb	r2, [r3, #1]
    5362:	4b12      	ldr	r3, [pc, #72]	; (53ac <vendor_request_handler+0xad4>)
    5364:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		le.target[5] = data[0];
    5368:	687b      	ldr	r3, [r7, #4]
    536a:	781a      	ldrb	r2, [r3, #0]
    536c:	4b0f      	ldr	r3, [pc, #60]	; (53ac <vendor_request_handler+0xad4>)
    536e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		le.target_set = 1;
    5372:	4b0e      	ldr	r3, [pc, #56]	; (53ac <vendor_request_handler+0xad4>)
    5374:	2201      	movs	r2, #1
    5376:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
    5378:	e011      	b.n	539e <vendor_request_handler+0xac6>

#ifdef TX_ENABLE
	case UBERTOOTH_JAM_MODE:
		jam_mode = request_params[0];
    537a:	68bb      	ldr	r3, [r7, #8]
    537c:	881b      	ldrh	r3, [r3, #0]
    537e:	b2da      	uxtb	r2, r3
    5380:	4b0e      	ldr	r3, [pc, #56]	; (53bc <vendor_request_handler+0xae4>)
    5382:	701a      	strb	r2, [r3, #0]
		break;
    5384:	e00b      	b.n	539e <vendor_request_handler+0xac6>
	case UBERTOOTH_EGO:
#ifndef TX_ENABLE
		if (ego_mode == EGO_JAM)
			return 0;
#endif
		requested_mode = MODE_EGO;
    5386:	4b0b      	ldr	r3, [pc, #44]	; (53b4 <vendor_request_handler+0xadc>)
    5388:	220d      	movs	r2, #13
    538a:	701a      	strb	r2, [r3, #0]
		ego_mode = request_params[0];
    538c:	68bb      	ldr	r3, [r7, #8]
    538e:	881b      	ldrh	r3, [r3, #0]
    5390:	b2da      	uxtb	r2, r3
    5392:	4b0b      	ldr	r3, [pc, #44]	; (53c0 <vendor_request_handler+0xae8>)
    5394:	701a      	strb	r2, [r3, #0]
		break;
    5396:	e002      	b.n	539e <vendor_request_handler+0xac6>

	default:
		return 0;
    5398:	2300      	movs	r3, #0
    539a:	e001      	b.n	53a0 <vendor_request_handler+0xac8>
		le.target_set = 1;
		break;

	case UBERTOOTH_DO_SOMETHING:
		// do something! just don't commit anything here
		break;
    539c:	bf00      	nop
		break;

	default:
		return 0;
	}
	return 1;
    539e:	2301      	movs	r3, #1
}
    53a0:	4618      	mov	r0, r3
    53a2:	3754      	adds	r7, #84	; 0x54
    53a4:	46bd      	mov	sp, r7
    53a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53aa:	bf00      	nop
    53ac:	10000458 	.word	0x10000458
    53b0:	1000097c 	.word	0x1000097c
    53b4:	10000a3f 	.word	0x10000a3f
    53b8:	1000098c 	.word	0x1000098c
    53bc:	10000a40 	.word	0x10000a40
    53c0:	10000a41 	.word	0x10000a41

000053c4 <clkn_init>:

static void clkn_init()
{
    53c4:	b480      	push	{r7}
    53c6:	af00      	add	r7, sp, #0
	 * and in timer mode.  The TIMER0 peripheral clock should have been set by
	 * clock_start().
	 */

	/* stop and reset the timer to zero */
	T0TCR = TCR_Counter_Reset;
    53c8:	4b0c      	ldr	r3, [pc, #48]	; (53fc <clkn_init+0x38>)
    53ca:	2202      	movs	r2, #2
    53cc:	601a      	str	r2, [r3, #0]
	clkn = 0;
    53ce:	4b0c      	ldr	r3, [pc, #48]	; (5400 <clkn_init+0x3c>)
    53d0:	2200      	movs	r2, #0
    53d2:	601a      	str	r2, [r3, #0]
#else
	/*
	 * The peripheral clock has a period of 20ns.  5 pclk periods
	 * makes one CLK100NS period (100 ns).
	 */
	T0PR = 4;
    53d4:	4b0b      	ldr	r3, [pc, #44]	; (5404 <clkn_init+0x40>)
    53d6:	2204      	movs	r2, #4
    53d8:	601a      	str	r2, [r3, #0]
#endif
	/* 3125 * 100 ns = 312.5 us, the Bluetooth clock (CLKN). */
	T0MR0 = 3124;
    53da:	4b0b      	ldr	r3, [pc, #44]	; (5408 <clkn_init+0x44>)
    53dc:	f640 4234 	movw	r2, #3124	; 0xc34
    53e0:	601a      	str	r2, [r3, #0]
	T0MCR = TMCR_MR0R | TMCR_MR0I;
    53e2:	4b0a      	ldr	r3, [pc, #40]	; (540c <clkn_init+0x48>)
    53e4:	2203      	movs	r2, #3
    53e6:	601a      	str	r2, [r3, #0]
	ISER0 = ISER0_ISE_TIMER0;
    53e8:	4b09      	ldr	r3, [pc, #36]	; (5410 <clkn_init+0x4c>)
    53ea:	2202      	movs	r2, #2
    53ec:	601a      	str	r2, [r3, #0]

	/* start timer */
	T0TCR = TCR_Counter_Enable;
    53ee:	4b03      	ldr	r3, [pc, #12]	; (53fc <clkn_init+0x38>)
    53f0:	2201      	movs	r2, #1
    53f2:	601a      	str	r2, [r3, #0]
}
    53f4:	46bd      	mov	sp, r7
    53f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    53fa:	4770      	bx	lr
    53fc:	40004004 	.word	0x40004004
    5400:	10000be4 	.word	0x10000be4
    5404:	4000400c 	.word	0x4000400c
    5408:	40004018 	.word	0x40004018
    540c:	40004014 	.word	0x40004014
    5410:	e000e100 	.word	0xe000e100

00005414 <TIMER0_IRQHandler>:

/* Update CLKN. */
void TIMER0_IRQHandler()
{
    5414:	b480      	push	{r7}
    5416:	b083      	sub	sp, #12
    5418:	af00      	add	r7, sp, #0
	// Use non-volatile working register to shave off a couple instructions
	u32 next;
	u32 le_clk;

	if (T0IR & TIR_MR0_Interrupt) {
    541a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    541e:	681b      	ldr	r3, [r3, #0]
    5420:	f003 0301 	and.w	r3, r3, #1
    5424:	2b00      	cmp	r3, #0
    5426:	d06d      	beq.n	5504 <TIMER0_IRQHandler+0xf0>

		clkn++;
    5428:	4b39      	ldr	r3, [pc, #228]	; (5510 <TIMER0_IRQHandler+0xfc>)
    542a:	681b      	ldr	r3, [r3, #0]
    542c:	3301      	adds	r3, #1
    542e:	4a38      	ldr	r2, [pc, #224]	; (5510 <TIMER0_IRQHandler+0xfc>)
    5430:	6013      	str	r3, [r2, #0]
		next = clkn;
    5432:	4b37      	ldr	r3, [pc, #220]	; (5510 <TIMER0_IRQHandler+0xfc>)
    5434:	681b      	ldr	r3, [r3, #0]
    5436:	607b      	str	r3, [r7, #4]
		le_clk = (next - le.conn_epoch) & 0x03;
    5438:	4b36      	ldr	r3, [pc, #216]	; (5514 <TIMER0_IRQHandler+0x100>)
    543a:	699b      	ldr	r3, [r3, #24]
    543c:	687a      	ldr	r2, [r7, #4]
    543e:	1ad3      	subs	r3, r2, r3
    5440:	f003 0303 	and.w	r3, r3, #3
    5444:	603b      	str	r3, [r7, #0]

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    5446:	4b34      	ldr	r3, [pc, #208]	; (5518 <TIMER0_IRQHandler+0x104>)
    5448:	781b      	ldrb	r3, [r3, #0]
    544a:	2b00      	cmp	r3, #0
    544c:	d003      	beq.n	5456 <TIMER0_IRQHandler+0x42>
    544e:	4b32      	ldr	r3, [pc, #200]	; (5518 <TIMER0_IRQHandler+0x104>)
    5450:	781b      	ldrb	r3, [r3, #0]
    5452:	2b01      	cmp	r3, #1
    5454:	d109      	bne.n	546a <TIMER0_IRQHandler+0x56>
			if ((next & 0x7f) == 0)
    5456:	687b      	ldr	r3, [r7, #4]
    5458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    545c:	2b00      	cmp	r3, #0
    545e:	d103      	bne.n	5468 <TIMER0_IRQHandler+0x54>
				do_hop = 1;
    5460:	4b2e      	ldr	r3, [pc, #184]	; (551c <TIMER0_IRQHandler+0x108>)
    5462:	2201      	movs	r2, #1
    5464:	701a      	strb	r2, [r3, #0]

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
			if ((next & 0x7f) == 0)
    5466:	e037      	b.n	54d8 <TIMER0_IRQHandler+0xc4>
    5468:	e036      	b.n	54d8 <TIMER0_IRQHandler+0xc4>
				do_hop = 1;
		}
		/* BLUETOOTH -> 1600 Hz */
		else if (hop_mode == HOP_BLUETOOTH) {
    546a:	4b2b      	ldr	r3, [pc, #172]	; (5518 <TIMER0_IRQHandler+0x104>)
    546c:	781b      	ldrb	r3, [r3, #0]
    546e:	2b02      	cmp	r3, #2
    5470:	d108      	bne.n	5484 <TIMER0_IRQHandler+0x70>
			if ((next & 0x1) == 0)
    5472:	687b      	ldr	r3, [r7, #4]
    5474:	f003 0301 	and.w	r3, r3, #1
    5478:	2b00      	cmp	r3, #0
    547a:	d12d      	bne.n	54d8 <TIMER0_IRQHandler+0xc4>
				do_hop = 1;
    547c:	4b27      	ldr	r3, [pc, #156]	; (551c <TIMER0_IRQHandler+0x108>)
    547e:	2201      	movs	r2, #1
    5480:	701a      	strb	r2, [r3, #0]
    5482:	e029      	b.n	54d8 <TIMER0_IRQHandler+0xc4>
		}
		/* BLUETOOTH Low Energy -> 7.5ms - 4.0s in multiples of 1.25 ms */
		else if (hop_mode == HOP_BTLE) {
    5484:	4b24      	ldr	r3, [pc, #144]	; (5518 <TIMER0_IRQHandler+0x104>)
    5486:	781b      	ldrb	r3, [r3, #0]
    5488:	2b03      	cmp	r3, #3
    548a:	d125      	bne.n	54d8 <TIMER0_IRQHandler+0xc4>
			// Only hop if connected
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    548c:	4b21      	ldr	r3, [pc, #132]	; (5514 <TIMER0_IRQHandler+0x100>)
    548e:	7d1b      	ldrb	r3, [r3, #20]
    5490:	2b03      	cmp	r3, #3
    5492:	d121      	bne.n	54d8 <TIMER0_IRQHandler+0xc4>
    5494:	683b      	ldr	r3, [r7, #0]
    5496:	2b00      	cmp	r3, #0
    5498:	d11e      	bne.n	54d8 <TIMER0_IRQHandler+0xc4>
				--le.interval_timer;
    549a:	4b1e      	ldr	r3, [pc, #120]	; (5514 <TIMER0_IRQHandler+0x100>)
    549c:	8b9b      	ldrh	r3, [r3, #28]
    549e:	b29b      	uxth	r3, r3
    54a0:	3b01      	subs	r3, #1
    54a2:	b29a      	uxth	r2, r3
    54a4:	4b1b      	ldr	r3, [pc, #108]	; (5514 <TIMER0_IRQHandler+0x100>)
    54a6:	839a      	strh	r2, [r3, #28]
				if (le.interval_timer == 0) {
    54a8:	4b1a      	ldr	r3, [pc, #104]	; (5514 <TIMER0_IRQHandler+0x100>)
    54aa:	8b9b      	ldrh	r3, [r3, #28]
    54ac:	b29b      	uxth	r3, r3
    54ae:	2b00      	cmp	r3, #0
    54b0:	d10e      	bne.n	54d0 <TIMER0_IRQHandler+0xbc>
					do_hop = 1;
    54b2:	4b1a      	ldr	r3, [pc, #104]	; (551c <TIMER0_IRQHandler+0x108>)
    54b4:	2201      	movs	r2, #1
    54b6:	701a      	strb	r2, [r3, #0]
					++le.conn_count;
    54b8:	4b16      	ldr	r3, [pc, #88]	; (5514 <TIMER0_IRQHandler+0x100>)
    54ba:	8c1b      	ldrh	r3, [r3, #32]
    54bc:	b29b      	uxth	r3, r3
    54be:	3301      	adds	r3, #1
    54c0:	b29a      	uxth	r2, r3
    54c2:	4b14      	ldr	r3, [pc, #80]	; (5514 <TIMER0_IRQHandler+0x100>)
    54c4:	841a      	strh	r2, [r3, #32]
					le.interval_timer = le.conn_interval;
    54c6:	4b13      	ldr	r3, [pc, #76]	; (5514 <TIMER0_IRQHandler+0x100>)
    54c8:	8bda      	ldrh	r2, [r3, #30]
    54ca:	4b12      	ldr	r3, [pc, #72]	; (5514 <TIMER0_IRQHandler+0x100>)
    54cc:	839a      	strh	r2, [r3, #28]
    54ce:	e003      	b.n	54d8 <TIMER0_IRQHandler+0xc4>
				} else {
					TXLED_CLR; // hack!
    54d0:	4b13      	ldr	r3, [pc, #76]	; (5520 <TIMER0_IRQHandler+0x10c>)
    54d2:	f44f 7280 	mov.w	r2, #256	; 0x100
    54d6:	601a      	str	r2, [r3, #0]
				}
			}
		}

		/* Keepalive trigger fires at 3200/2^9 = 6.25 Hz */
		if ((next & 0x1ff) == 0)
    54d8:	687b      	ldr	r3, [r7, #4]
    54da:	f3c3 0308 	ubfx	r3, r3, #0, #9
    54de:	2b00      	cmp	r3, #0
    54e0:	d102      	bne.n	54e8 <TIMER0_IRQHandler+0xd4>
			keepalive_trigger = 1;
    54e2:	4b10      	ldr	r3, [pc, #64]	; (5524 <TIMER0_IRQHandler+0x110>)
    54e4:	2201      	movs	r2, #1
    54e6:	701a      	strb	r2, [r3, #0]

		/* Ack interrupt */
		T0MR0 = 3124 - clock_trim;
    54e8:	4a0f      	ldr	r2, [pc, #60]	; (5528 <TIMER0_IRQHandler+0x114>)
    54ea:	4b10      	ldr	r3, [pc, #64]	; (552c <TIMER0_IRQHandler+0x118>)
    54ec:	681b      	ldr	r3, [r3, #0]
    54ee:	f5c3 6343 	rsb	r3, r3, #3120	; 0xc30
    54f2:	3304      	adds	r3, #4
    54f4:	6013      	str	r3, [r2, #0]
		clock_trim = 0;
    54f6:	4b0d      	ldr	r3, [pc, #52]	; (552c <TIMER0_IRQHandler+0x118>)
    54f8:	2200      	movs	r2, #0
    54fa:	601a      	str	r2, [r3, #0]
		T0IR = TIR_MR0_Interrupt;
    54fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    5500:	2201      	movs	r2, #1
    5502:	601a      	str	r2, [r3, #0]
	}
}
    5504:	370c      	adds	r7, #12
    5506:	46bd      	mov	sp, r7
    5508:	f85d 7b04 	ldr.w	r7, [sp], #4
    550c:	4770      	bx	lr
    550e:	bf00      	nop
    5510:	10000be4 	.word	0x10000be4
    5514:	10000458 	.word	0x10000458
    5518:	1000097c 	.word	0x1000097c
    551c:	1000097d 	.word	0x1000097d
    5520:	2009c03c 	.word	0x2009c03c
    5524:	10000be0 	.word	0x10000be0
    5528:	40004018 	.word	0x40004018
    552c:	10000984 	.word	0x10000984

00005530 <EINT3_IRQHandler>:

/* EINT3 handler is also defined in ubertooth.c for TC13BADGE. */
#ifndef TC13BADGE
//static volatile u8 txledstate = 1;
void EINT3_IRQHandler()
{
    5530:	b480      	push	{r7}
    5532:	af00      	add	r7, sp, #0
	/* TODO - check specific source of shared interrupt */
	IO2IntClr = PIN_GIO6;            // clear interrupt
    5534:	4b0b      	ldr	r3, [pc, #44]	; (5564 <EINT3_IRQHandler+0x34>)
    5536:	2204      	movs	r2, #4
    5538:	601a      	str	r2, [r3, #0]
	cs_trigger = 1;                  // signal trigger
    553a:	4b0b      	ldr	r3, [pc, #44]	; (5568 <EINT3_IRQHandler+0x38>)
    553c:	2201      	movs	r2, #1
    553e:	701a      	strb	r2, [r3, #0]
	cs_timestamp = CLK100NS;         // time at trigger
    5540:	4b0a      	ldr	r3, [pc, #40]	; (556c <EINT3_IRQHandler+0x3c>)
    5542:	681b      	ldr	r3, [r3, #0]
    5544:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5548:	f640 4235 	movw	r2, #3125	; 0xc35
    554c:	fb02 f203 	mul.w	r2, r2, r3
    5550:	4b07      	ldr	r3, [pc, #28]	; (5570 <EINT3_IRQHandler+0x40>)
    5552:	681b      	ldr	r3, [r3, #0]
    5554:	4413      	add	r3, r2
    5556:	4a07      	ldr	r2, [pc, #28]	; (5574 <EINT3_IRQHandler+0x44>)
    5558:	6013      	str	r3, [r2, #0]
}
    555a:	46bd      	mov	sp, r7
    555c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5560:	4770      	bx	lr
    5562:	bf00      	nop
    5564:	400280ac 	.word	0x400280ac
    5568:	100010b0 	.word	0x100010b0
    556c:	10000be4 	.word	0x10000be4
    5570:	40004008 	.word	0x40004008
    5574:	10000bdc 	.word	0x10000bdc

00005578 <msleep>:

/* Sleep (busy wait) for 'millis' milliseconds. The 'wait' routines in
 * ubertooth.c are matched to the clock setup at boot time and can not
 * be used while the board is running at 100MHz. */
static void msleep(uint32_t millis)
{
    5578:	b480      	push	{r7}
    557a:	b085      	sub	sp, #20
    557c:	af00      	add	r7, sp, #0
    557e:	6078      	str	r0, [r7, #4]
	uint32_t stop_at = clkn + millis * 3125 / 1000;  // millis -> clkn ticks
    5580:	687b      	ldr	r3, [r7, #4]
    5582:	f640 4235 	movw	r2, #3125	; 0xc35
    5586:	fb02 f303 	mul.w	r3, r2, r3
    558a:	4a09      	ldr	r2, [pc, #36]	; (55b0 <msleep+0x38>)
    558c:	fba2 2303 	umull	r2, r3, r2, r3
    5590:	099a      	lsrs	r2, r3, #6
    5592:	4b08      	ldr	r3, [pc, #32]	; (55b4 <msleep+0x3c>)
    5594:	681b      	ldr	r3, [r3, #0]
    5596:	4413      	add	r3, r2
    5598:	60fb      	str	r3, [r7, #12]
	do { } while (clkn < stop_at);                   // TODO: handle wrapping
    559a:	4b06      	ldr	r3, [pc, #24]	; (55b4 <msleep+0x3c>)
    559c:	681a      	ldr	r2, [r3, #0]
    559e:	68fb      	ldr	r3, [r7, #12]
    55a0:	429a      	cmp	r2, r3
    55a2:	d3fa      	bcc.n	559a <msleep+0x22>
}
    55a4:	3714      	adds	r7, #20
    55a6:	46bd      	mov	sp, r7
    55a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    55ac:	4770      	bx	lr
    55ae:	bf00      	nop
    55b0:	10624dd3 	.word	0x10624dd3
    55b4:	10000be4 	.word	0x10000be4

000055b8 <dma_init>:

static void dma_init()
{
    55b8:	b480      	push	{r7}
    55ba:	af00      	add	r7, sp, #0
	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    55bc:	4a3f      	ldr	r2, [pc, #252]	; (56bc <dma_init+0x104>)
    55be:	4b3f      	ldr	r3, [pc, #252]	; (56bc <dma_init+0x104>)
    55c0:	681b      	ldr	r3, [r3, #0]
    55c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    55c6:	6013      	str	r3, [r2, #0]

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
    55c8:	4b3d      	ldr	r3, [pc, #244]	; (56c0 <dma_init+0x108>)
    55ca:	2200      	movs	r2, #0
    55cc:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    55ce:	4b3d      	ldr	r3, [pc, #244]	; (56c4 <dma_init+0x10c>)
    55d0:	2200      	movs	r2, #0
    55d2:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    55d4:	4b3c      	ldr	r3, [pc, #240]	; (56c8 <dma_init+0x110>)
    55d6:	2200      	movs	r2, #0
    55d8:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    55da:	4b3c      	ldr	r3, [pc, #240]	; (56cc <dma_init+0x114>)
    55dc:	2200      	movs	r2, #0
    55de:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    55e0:	4b3b      	ldr	r3, [pc, #236]	; (56d0 <dma_init+0x118>)
    55e2:	2200      	movs	r2, #0
    55e4:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    55e6:	4b3b      	ldr	r3, [pc, #236]	; (56d4 <dma_init+0x11c>)
    55e8:	2200      	movs	r2, #0
    55ea:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    55ec:	4b3a      	ldr	r3, [pc, #232]	; (56d8 <dma_init+0x120>)
    55ee:	2200      	movs	r2, #0
    55f0:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    55f2:	4b3a      	ldr	r3, [pc, #232]	; (56dc <dma_init+0x124>)
    55f4:	2200      	movs	r2, #0
    55f6:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    55f8:	4b39      	ldr	r3, [pc, #228]	; (56e0 <dma_init+0x128>)
    55fa:	22ff      	movs	r2, #255	; 0xff
    55fc:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    55fe:	4b39      	ldr	r3, [pc, #228]	; (56e4 <dma_init+0x12c>)
    5600:	22ff      	movs	r2, #255	; 0xff
    5602:	601a      	str	r2, [r3, #0]

	/* DMA linked lists */
	rx_dma_lli1.src = (u32)&(DIO_SSP_DR);
    5604:	4b38      	ldr	r3, [pc, #224]	; (56e8 <dma_init+0x130>)
    5606:	4a39      	ldr	r2, [pc, #228]	; (56ec <dma_init+0x134>)
    5608:	601a      	str	r2, [r3, #0]
	rx_dma_lli1.dest = (u32)&rxbuf1[0];
    560a:	4a39      	ldr	r2, [pc, #228]	; (56f0 <dma_init+0x138>)
    560c:	4b36      	ldr	r3, [pc, #216]	; (56e8 <dma_init+0x130>)
    560e:	605a      	str	r2, [r3, #4]
	rx_dma_lli1.next_lli = (u32)&rx_dma_lli2;
    5610:	4a38      	ldr	r2, [pc, #224]	; (56f4 <dma_init+0x13c>)
    5612:	4b35      	ldr	r3, [pc, #212]	; (56e8 <dma_init+0x130>)
    5614:	609a      	str	r2, [r3, #8]
	rx_dma_lli1.control = (DMA_SIZE) |
    5616:	4b34      	ldr	r3, [pc, #208]	; (56e8 <dma_init+0x130>)
    5618:	4a37      	ldr	r2, [pc, #220]	; (56f8 <dma_init+0x140>)
    561a:	60da      	str	r2, [r3, #12]
			(0 << 18) |        /* source width 8 bits */
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (u32)&(DIO_SSP_DR);
    561c:	4b35      	ldr	r3, [pc, #212]	; (56f4 <dma_init+0x13c>)
    561e:	4a33      	ldr	r2, [pc, #204]	; (56ec <dma_init+0x134>)
    5620:	601a      	str	r2, [r3, #0]
	rx_dma_lli2.dest = (u32)&rxbuf2[0];
    5622:	4a36      	ldr	r2, [pc, #216]	; (56fc <dma_init+0x144>)
    5624:	4b33      	ldr	r3, [pc, #204]	; (56f4 <dma_init+0x13c>)
    5626:	605a      	str	r2, [r3, #4]
	rx_dma_lli2.next_lli = (u32)&rx_dma_lli1;
    5628:	4a2f      	ldr	r2, [pc, #188]	; (56e8 <dma_init+0x130>)
    562a:	4b32      	ldr	r3, [pc, #200]	; (56f4 <dma_init+0x13c>)
    562c:	609a      	str	r2, [r3, #8]
	rx_dma_lli2.control = (DMA_SIZE) |
    562e:	4b31      	ldr	r3, [pc, #196]	; (56f4 <dma_init+0x13c>)
    5630:	4a31      	ldr	r2, [pc, #196]	; (56f8 <dma_init+0x140>)
    5632:	60da      	str	r2, [r3, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* disable DMA interrupts */
	ICER0 = ICER0_ICE_DMA;
    5634:	4b32      	ldr	r3, [pc, #200]	; (5700 <dma_init+0x148>)
    5636:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    563a:	601a      	str	r2, [r3, #0]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    563c:	4b31      	ldr	r3, [pc, #196]	; (5704 <dma_init+0x14c>)
    563e:	2201      	movs	r2, #1
    5640:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    5642:	bf00      	nop
    5644:	4b2f      	ldr	r3, [pc, #188]	; (5704 <dma_init+0x14c>)
    5646:	681b      	ldr	r3, [r3, #0]
    5648:	f003 0301 	and.w	r3, r3, #1
    564c:	2b00      	cmp	r3, #0
    564e:	d0f9      	beq.n	5644 <dma_init+0x8c>

	/* configure DMA channel 1 */
	DMACC0SrcAddr = rx_dma_lli1.src;
    5650:	4a2d      	ldr	r2, [pc, #180]	; (5708 <dma_init+0x150>)
    5652:	4b25      	ldr	r3, [pc, #148]	; (56e8 <dma_init+0x130>)
    5654:	681b      	ldr	r3, [r3, #0]
    5656:	6013      	str	r3, [r2, #0]
	DMACC0DestAddr = rx_dma_lli1.dest;
    5658:	4a2c      	ldr	r2, [pc, #176]	; (570c <dma_init+0x154>)
    565a:	4b23      	ldr	r3, [pc, #140]	; (56e8 <dma_init+0x130>)
    565c:	685b      	ldr	r3, [r3, #4]
    565e:	6013      	str	r3, [r2, #0]
	DMACC0LLI = rx_dma_lli1.next_lli;
    5660:	4a2b      	ldr	r2, [pc, #172]	; (5710 <dma_init+0x158>)
    5662:	4b21      	ldr	r3, [pc, #132]	; (56e8 <dma_init+0x130>)
    5664:	689b      	ldr	r3, [r3, #8]
    5666:	6013      	str	r3, [r2, #0]
	DMACC0Control = rx_dma_lli1.control;
    5668:	4a2a      	ldr	r2, [pc, #168]	; (5714 <dma_init+0x15c>)
    566a:	4b1f      	ldr	r3, [pc, #124]	; (56e8 <dma_init+0x130>)
    566c:	68db      	ldr	r3, [r3, #12]
    566e:	6013      	str	r3, [r2, #0]
	DMACC0Config =
    5670:	4b13      	ldr	r3, [pc, #76]	; (56c0 <dma_init+0x108>)
    5672:	f24d 0206 	movw	r2, #53254	; 0xd006
    5676:	601a      	str	r2, [r3, #0]
			DIO_SSP_SRC |
			(0x2 << 11) |           /* peripheral to memory */
			DMACCxConfig_IE |       /* allow error interrupts */
			DMACCxConfig_ITC;       /* allow terminal count interrupts */

	active_buf_clkn_high = (clkn >> 20) & 0xff;
    5678:	4b27      	ldr	r3, [pc, #156]	; (5718 <dma_init+0x160>)
    567a:	681b      	ldr	r3, [r3, #0]
    567c:	0d1b      	lsrs	r3, r3, #20
    567e:	b2db      	uxtb	r3, r3
    5680:	4a26      	ldr	r2, [pc, #152]	; (571c <dma_init+0x164>)
    5682:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    5684:	4b24      	ldr	r3, [pc, #144]	; (5718 <dma_init+0x160>)
    5686:	681b      	ldr	r3, [r3, #0]
    5688:	f3c3 0313 	ubfx	r3, r3, #0, #20
    568c:	f640 4235 	movw	r2, #3125	; 0xc35
    5690:	fb02 f203 	mul.w	r2, r2, r3
    5694:	4b22      	ldr	r3, [pc, #136]	; (5720 <dma_init+0x168>)
    5696:	681b      	ldr	r3, [r3, #0]
    5698:	4413      	add	r3, r2
    569a:	4a22      	ldr	r2, [pc, #136]	; (5724 <dma_init+0x16c>)
    569c:	6013      	str	r3, [r2, #0]
	active_buf_channel = channel;
    569e:	4b22      	ldr	r3, [pc, #136]	; (5728 <dma_init+0x170>)
    56a0:	881b      	ldrh	r3, [r3, #0]
    56a2:	b29a      	uxth	r2, r3
    56a4:	4b21      	ldr	r3, [pc, #132]	; (572c <dma_init+0x174>)
    56a6:	801a      	strh	r2, [r3, #0]

	/* reset interrupt counters */
	rx_tc = 0;
    56a8:	4b21      	ldr	r3, [pc, #132]	; (5730 <dma_init+0x178>)
    56aa:	2200      	movs	r2, #0
    56ac:	601a      	str	r2, [r3, #0]
	rx_err = 0;
    56ae:	4b21      	ldr	r3, [pc, #132]	; (5734 <dma_init+0x17c>)
    56b0:	2200      	movs	r2, #0
    56b2:	601a      	str	r2, [r3, #0]
}
    56b4:	46bd      	mov	sp, r7
    56b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    56ba:	4770      	bx	lr
    56bc:	400fc0c4 	.word	0x400fc0c4
    56c0:	50004110 	.word	0x50004110
    56c4:	50004130 	.word	0x50004130
    56c8:	50004150 	.word	0x50004150
    56cc:	50004170 	.word	0x50004170
    56d0:	50004190 	.word	0x50004190
    56d4:	500041b0 	.word	0x500041b0
    56d8:	500041d0 	.word	0x500041d0
    56dc:	500041f0 	.word	0x500041f0
    56e0:	50004008 	.word	0x50004008
    56e4:	50004010 	.word	0x50004010
    56e8:	10001060 	.word	0x10001060
    56ec:	40030008 	.word	0x40030008
    56f0:	10001078 	.word	0x10001078
    56f4:	10000bcc 	.word	0x10000bcc
    56f8:	88009032 	.word	0x88009032
    56fc:	1000102c 	.word	0x1000102c
    5700:	e000e180 	.word	0xe000e180
    5704:	50004030 	.word	0x50004030
    5708:	50004100 	.word	0x50004100
    570c:	50004104 	.word	0x50004104
    5710:	50004108 	.word	0x50004108
    5714:	5000410c 	.word	0x5000410c
    5718:	10000be4 	.word	0x10000be4
    571c:	10000be8 	.word	0x10000be8
    5720:	40004008 	.word	0x40004008
    5724:	10001020 	.word	0x10001020
    5728:	1000049c 	.word	0x1000049c
    572c:	1000098a 	.word	0x1000098a
    5730:	10000b00 	.word	0x10000b00
    5734:	100010ac 	.word	0x100010ac

00005738 <dma_init_le>:

static void dma_init_le()
{
    5738:	b480      	push	{r7}
    573a:	b083      	sub	sp, #12
    573c:	af00      	add	r7, sp, #0
	int i;

	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    573e:	4a4b      	ldr	r2, [pc, #300]	; (586c <dma_init_le+0x134>)
    5740:	4b4a      	ldr	r3, [pc, #296]	; (586c <dma_init_le+0x134>)
    5742:	681b      	ldr	r3, [r3, #0]
    5744:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    5748:	6013      	str	r3, [r2, #0]

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
    574a:	4b49      	ldr	r3, [pc, #292]	; (5870 <dma_init_le+0x138>)
    574c:	2200      	movs	r2, #0
    574e:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    5750:	4b48      	ldr	r3, [pc, #288]	; (5874 <dma_init_le+0x13c>)
    5752:	2200      	movs	r2, #0
    5754:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    5756:	4b48      	ldr	r3, [pc, #288]	; (5878 <dma_init_le+0x140>)
    5758:	2200      	movs	r2, #0
    575a:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    575c:	4b47      	ldr	r3, [pc, #284]	; (587c <dma_init_le+0x144>)
    575e:	2200      	movs	r2, #0
    5760:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    5762:	4b47      	ldr	r3, [pc, #284]	; (5880 <dma_init_le+0x148>)
    5764:	2200      	movs	r2, #0
    5766:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    5768:	4b46      	ldr	r3, [pc, #280]	; (5884 <dma_init_le+0x14c>)
    576a:	2200      	movs	r2, #0
    576c:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    576e:	4b46      	ldr	r3, [pc, #280]	; (5888 <dma_init_le+0x150>)
    5770:	2200      	movs	r2, #0
    5772:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    5774:	4b45      	ldr	r3, [pc, #276]	; (588c <dma_init_le+0x154>)
    5776:	2200      	movs	r2, #0
    5778:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    577a:	4b45      	ldr	r3, [pc, #276]	; (5890 <dma_init_le+0x158>)
    577c:	22ff      	movs	r2, #255	; 0xff
    577e:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    5780:	4b44      	ldr	r3, [pc, #272]	; (5894 <dma_init_le+0x15c>)
    5782:	22ff      	movs	r2, #255	; 0xff
    5784:	601a      	str	r2, [r3, #0]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    5786:	4b44      	ldr	r3, [pc, #272]	; (5898 <dma_init_le+0x160>)
    5788:	2201      	movs	r2, #1
    578a:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    578c:	bf00      	nop
    578e:	4b42      	ldr	r3, [pc, #264]	; (5898 <dma_init_le+0x160>)
    5790:	681b      	ldr	r3, [r3, #0]
    5792:	f003 0301 	and.w	r3, r3, #1
    5796:	2b00      	cmp	r3, #0
    5798:	d0f9      	beq.n	578e <dma_init_le+0x56>

	for (i = 0; i < 11; ++i) {
    579a:	2300      	movs	r3, #0
    579c:	607b      	str	r3, [r7, #4]
    579e:	e02a      	b.n	57f6 <dma_init_le+0xbe>
		le_dma_lli[i].src = (u32)&(DIO_SSP_DR);
    57a0:	4a3e      	ldr	r2, [pc, #248]	; (589c <dma_init_le+0x164>)
    57a2:	687b      	ldr	r3, [r7, #4]
    57a4:	011b      	lsls	r3, r3, #4
    57a6:	4413      	add	r3, r2
    57a8:	4a3d      	ldr	r2, [pc, #244]	; (58a0 <dma_init_le+0x168>)
    57aa:	601a      	str	r2, [r3, #0]
		le_dma_lli[i].dest = (u32)&rxbuf1[4 * i];
    57ac:	687b      	ldr	r3, [r7, #4]
    57ae:	009b      	lsls	r3, r3, #2
    57b0:	4a3c      	ldr	r2, [pc, #240]	; (58a4 <dma_init_le+0x16c>)
    57b2:	4413      	add	r3, r2
    57b4:	4619      	mov	r1, r3
    57b6:	4a39      	ldr	r2, [pc, #228]	; (589c <dma_init_le+0x164>)
    57b8:	687b      	ldr	r3, [r7, #4]
    57ba:	011b      	lsls	r3, r3, #4
    57bc:	4413      	add	r3, r2
    57be:	6059      	str	r1, [r3, #4]
		le_dma_lli[i].next_lli = i < 10 ? (u32)&le_dma_lli[i+1] : 0;
    57c0:	687b      	ldr	r3, [r7, #4]
    57c2:	2b09      	cmp	r3, #9
    57c4:	dc06      	bgt.n	57d4 <dma_init_le+0x9c>
    57c6:	687b      	ldr	r3, [r7, #4]
    57c8:	3301      	adds	r3, #1
    57ca:	011b      	lsls	r3, r3, #4
    57cc:	4a33      	ldr	r2, [pc, #204]	; (589c <dma_init_le+0x164>)
    57ce:	4413      	add	r3, r2
    57d0:	461a      	mov	r2, r3
    57d2:	e000      	b.n	57d6 <dma_init_le+0x9e>
    57d4:	2200      	movs	r2, #0
    57d6:	4931      	ldr	r1, [pc, #196]	; (589c <dma_init_le+0x164>)
    57d8:	687b      	ldr	r3, [r7, #4]
    57da:	011b      	lsls	r3, r3, #4
    57dc:	440b      	add	r3, r1
    57de:	3308      	adds	r3, #8
    57e0:	601a      	str	r2, [r3, #0]
		le_dma_lli[i].control = 4 |
    57e2:	4a2e      	ldr	r2, [pc, #184]	; (589c <dma_init_le+0x164>)
    57e4:	687b      	ldr	r3, [r7, #4]
    57e6:	011b      	lsls	r3, r3, #4
    57e8:	4413      	add	r3, r2
    57ea:	3308      	adds	r3, #8
    57ec:	4a2e      	ldr	r2, [pc, #184]	; (58a8 <dma_init_le+0x170>)
    57ee:	605a      	str	r2, [r3, #4]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    57f0:	687b      	ldr	r3, [r7, #4]
    57f2:	3301      	adds	r3, #1
    57f4:	607b      	str	r3, [r7, #4]
    57f6:	687b      	ldr	r3, [r7, #4]
    57f8:	2b0a      	cmp	r3, #10
    57fa:	ddd1      	ble.n	57a0 <dma_init_le+0x68>
				DMACCxControl_DI | /* destination increment */
				DMACCxControl_I;   /* terminal count interrupt enable */
	}

	/* configure DMA channel 0 */
	DMACC0SrcAddr = le_dma_lli[0].src;
    57fc:	4a2b      	ldr	r2, [pc, #172]	; (58ac <dma_init_le+0x174>)
    57fe:	4b27      	ldr	r3, [pc, #156]	; (589c <dma_init_le+0x164>)
    5800:	681b      	ldr	r3, [r3, #0]
    5802:	6013      	str	r3, [r2, #0]
	DMACC0DestAddr = le_dma_lli[0].dest;
    5804:	4a2a      	ldr	r2, [pc, #168]	; (58b0 <dma_init_le+0x178>)
    5806:	4b25      	ldr	r3, [pc, #148]	; (589c <dma_init_le+0x164>)
    5808:	685b      	ldr	r3, [r3, #4]
    580a:	6013      	str	r3, [r2, #0]
	DMACC0LLI = le_dma_lli[0].next_lli;
    580c:	4a29      	ldr	r2, [pc, #164]	; (58b4 <dma_init_le+0x17c>)
    580e:	4b23      	ldr	r3, [pc, #140]	; (589c <dma_init_le+0x164>)
    5810:	689b      	ldr	r3, [r3, #8]
    5812:	6013      	str	r3, [r2, #0]
	DMACC0Control = le_dma_lli[0].control;
    5814:	4a28      	ldr	r2, [pc, #160]	; (58b8 <dma_init_le+0x180>)
    5816:	4b21      	ldr	r3, [pc, #132]	; (589c <dma_init_le+0x164>)
    5818:	68db      	ldr	r3, [r3, #12]
    581a:	6013      	str	r3, [r2, #0]
	DMACC0Config =
    581c:	4b14      	ldr	r3, [pc, #80]	; (5870 <dma_init_le+0x138>)
    581e:	f24d 0206 	movw	r2, #53254	; 0xd006
    5822:	601a      	str	r2, [r3, #0]
			DIO_SSP_SRC |
			(0x2 << 11) |           /* peripheral to memory */
			DMACCxConfig_IE |       /* allow error interrupts */
			DMACCxConfig_ITC;       /* allow terminal count interrupts */

	active_buf_clkn_high = (clkn >> 20) & 0xff;
    5824:	4b25      	ldr	r3, [pc, #148]	; (58bc <dma_init_le+0x184>)
    5826:	681b      	ldr	r3, [r3, #0]
    5828:	0d1b      	lsrs	r3, r3, #20
    582a:	b2db      	uxtb	r3, r3
    582c:	4a24      	ldr	r2, [pc, #144]	; (58c0 <dma_init_le+0x188>)
    582e:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    5830:	4b22      	ldr	r3, [pc, #136]	; (58bc <dma_init_le+0x184>)
    5832:	681b      	ldr	r3, [r3, #0]
    5834:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5838:	f640 4235 	movw	r2, #3125	; 0xc35
    583c:	fb02 f203 	mul.w	r2, r2, r3
    5840:	4b20      	ldr	r3, [pc, #128]	; (58c4 <dma_init_le+0x18c>)
    5842:	681b      	ldr	r3, [r3, #0]
    5844:	4413      	add	r3, r2
    5846:	4a20      	ldr	r2, [pc, #128]	; (58c8 <dma_init_le+0x190>)
    5848:	6013      	str	r3, [r2, #0]
	active_buf_channel = channel;
    584a:	4b20      	ldr	r3, [pc, #128]	; (58cc <dma_init_le+0x194>)
    584c:	881b      	ldrh	r3, [r3, #0]
    584e:	b29a      	uxth	r2, r3
    5850:	4b1f      	ldr	r3, [pc, #124]	; (58d0 <dma_init_le+0x198>)
    5852:	801a      	strh	r2, [r3, #0]

	/* reset interrupt counters */
	rx_tc = 0;
    5854:	4b1f      	ldr	r3, [pc, #124]	; (58d4 <dma_init_le+0x19c>)
    5856:	2200      	movs	r2, #0
    5858:	601a      	str	r2, [r3, #0]
	rx_err = 0;
    585a:	4b1f      	ldr	r3, [pc, #124]	; (58d8 <dma_init_le+0x1a0>)
    585c:	2200      	movs	r2, #0
    585e:	601a      	str	r2, [r3, #0]
}
    5860:	370c      	adds	r7, #12
    5862:	46bd      	mov	sp, r7
    5864:	f85d 7b04 	ldr.w	r7, [sp], #4
    5868:	4770      	bx	lr
    586a:	bf00      	nop
    586c:	400fc0c4 	.word	0x400fc0c4
    5870:	50004110 	.word	0x50004110
    5874:	50004130 	.word	0x50004130
    5878:	50004150 	.word	0x50004150
    587c:	50004170 	.word	0x50004170
    5880:	50004190 	.word	0x50004190
    5884:	500041b0 	.word	0x500041b0
    5888:	500041d0 	.word	0x500041d0
    588c:	500041f0 	.word	0x500041f0
    5890:	50004008 	.word	0x50004008
    5894:	50004010 	.word	0x50004010
    5898:	50004030 	.word	0x50004030
    589c:	10000b08 	.word	0x10000b08
    58a0:	40030008 	.word	0x40030008
    58a4:	10001078 	.word	0x10001078
    58a8:	88001004 	.word	0x88001004
    58ac:	50004100 	.word	0x50004100
    58b0:	50004104 	.word	0x50004104
    58b4:	50004108 	.word	0x50004108
    58b8:	5000410c 	.word	0x5000410c
    58bc:	10000be4 	.word	0x10000be4
    58c0:	10000be8 	.word	0x10000be8
    58c4:	40004008 	.word	0x40004008
    58c8:	10001020 	.word	0x10001020
    58cc:	1000049c 	.word	0x1000049c
    58d0:	1000098a 	.word	0x1000098a
    58d4:	10000b00 	.word	0x10000b00
    58d8:	100010ac 	.word	0x100010ac

000058dc <bt_stream_dma_handler>:

void bt_stream_dma_handler(void) {
    58dc:	b480      	push	{r7}
    58de:	af00      	add	r7, sp, #0
	idle_buf_clkn_high = active_buf_clkn_high;
    58e0:	4b25      	ldr	r3, [pc, #148]	; (5978 <bt_stream_dma_handler+0x9c>)
    58e2:	681b      	ldr	r3, [r3, #0]
    58e4:	4a25      	ldr	r2, [pc, #148]	; (597c <bt_stream_dma_handler+0xa0>)
    58e6:	6013      	str	r3, [r2, #0]
	active_buf_clkn_high = (clkn >> 20) & 0xff;
    58e8:	4b25      	ldr	r3, [pc, #148]	; (5980 <bt_stream_dma_handler+0xa4>)
    58ea:	681b      	ldr	r3, [r3, #0]
    58ec:	0d1b      	lsrs	r3, r3, #20
    58ee:	b2db      	uxtb	r3, r3
    58f0:	4a21      	ldr	r2, [pc, #132]	; (5978 <bt_stream_dma_handler+0x9c>)
    58f2:	6013      	str	r3, [r2, #0]

	idle_buf_clk100ns = active_buf_clk100ns;
    58f4:	4b23      	ldr	r3, [pc, #140]	; (5984 <bt_stream_dma_handler+0xa8>)
    58f6:	681b      	ldr	r3, [r3, #0]
    58f8:	4a23      	ldr	r2, [pc, #140]	; (5988 <bt_stream_dma_handler+0xac>)
    58fa:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    58fc:	4b20      	ldr	r3, [pc, #128]	; (5980 <bt_stream_dma_handler+0xa4>)
    58fe:	681b      	ldr	r3, [r3, #0]
    5900:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5904:	f640 4235 	movw	r2, #3125	; 0xc35
    5908:	fb02 f203 	mul.w	r2, r2, r3
    590c:	4b1f      	ldr	r3, [pc, #124]	; (598c <bt_stream_dma_handler+0xb0>)
    590e:	681b      	ldr	r3, [r3, #0]
    5910:	4413      	add	r3, r2
    5912:	4a1c      	ldr	r2, [pc, #112]	; (5984 <bt_stream_dma_handler+0xa8>)
    5914:	6013      	str	r3, [r2, #0]

	idle_buf_channel = active_buf_channel;
    5916:	4b1e      	ldr	r3, [pc, #120]	; (5990 <bt_stream_dma_handler+0xb4>)
    5918:	881b      	ldrh	r3, [r3, #0]
    591a:	b29a      	uxth	r2, r3
    591c:	4b1d      	ldr	r3, [pc, #116]	; (5994 <bt_stream_dma_handler+0xb8>)
    591e:	801a      	strh	r2, [r3, #0]
	active_buf_channel = channel;
    5920:	4b1d      	ldr	r3, [pc, #116]	; (5998 <bt_stream_dma_handler+0xbc>)
    5922:	881b      	ldrh	r3, [r3, #0]
    5924:	b29a      	uxth	r2, r3
    5926:	4b1a      	ldr	r3, [pc, #104]	; (5990 <bt_stream_dma_handler+0xb4>)
    5928:	801a      	strh	r2, [r3, #0]

	/* interrupt on channel 0 */
	if (DMACIntStat & (1 << 0)) {
    592a:	4b1c      	ldr	r3, [pc, #112]	; (599c <bt_stream_dma_handler+0xc0>)
    592c:	681b      	ldr	r3, [r3, #0]
    592e:	f003 0301 	and.w	r3, r3, #1
    5932:	2b00      	cmp	r3, #0
    5934:	d01b      	beq.n	596e <bt_stream_dma_handler+0x92>
		if (DMACIntTCStat & (1 << 0)) {
    5936:	4b1a      	ldr	r3, [pc, #104]	; (59a0 <bt_stream_dma_handler+0xc4>)
    5938:	681b      	ldr	r3, [r3, #0]
    593a:	f003 0301 	and.w	r3, r3, #1
    593e:	2b00      	cmp	r3, #0
    5940:	d007      	beq.n	5952 <bt_stream_dma_handler+0x76>
			DMACIntTCClear = (1 << 0);
    5942:	4b18      	ldr	r3, [pc, #96]	; (59a4 <bt_stream_dma_handler+0xc8>)
    5944:	2201      	movs	r2, #1
    5946:	601a      	str	r2, [r3, #0]
			++rx_tc;
    5948:	4b17      	ldr	r3, [pc, #92]	; (59a8 <bt_stream_dma_handler+0xcc>)
    594a:	681b      	ldr	r3, [r3, #0]
    594c:	3301      	adds	r3, #1
    594e:	4a16      	ldr	r2, [pc, #88]	; (59a8 <bt_stream_dma_handler+0xcc>)
    5950:	6013      	str	r3, [r2, #0]
		}
		if (DMACIntErrStat & (1 << 0)) {
    5952:	4b16      	ldr	r3, [pc, #88]	; (59ac <bt_stream_dma_handler+0xd0>)
    5954:	681b      	ldr	r3, [r3, #0]
    5956:	f003 0301 	and.w	r3, r3, #1
    595a:	2b00      	cmp	r3, #0
    595c:	d007      	beq.n	596e <bt_stream_dma_handler+0x92>
			DMACIntErrClr = (1 << 0);
    595e:	4b14      	ldr	r3, [pc, #80]	; (59b0 <bt_stream_dma_handler+0xd4>)
    5960:	2201      	movs	r2, #1
    5962:	601a      	str	r2, [r3, #0]
			++rx_err;
    5964:	4b13      	ldr	r3, [pc, #76]	; (59b4 <bt_stream_dma_handler+0xd8>)
    5966:	681b      	ldr	r3, [r3, #0]
    5968:	3301      	adds	r3, #1
    596a:	4a12      	ldr	r2, [pc, #72]	; (59b4 <bt_stream_dma_handler+0xd8>)
    596c:	6013      	str	r3, [r2, #0]
		}
	}
}
    596e:	46bd      	mov	sp, r7
    5970:	f85d 7b04 	ldr.w	r7, [sp], #4
    5974:	4770      	bx	lr
    5976:	bf00      	nop
    5978:	10000be8 	.word	0x10000be8
    597c:	10001028 	.word	0x10001028
    5980:	10000be4 	.word	0x10000be4
    5984:	10001020 	.word	0x10001020
    5988:	10000bc8 	.word	0x10000bc8
    598c:	40004008 	.word	0x40004008
    5990:	1000098a 	.word	0x1000098a
    5994:	10000988 	.word	0x10000988
    5998:	1000049c 	.word	0x1000049c
    599c:	50004000 	.word	0x50004000
    59a0:	50004004 	.word	0x50004004
    59a4:	50004008 	.word	0x50004008
    59a8:	10000b00 	.word	0x10000b00
    59ac:	5000400c 	.word	0x5000400c
    59b0:	50004010 	.word	0x50004010
    59b4:	100010ac 	.word	0x100010ac

000059b8 <DMA_IRQHandler>:

void DMA_IRQHandler()
{
    59b8:	b580      	push	{r7, lr}
    59ba:	af00      	add	r7, sp, #0
	switch (mode) {
    59bc:	4b12      	ldr	r3, [pc, #72]	; (5a08 <DMA_IRQHandler+0x50>)
    59be:	781b      	ldrb	r3, [r3, #0]
    59c0:	b2db      	uxtb	r3, r3
    59c2:	3b01      	subs	r3, #1
    59c4:	2b0b      	cmp	r3, #11
    59c6:	d81e      	bhi.n	5a06 <DMA_IRQHandler+0x4e>
    59c8:	a201      	add	r2, pc, #4	; (adr r2, 59d0 <DMA_IRQHandler+0x18>)
    59ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    59ce:	bf00      	nop
    59d0:	00005a01 	.word	0x00005a01
    59d4:	00005a07 	.word	0x00005a07
    59d8:	00005a07 	.word	0x00005a07
    59dc:	00005a01 	.word	0x00005a01
    59e0:	00005a07 	.word	0x00005a07
    59e4:	00005a07 	.word	0x00005a07
    59e8:	00005a07 	.word	0x00005a07
    59ec:	00005a01 	.word	0x00005a01
    59f0:	00005a01 	.word	0x00005a01
    59f4:	00005a01 	.word	0x00005a01
    59f8:	00005a07 	.word	0x00005a07
    59fc:	00005a01 	.word	0x00005a01
		case MODE_SPECAN:
		case MODE_BT_FOLLOW:
		case MODE_BT_FOLLOW_LE:
		case MODE_BT_PROMISC_LE:
		case MODE_BT_SLAVE_LE:
			bt_stream_dma_handler();
    5a00:	f7ff ff6c 	bl	58dc <bt_stream_dma_handler>
			break;
    5a04:	bf00      	nop
	}
}
    5a06:	bd80      	pop	{r7, pc}
    5a08:	10000a3e 	.word	0x10000a3e

00005a0c <dio_ssp_start>:

static void dio_ssp_start()
{
    5a0c:	b480      	push	{r7}
    5a0e:	af00      	add	r7, sp, #0
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
    5a10:	4b10      	ldr	r3, [pc, #64]	; (5a54 <dio_ssp_start+0x48>)
    5a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5a16:	601a      	str	r2, [r3, #0]

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
    5a18:	4a0f      	ldr	r2, [pc, #60]	; (5a58 <dio_ssp_start+0x4c>)
    5a1a:	4b0f      	ldr	r3, [pc, #60]	; (5a58 <dio_ssp_start+0x4c>)
    5a1c:	681b      	ldr	r3, [r3, #0]
    5a1e:	f043 0301 	orr.w	r3, r3, #1
    5a22:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
    5a24:	4a0d      	ldr	r2, [pc, #52]	; (5a5c <dio_ssp_start+0x50>)
    5a26:	4b0d      	ldr	r3, [pc, #52]	; (5a5c <dio_ssp_start+0x50>)
    5a28:	681b      	ldr	r3, [r3, #0]
    5a2a:	f043 0302 	orr.w	r3, r3, #2
    5a2e:	6013      	str	r3, [r2, #0]
	
	/* enable DMA */
	DMACC0Config |= DMACCxConfig_E;
    5a30:	4a0b      	ldr	r2, [pc, #44]	; (5a60 <dio_ssp_start+0x54>)
    5a32:	4b0b      	ldr	r3, [pc, #44]	; (5a60 <dio_ssp_start+0x54>)
    5a34:	681b      	ldr	r3, [r3, #0]
    5a36:	f043 0301 	orr.w	r3, r3, #1
    5a3a:	6013      	str	r3, [r2, #0]
	ISER0 = ISER0_ISE_DMA;
    5a3c:	4b09      	ldr	r3, [pc, #36]	; (5a64 <dio_ssp_start+0x58>)
    5a3e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    5a42:	601a      	str	r2, [r3, #0]

	/* activate slave select pin */
	DIO_SSEL_CLR;
    5a44:	4b08      	ldr	r3, [pc, #32]	; (5a68 <dio_ssp_start+0x5c>)
    5a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5a4a:	601a      	str	r2, [r3, #0]
}
    5a4c:	46bd      	mov	sp, r7
    5a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a52:	4770      	bx	lr
    5a54:	2009c098 	.word	0x2009c098
    5a58:	40030024 	.word	0x40030024
    5a5c:	40030004 	.word	0x40030004
    5a60:	50004110 	.word	0x50004110
    5a64:	e000e100 	.word	0xe000e100
    5a68:	2009c09c 	.word	0x2009c09c

00005a6c <dio_ssp_stop>:

static void dio_ssp_stop()
{
    5a6c:	b480      	push	{r7}
    5a6e:	af00      	add	r7, sp, #0
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    5a70:	4b21      	ldr	r3, [pc, #132]	; (5af8 <dio_ssp_stop+0x8c>)
    5a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5a76:	601a      	str	r2, [r3, #0]

	// disable DMA on SSP; disable SSP
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5a78:	4a20      	ldr	r2, [pc, #128]	; (5afc <dio_ssp_stop+0x90>)
    5a7a:	4b20      	ldr	r3, [pc, #128]	; (5afc <dio_ssp_stop+0x90>)
    5a7c:	681b      	ldr	r3, [r3, #0]
    5a7e:	f023 0301 	bic.w	r3, r3, #1
    5a82:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    5a84:	4a1e      	ldr	r2, [pc, #120]	; (5b00 <dio_ssp_stop+0x94>)
    5a86:	4b1e      	ldr	r3, [pc, #120]	; (5b00 <dio_ssp_stop+0x94>)
    5a88:	681b      	ldr	r3, [r3, #0]
    5a8a:	f023 0302 	bic.w	r3, r3, #2
    5a8e:	6013      	str	r3, [r2, #0]

	// disable DMA engine:
	// refer to UM10360 LPC17xx User Manual Ch 31 Sec 31.6.1, PDF page 607

	// disable DMA interrupts
	ICER0 = ICER0_ICE_DMA;
    5a90:	4b1c      	ldr	r3, [pc, #112]	; (5b04 <dio_ssp_stop+0x98>)
    5a92:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    5a96:	601a      	str	r2, [r3, #0]

	// disable active channels
	DMACC0Config = 0;
    5a98:	4b1b      	ldr	r3, [pc, #108]	; (5b08 <dio_ssp_stop+0x9c>)
    5a9a:	2200      	movs	r2, #0
    5a9c:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    5a9e:	4b1b      	ldr	r3, [pc, #108]	; (5b0c <dio_ssp_stop+0xa0>)
    5aa0:	2200      	movs	r2, #0
    5aa2:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    5aa4:	4b1a      	ldr	r3, [pc, #104]	; (5b10 <dio_ssp_stop+0xa4>)
    5aa6:	2200      	movs	r2, #0
    5aa8:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    5aaa:	4b1a      	ldr	r3, [pc, #104]	; (5b14 <dio_ssp_stop+0xa8>)
    5aac:	2200      	movs	r2, #0
    5aae:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    5ab0:	4b19      	ldr	r3, [pc, #100]	; (5b18 <dio_ssp_stop+0xac>)
    5ab2:	2200      	movs	r2, #0
    5ab4:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    5ab6:	4b19      	ldr	r3, [pc, #100]	; (5b1c <dio_ssp_stop+0xb0>)
    5ab8:	2200      	movs	r2, #0
    5aba:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    5abc:	4b18      	ldr	r3, [pc, #96]	; (5b20 <dio_ssp_stop+0xb4>)
    5abe:	2200      	movs	r2, #0
    5ac0:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    5ac2:	4b18      	ldr	r3, [pc, #96]	; (5b24 <dio_ssp_stop+0xb8>)
    5ac4:	2200      	movs	r2, #0
    5ac6:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    5ac8:	4b17      	ldr	r3, [pc, #92]	; (5b28 <dio_ssp_stop+0xbc>)
    5aca:	22ff      	movs	r2, #255	; 0xff
    5acc:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    5ace:	4b17      	ldr	r3, [pc, #92]	; (5b2c <dio_ssp_stop+0xc0>)
    5ad0:	22ff      	movs	r2, #255	; 0xff
    5ad2:	601a      	str	r2, [r3, #0]

	// Disable the DMA controller by writing 0 to the DMA Enable bit in the DMACConfig
	// register.
	DMACConfig &= ~DMACConfig_E;
    5ad4:	4a16      	ldr	r2, [pc, #88]	; (5b30 <dio_ssp_stop+0xc4>)
    5ad6:	4b16      	ldr	r3, [pc, #88]	; (5b30 <dio_ssp_stop+0xc4>)
    5ad8:	681b      	ldr	r3, [r3, #0]
    5ada:	f023 0301 	bic.w	r3, r3, #1
    5ade:	6013      	str	r3, [r2, #0]
	while (DMACConfig & DMACConfig_E);
    5ae0:	bf00      	nop
    5ae2:	4b13      	ldr	r3, [pc, #76]	; (5b30 <dio_ssp_stop+0xc4>)
    5ae4:	681b      	ldr	r3, [r3, #0]
    5ae6:	f003 0301 	and.w	r3, r3, #1
    5aea:	2b00      	cmp	r3, #0
    5aec:	d1f9      	bne.n	5ae2 <dio_ssp_stop+0x76>
}
    5aee:	46bd      	mov	sp, r7
    5af0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5af4:	4770      	bx	lr
    5af6:	bf00      	nop
    5af8:	2009c098 	.word	0x2009c098
    5afc:	40030024 	.word	0x40030024
    5b00:	40030004 	.word	0x40030004
    5b04:	e000e180 	.word	0xe000e180
    5b08:	50004110 	.word	0x50004110
    5b0c:	50004130 	.word	0x50004130
    5b10:	50004150 	.word	0x50004150
    5b14:	50004170 	.word	0x50004170
    5b18:	50004190 	.word	0x50004190
    5b1c:	500041b0 	.word	0x500041b0
    5b20:	500041d0 	.word	0x500041d0
    5b24:	500041f0 	.word	0x500041f0
    5b28:	50004008 	.word	0x50004008
    5b2c:	50004010 	.word	0x50004010
    5b30:	50004030 	.word	0x50004030

00005b34 <cc2400_idle>:

static void cc2400_idle()
{
    5b34:	b580      	push	{r7, lr}
    5b36:	af00      	add	r7, sp, #0
	cc2400_strobe(SRFOFF);
    5b38:	2064      	movs	r0, #100	; 0x64
    5b3a:	f004 f9d7 	bl	9eec <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5b3e:	bf00      	nop
    5b40:	f004 f9ca 	bl	9ed8 <cc2400_status>
    5b44:	4603      	mov	r3, r0
    5b46:	f003 0304 	and.w	r3, r3, #4
    5b4a:	2b00      	cmp	r3, #0
    5b4c:	d1f8      	bne.n	5b40 <cc2400_idle+0xc>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    5b4e:	4b0a      	ldr	r3, [pc, #40]	; (5b78 <cc2400_idle+0x44>)
    5b50:	2280      	movs	r2, #128	; 0x80
    5b52:	601a      	str	r2, [r3, #0]
	HGM_CLR;
    5b54:	4b08      	ldr	r3, [pc, #32]	; (5b78 <cc2400_idle+0x44>)
    5b56:	f44f 7280 	mov.w	r2, #256	; 0x100
    5b5a:	601a      	str	r2, [r3, #0]
#endif

	RXLED_CLR;
    5b5c:	4b07      	ldr	r3, [pc, #28]	; (5b7c <cc2400_idle+0x48>)
    5b5e:	2210      	movs	r2, #16
    5b60:	601a      	str	r2, [r3, #0]
	TXLED_CLR;
    5b62:	4b06      	ldr	r3, [pc, #24]	; (5b7c <cc2400_idle+0x48>)
    5b64:	f44f 7280 	mov.w	r2, #256	; 0x100
    5b68:	601a      	str	r2, [r3, #0]
	USRLED_CLR;
    5b6a:	4b04      	ldr	r3, [pc, #16]	; (5b7c <cc2400_idle+0x48>)
    5b6c:	2202      	movs	r2, #2
    5b6e:	601a      	str	r2, [r3, #0]
	mode = MODE_IDLE;
    5b70:	4b03      	ldr	r3, [pc, #12]	; (5b80 <cc2400_idle+0x4c>)
    5b72:	2200      	movs	r2, #0
    5b74:	701a      	strb	r2, [r3, #0]
}
    5b76:	bd80      	pop	{r7, pc}
    5b78:	2009c05c 	.word	0x2009c05c
    5b7c:	2009c03c 	.word	0x2009c03c
    5b80:	10000a3e 	.word	0x10000a3e

00005b84 <cc2400_rx>:

/* start un-buffered rx */
static void cc2400_rx()
{
    5b84:	b580      	push	{r7, lr}
    5b86:	b082      	sub	sp, #8
    5b88:	af00      	add	r7, sp, #0
	u16 mdmctrl;
	if (modulation == MOD_BT_BASIC_RATE) {
    5b8a:	4b2a      	ldr	r3, [pc, #168]	; (5c34 <cc2400_rx+0xb0>)
    5b8c:	781b      	ldrb	r3, [r3, #0]
    5b8e:	b2db      	uxtb	r3, r3
    5b90:	2b00      	cmp	r3, #0
    5b92:	d102      	bne.n	5b9a <cc2400_rx+0x16>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    5b94:	2329      	movs	r3, #41	; 0x29
    5b96:	80fb      	strh	r3, [r7, #6]
    5b98:	e008      	b.n	5bac <cc2400_rx+0x28>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
    5b9a:	4b26      	ldr	r3, [pc, #152]	; (5c34 <cc2400_rx+0xb0>)
    5b9c:	781b      	ldrb	r3, [r3, #0]
    5b9e:	b2db      	uxtb	r3, r3
    5ba0:	2b01      	cmp	r3, #1
    5ba2:	d102      	bne.n	5baa <cc2400_rx+0x26>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    5ba4:	2340      	movs	r3, #64	; 0x40
    5ba6:	80fb      	strh	r3, [r7, #6]
    5ba8:	e000      	b.n	5bac <cc2400_rx+0x28>
	} else {
		/* oops */
		return;
    5baa:	e040      	b.n	5c2e <cc2400_rx+0xaa>
	}

	cc2400_set(MANAND,  0x7fff);
    5bac:	200d      	movs	r0, #13
    5bae:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5bb2:	f004 f8d9 	bl	9d68 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    5bb6:	2012      	movs	r0, #18
    5bb8:	f642 3122 	movw	r1, #11042	; 0x2b22
    5bbc:	f004 f8d4 	bl	9d68 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    5bc0:	2014      	movs	r0, #20
    5bc2:	f241 314b 	movw	r1, #4939	; 0x134b
    5bc6:	f004 f8cf 	bl	9d68 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    5bca:	2020      	movs	r0, #32
    5bcc:	f240 1101 	movw	r1, #257	; 0x101
    5bd0:	f004 f8ca 	bl	9d68 <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 2 preamble bytes of 01010101
	//      |  +-----------------> not packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    5bd4:	4b18      	ldr	r3, [pc, #96]	; (5c38 <cc2400_rx+0xb4>)
    5bd6:	881b      	ldrh	r3, [r3, #0]
    5bd8:	b29b      	uxth	r3, r3
    5bda:	3b01      	subs	r3, #1
    5bdc:	b29b      	uxth	r3, r3
    5bde:	2002      	movs	r0, #2
    5be0:	4619      	mov	r1, r3
    5be2:	f004 f8c1 	bl	9d68 <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    5be6:	88fb      	ldrh	r3, [r7, #6]
    5be8:	2003      	movs	r0, #3
    5bea:	4619      	mov	r1, r3
    5bec:	f004 f8bc 	bl	9d68 <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set();
    5bf0:	f7fe fdfc 	bl	47ec <cs_threshold_calc_and_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5bf4:	bf00      	nop
    5bf6:	f004 f96f 	bl	9ed8 <cc2400_status>
    5bfa:	4603      	mov	r3, r0
    5bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5c00:	2b00      	cmp	r3, #0
    5c02:	d0f8      	beq.n	5bf6 <cc2400_rx+0x72>
	cc2400_strobe(SFSON);
    5c04:	2061      	movs	r0, #97	; 0x61
    5c06:	f004 f971 	bl	9eec <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5c0a:	bf00      	nop
    5c0c:	f004 f964 	bl	9ed8 <cc2400_status>
    5c10:	4603      	mov	r3, r0
    5c12:	f003 0304 	and.w	r3, r3, #4
    5c16:	2b00      	cmp	r3, #0
    5c18:	d0f8      	beq.n	5c0c <cc2400_rx+0x88>
	cc2400_strobe(SRX);
    5c1a:	2062      	movs	r0, #98	; 0x62
    5c1c:	f004 f966 	bl	9eec <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5c20:	4b06      	ldr	r3, [pc, #24]	; (5c3c <cc2400_rx+0xb8>)
    5c22:	2280      	movs	r2, #128	; 0x80
    5c24:	601a      	str	r2, [r3, #0]
	HGM_SET;
    5c26:	4b05      	ldr	r3, [pc, #20]	; (5c3c <cc2400_rx+0xb8>)
    5c28:	f44f 7280 	mov.w	r2, #256	; 0x100
    5c2c:	601a      	str	r2, [r3, #0]
#endif
}
    5c2e:	3708      	adds	r7, #8
    5c30:	46bd      	mov	sp, r7
    5c32:	bd80      	pop	{r7, pc}
    5c34:	10000a42 	.word	0x10000a42
    5c38:	1000049c 	.word	0x1000049c
    5c3c:	2009c058 	.word	0x2009c058

00005c40 <cc2400_rx_sync>:

/* start un-buffered rx */
static void cc2400_rx_sync(u32 sync)
{
    5c40:	b580      	push	{r7, lr}
    5c42:	b084      	sub	sp, #16
    5c44:	af00      	add	r7, sp, #0
    5c46:	6078      	str	r0, [r7, #4]
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
    5c48:	4b33      	ldr	r3, [pc, #204]	; (5d18 <cc2400_rx_sync+0xd8>)
    5c4a:	781b      	ldrb	r3, [r3, #0]
    5c4c:	b2db      	uxtb	r3, r3
    5c4e:	2b00      	cmp	r3, #0
    5c50:	d105      	bne.n	5c5e <cc2400_rx_sync+0x1e>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    5c52:	2329      	movs	r3, #41	; 0x29
    5c54:	81bb      	strh	r3, [r7, #12]
		grmdm = 0x0461; // un-buffered mode, packet w/ sync word detection
    5c56:	f240 4361 	movw	r3, #1121	; 0x461
    5c5a:	81fb      	strh	r3, [r7, #14]
    5c5c:	e00b      	b.n	5c76 <cc2400_rx_sync+0x36>
		//   |  |  | +---------------> 0 preamble bytes of 01010101
		//   |  |  +-----------------> packet mode
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else if (modulation == MOD_BT_LOW_ENERGY) {
    5c5e:	4b2e      	ldr	r3, [pc, #184]	; (5d18 <cc2400_rx_sync+0xd8>)
    5c60:	781b      	ldrb	r3, [r3, #0]
    5c62:	b2db      	uxtb	r3, r3
    5c64:	2b01      	cmp	r3, #1
    5c66:	d105      	bne.n	5c74 <cc2400_rx_sync+0x34>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    5c68:	2340      	movs	r3, #64	; 0x40
    5c6a:	81bb      	strh	r3, [r7, #12]
		grmdm = 0x0561; // un-buffered mode, packet w/ sync word detection
    5c6c:	f240 5361 	movw	r3, #1377	; 0x561
    5c70:	81fb      	strh	r3, [r7, #14]
    5c72:	e000      	b.n	5c76 <cc2400_rx_sync+0x36>
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else {
		/* oops */
		return;
    5c74:	e04d      	b.n	5d12 <cc2400_rx_sync+0xd2>
	}

	cc2400_set(MANAND,  0x7fff);
    5c76:	200d      	movs	r0, #13
    5c78:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5c7c:	f004 f874 	bl	9d68 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    5c80:	2012      	movs	r0, #18
    5c82:	f642 3122 	movw	r1, #11042	; 0x2b22
    5c86:	f004 f86f 	bl	9d68 <cc2400_set>

	cc2400_set(MDMTST0, 0x124b);
    5c8a:	2014      	movs	r0, #20
    5c8c:	f241 214b 	movw	r1, #4683	; 0x124b
    5c90:	f004 f86a 	bl	9d68 <cc2400_set>
	//    +--------------------> PRNG off
	//
	// ref: CC2400 datasheet page 67
	// AFC settling explained page 41/42

	cc2400_set(GRMDM,   grmdm);
    5c94:	89fb      	ldrh	r3, [r7, #14]
    5c96:	2020      	movs	r0, #32
    5c98:	4619      	mov	r1, r3
    5c9a:	f004 f865 	bl	9d68 <cc2400_set>

	cc2400_set(SYNCL,   sync & 0xffff);
    5c9e:	687b      	ldr	r3, [r7, #4]
    5ca0:	b29b      	uxth	r3, r3
    5ca2:	202c      	movs	r0, #44	; 0x2c
    5ca4:	4619      	mov	r1, r3
    5ca6:	f004 f85f 	bl	9d68 <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    5caa:	687b      	ldr	r3, [r7, #4]
    5cac:	0c1b      	lsrs	r3, r3, #16
    5cae:	b29b      	uxth	r3, r3
    5cb0:	202d      	movs	r0, #45	; 0x2d
    5cb2:	4619      	mov	r1, r3
    5cb4:	f004 f858 	bl	9d68 <cc2400_set>
	
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    5cb8:	4b18      	ldr	r3, [pc, #96]	; (5d1c <cc2400_rx_sync+0xdc>)
    5cba:	881b      	ldrh	r3, [r3, #0]
    5cbc:	b29b      	uxth	r3, r3
    5cbe:	3b01      	subs	r3, #1
    5cc0:	b29b      	uxth	r3, r3
    5cc2:	2002      	movs	r0, #2
    5cc4:	4619      	mov	r1, r3
    5cc6:	f004 f84f 	bl	9d68 <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    5cca:	89bb      	ldrh	r3, [r7, #12]
    5ccc:	2003      	movs	r0, #3
    5cce:	4619      	mov	r1, r3
    5cd0:	f004 f84a 	bl	9d68 <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set();
    5cd4:	f7fe fd8a 	bl	47ec <cs_threshold_calc_and_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5cd8:	bf00      	nop
    5cda:	f004 f8fd 	bl	9ed8 <cc2400_status>
    5cde:	4603      	mov	r3, r0
    5ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5ce4:	2b00      	cmp	r3, #0
    5ce6:	d0f8      	beq.n	5cda <cc2400_rx_sync+0x9a>
	cc2400_strobe(SFSON);
    5ce8:	2061      	movs	r0, #97	; 0x61
    5cea:	f004 f8ff 	bl	9eec <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5cee:	bf00      	nop
    5cf0:	f004 f8f2 	bl	9ed8 <cc2400_status>
    5cf4:	4603      	mov	r3, r0
    5cf6:	f003 0304 	and.w	r3, r3, #4
    5cfa:	2b00      	cmp	r3, #0
    5cfc:	d0f8      	beq.n	5cf0 <cc2400_rx_sync+0xb0>
	cc2400_strobe(SRX);
    5cfe:	2062      	movs	r0, #98	; 0x62
    5d00:	f004 f8f4 	bl	9eec <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5d04:	4b06      	ldr	r3, [pc, #24]	; (5d20 <cc2400_rx_sync+0xe0>)
    5d06:	2280      	movs	r2, #128	; 0x80
    5d08:	601a      	str	r2, [r3, #0]
	HGM_SET;
    5d0a:	4b05      	ldr	r3, [pc, #20]	; (5d20 <cc2400_rx_sync+0xe0>)
    5d0c:	f44f 7280 	mov.w	r2, #256	; 0x100
    5d10:	601a      	str	r2, [r3, #0]
#endif
}
    5d12:	3710      	adds	r7, #16
    5d14:	46bd      	mov	sp, r7
    5d16:	bd80      	pop	{r7, pc}
    5d18:	10000a42 	.word	0x10000a42
    5d1c:	1000049c 	.word	0x1000049c
    5d20:	2009c058 	.word	0x2009c058

00005d24 <le_transmit>:
 * All modulation parameters are set within this function. The data
 * should not be pre-whitened, but the CRC should be calculated and
 * included in the data length.
 */
void le_transmit(u32 aa, u8 len, u8 *data)
{
    5d24:	b580      	push	{r7, lr}
    5d26:	b09a      	sub	sp, #104	; 0x68
    5d28:	af00      	add	r7, sp, #0
    5d2a:	60f8      	str	r0, [r7, #12]
    5d2c:	460b      	mov	r3, r1
    5d2e:	607a      	str	r2, [r7, #4]
    5d30:	72fb      	strb	r3, [r7, #11]
	u8 tx_len;
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    5d32:	2300      	movs	r3, #0
    5d34:	667b      	str	r3, [r7, #100]	; 0x64
    5d36:	e035      	b.n	5da4 <le_transmit+0x80>
		byte = aa & 0xff;
    5d38:	68fb      	ldr	r3, [r7, #12]
    5d3a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		aa >>= 8;
    5d3e:	68fb      	ldr	r3, [r7, #12]
    5d40:	0a1b      	lsrs	r3, r3, #8
    5d42:	60fb      	str	r3, [r7, #12]
		txbuf[i] = 0;
    5d44:	f107 0210 	add.w	r2, r7, #16
    5d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5d4a:	4413      	add	r3, r2
    5d4c:	2200      	movs	r2, #0
    5d4e:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 8; ++j) {
    5d50:	2300      	movs	r3, #0
    5d52:	663b      	str	r3, [r7, #96]	; 0x60
    5d54:	e020      	b.n	5d98 <le_transmit+0x74>
			txbuf[i] |= (byte & 1) << (7 - j);
    5d56:	f107 0210 	add.w	r2, r7, #16
    5d5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5d5c:	4413      	add	r3, r2
    5d5e:	781b      	ldrb	r3, [r3, #0]
    5d60:	b2d9      	uxtb	r1, r3
    5d62:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5d66:	f003 0301 	and.w	r3, r3, #1
    5d6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    5d6c:	f1c2 0207 	rsb	r2, r2, #7
    5d70:	4093      	lsls	r3, r2
    5d72:	b2db      	uxtb	r3, r3
    5d74:	460a      	mov	r2, r1
    5d76:	4313      	orrs	r3, r2
    5d78:	b2db      	uxtb	r3, r3
    5d7a:	b2d9      	uxtb	r1, r3
    5d7c:	f107 0210 	add.w	r2, r7, #16
    5d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5d82:	4413      	add	r3, r2
    5d84:	460a      	mov	r2, r1
    5d86:	701a      	strb	r2, [r3, #0]
			byte >>= 1;
    5d88:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5d8c:	085b      	lsrs	r3, r3, #1
    5d8e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
		for (j = 0; j < 8; ++j) {
    5d92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5d94:	3301      	adds	r3, #1
    5d96:	663b      	str	r3, [r7, #96]	; 0x60
    5d98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5d9a:	2b07      	cmp	r3, #7
    5d9c:	d9db      	bls.n	5d56 <le_transmit+0x32>
	u8 tx_len;
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    5d9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5da0:	3301      	adds	r3, #1
    5da2:	667b      	str	r3, [r7, #100]	; 0x64
    5da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5da6:	2b03      	cmp	r3, #3
    5da8:	d9c6      	bls.n	5d38 <le_transmit+0x14>
			byte >>= 1;
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
    5daa:	4b93      	ldr	r3, [pc, #588]	; (5ff8 <le_transmit+0x2d4>)
    5dac:	881b      	ldrh	r3, [r3, #0]
    5dae:	b29b      	uxth	r3, r3
    5db0:	b2db      	uxtb	r3, r3
    5db2:	3b62      	subs	r3, #98	; 0x62
    5db4:	b2db      	uxtb	r3, r3
    5db6:	4618      	mov	r0, r3
    5db8:	f002 fbdc 	bl	8574 <btle_channel_index>
    5dbc:	4603      	mov	r3, r0
    5dbe:	461a      	mov	r2, r3
    5dc0:	4b8e      	ldr	r3, [pc, #568]	; (5ffc <le_transmit+0x2d8>)
    5dc2:	5c9b      	ldrb	r3, [r3, r2]
    5dc4:	65bb      	str	r3, [r7, #88]	; 0x58
	for (i = 0; i < len; ++i) {
    5dc6:	2300      	movs	r3, #0
    5dc8:	667b      	str	r3, [r7, #100]	; 0x64
    5dca:	e050      	b.n	5e6e <le_transmit+0x14a>
		byte = data[i];
    5dcc:	687a      	ldr	r2, [r7, #4]
    5dce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5dd0:	4413      	add	r3, r2
    5dd2:	781b      	ldrb	r3, [r3, #0]
    5dd4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		txbuf[i+4] = 0;
    5dd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5dda:	3304      	adds	r3, #4
    5ddc:	f107 0268 	add.w	r2, r7, #104	; 0x68
    5de0:	4413      	add	r3, r2
    5de2:	2200      	movs	r2, #0
    5de4:	f803 2c58 	strb.w	r2, [r3, #-88]
		for (j = 0; j < 8; ++j) {
    5de8:	2300      	movs	r3, #0
    5dea:	663b      	str	r3, [r7, #96]	; 0x60
    5dec:	e039      	b.n	5e62 <le_transmit+0x13e>
			bit = (byte & 1) ^ whitening[idx];
    5dee:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5df2:	f003 0301 	and.w	r3, r3, #1
    5df6:	4982      	ldr	r1, [pc, #520]	; (6000 <le_transmit+0x2dc>)
    5df8:	6dba      	ldr	r2, [r7, #88]	; 0x58
    5dfa:	440a      	add	r2, r1
    5dfc:	7812      	ldrb	r2, [r2, #0]
    5dfe:	4053      	eors	r3, r2
    5e00:	657b      	str	r3, [r7, #84]	; 0x54
			idx = (idx + 1) % sizeof(whitening);
    5e02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5e04:	3301      	adds	r3, #1
    5e06:	4619      	mov	r1, r3
    5e08:	4b7e      	ldr	r3, [pc, #504]	; (6004 <le_transmit+0x2e0>)
    5e0a:	fba1 2303 	umull	r2, r3, r1, r3
    5e0e:	1ac8      	subs	r0, r1, r3
    5e10:	0840      	lsrs	r0, r0, #1
    5e12:	4403      	add	r3, r0
    5e14:	099a      	lsrs	r2, r3, #6
    5e16:	4613      	mov	r3, r2
    5e18:	01db      	lsls	r3, r3, #7
    5e1a:	1a9b      	subs	r3, r3, r2
    5e1c:	1aca      	subs	r2, r1, r3
    5e1e:	65ba      	str	r2, [r7, #88]	; 0x58
			byte >>= 1;
    5e20:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5e24:	085b      	lsrs	r3, r3, #1
    5e26:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			txbuf[i+4] |= bit << (7 - j);
    5e2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5e2c:	3304      	adds	r3, #4
    5e2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    5e30:	3204      	adds	r2, #4
    5e32:	f107 0168 	add.w	r1, r7, #104	; 0x68
    5e36:	440a      	add	r2, r1
    5e38:	f812 2c58 	ldrb.w	r2, [r2, #-88]
    5e3c:	b2d1      	uxtb	r1, r2
    5e3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    5e40:	f1c2 0207 	rsb	r2, r2, #7
    5e44:	4610      	mov	r0, r2
    5e46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5e48:	4082      	lsls	r2, r0
    5e4a:	b2d2      	uxtb	r2, r2
    5e4c:	430a      	orrs	r2, r1
    5e4e:	b2d2      	uxtb	r2, r2
    5e50:	b2d2      	uxtb	r2, r2
    5e52:	f107 0168 	add.w	r1, r7, #104	; 0x68
    5e56:	440b      	add	r3, r1
    5e58:	f803 2c58 	strb.w	r2, [r3, #-88]
	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
    5e5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5e5e:	3301      	adds	r3, #1
    5e60:	663b      	str	r3, [r7, #96]	; 0x60
    5e62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5e64:	2b07      	cmp	r3, #7
    5e66:	d9c2      	bls.n	5dee <le_transmit+0xca>
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
    5e68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5e6a:	3301      	adds	r3, #1
    5e6c:	667b      	str	r3, [r7, #100]	; 0x64
    5e6e:	7afa      	ldrb	r2, [r7, #11]
    5e70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5e72:	429a      	cmp	r2, r3
    5e74:	d8aa      	bhi.n	5dcc <le_transmit+0xa8>
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
		}
	}

	len += 4; // include the AA in len
    5e76:	7afb      	ldrb	r3, [r7, #11]
    5e78:	3304      	adds	r3, #4
    5e7a:	72fb      	strb	r3, [r7, #11]

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
    5e7c:	200d      	movs	r0, #13
    5e7e:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5e82:	f003 ff71 	bl	9d68 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    5e86:	2012      	movs	r0, #18
    5e88:	f642 3122 	movw	r1, #11042	; 0x2b22
    5e8c:	f003 ff6c 	bl	9d68 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    5e90:	2014      	movs	r0, #20
    5e92:	f241 314b 	movw	r1, #4939	; 0x134b
    5e96:	f003 ff67 	bl	9d68 <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    5e9a:	2020      	movs	r0, #32
    5e9c:	f640 4101 	movw	r1, #3073	; 0xc01
    5ea0:	f003 ff62 	bl	9d68 <cc2400_set>
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	cc2400_set(FSDIV,   channel);
    5ea4:	4b54      	ldr	r3, [pc, #336]	; (5ff8 <le_transmit+0x2d4>)
    5ea6:	881b      	ldrh	r3, [r3, #0]
    5ea8:	b29b      	uxth	r3, r3
    5eaa:	2002      	movs	r0, #2
    5eac:	4619      	mov	r1, r3
    5eae:	f003 ff5b 	bl	9d68 <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    5eb2:	2005      	movs	r0, #5
    5eb4:	210b      	movs	r1, #11
    5eb6:	f003 ff57 	bl	9d68 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    5eba:	2003      	movs	r0, #3
    5ebc:	2140      	movs	r1, #64	; 0x40
    5ebe:	f003 ff53 	bl	9d68 <cc2400_set>
	cc2400_set(INT,     0x0014);	// FIFO_THRESHOLD: 20 bytes
    5ec2:	2023      	movs	r0, #35	; 0x23
    5ec4:	2114      	movs	r1, #20
    5ec6:	f003 ff4f 	bl	9d68 <cc2400_set>

	// sync byte depends on the first transmitted bit of the AA
	if (aa & 1)
    5eca:	68fb      	ldr	r3, [r7, #12]
    5ecc:	f003 0301 	and.w	r3, r3, #1
    5ed0:	2b00      	cmp	r3, #0
    5ed2:	d005      	beq.n	5ee0 <le_transmit+0x1bc>
		cc2400_set(SYNCH,   0xaaaa);
    5ed4:	202d      	movs	r0, #45	; 0x2d
    5ed6:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
    5eda:	f003 ff45 	bl	9d68 <cc2400_set>
    5ede:	e004      	b.n	5eea <le_transmit+0x1c6>
	else
		cc2400_set(SYNCH,   0x5555);
    5ee0:	202d      	movs	r0, #45	; 0x2d
    5ee2:	f245 5155 	movw	r1, #21845	; 0x5555
    5ee6:	f003 ff3f 	bl	9d68 <cc2400_set>

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    5eea:	2008      	movs	r0, #8
    5eec:	f003 ff26 	bl	9d3c <cc2400_get>
    5ef0:	4603      	mov	r3, r0
    5ef2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    5ef6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
    5efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5efe:	b29b      	uxth	r3, r3
    5f00:	f443 439c 	orr.w	r3, r3, #19968	; 0x4e00
    5f04:	b29b      	uxth	r3, r3
    5f06:	b29b      	uxth	r3, r3
    5f08:	2008      	movs	r0, #8
    5f0a:	4619      	mov	r1, r3
    5f0c:	f003 ff2c 	bl	9d68 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5f10:	bf00      	nop
    5f12:	f003 ffe1 	bl	9ed8 <cc2400_status>
    5f16:	4603      	mov	r3, r0
    5f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5f1c:	2b00      	cmp	r3, #0
    5f1e:	d0f8      	beq.n	5f12 <le_transmit+0x1ee>
	cc2400_strobe(SFSON);
    5f20:	2061      	movs	r0, #97	; 0x61
    5f22:	f003 ffe3 	bl	9eec <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5f26:	bf00      	nop
    5f28:	f003 ffd6 	bl	9ed8 <cc2400_status>
    5f2c:	4603      	mov	r3, r0
    5f2e:	f003 0304 	and.w	r3, r3, #4
    5f32:	2b00      	cmp	r3, #0
    5f34:	d0f8      	beq.n	5f28 <le_transmit+0x204>
	TXLED_SET;
    5f36:	4b34      	ldr	r3, [pc, #208]	; (6008 <le_transmit+0x2e4>)
    5f38:	f44f 7280 	mov.w	r2, #256	; 0x100
    5f3c:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5f3e:	4b33      	ldr	r3, [pc, #204]	; (600c <le_transmit+0x2e8>)
    5f40:	2280      	movs	r2, #128	; 0x80
    5f42:	601a      	str	r2, [r3, #0]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5f44:	bf00      	nop
    5f46:	200e      	movs	r0, #14
    5f48:	f003 fef8 	bl	9d3c <cc2400_get>
    5f4c:	4603      	mov	r3, r0
    5f4e:	f003 031f 	and.w	r3, r3, #31
    5f52:	2b0f      	cmp	r3, #15
    5f54:	d1f7      	bne.n	5f46 <le_transmit+0x222>
	cc2400_strobe(STX);
    5f56:	2063      	movs	r0, #99	; 0x63
    5f58:	f003 ffc8 	bl	9eec <cc2400_strobe>

	// put the packet into the FIFO
	for (i = 0; i < len; i += 16) {
    5f5c:	2300      	movs	r3, #0
    5f5e:	667b      	str	r3, [r7, #100]	; 0x64
    5f60:	e021      	b.n	5fa6 <le_transmit+0x282>
		while (GIO6) ; // wait for the FIFO to drain (FIFO_FULL false)
    5f62:	bf00      	nop
    5f64:	4b2a      	ldr	r3, [pc, #168]	; (6010 <le_transmit+0x2ec>)
    5f66:	681b      	ldr	r3, [r3, #0]
    5f68:	f003 0304 	and.w	r3, r3, #4
    5f6c:	2b00      	cmp	r3, #0
    5f6e:	d1f9      	bne.n	5f64 <le_transmit+0x240>
		tx_len = len - i;
    5f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5f72:	b2db      	uxtb	r3, r3
    5f74:	7afa      	ldrb	r2, [r7, #11]
    5f76:	1ad3      	subs	r3, r2, r3
    5f78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (tx_len > 16)
    5f7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    5f80:	2b10      	cmp	r3, #16
    5f82:	d902      	bls.n	5f8a <le_transmit+0x266>
			tx_len = 16;
    5f84:	2310      	movs	r3, #16
    5f86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		cc2400_spi_buf(FIFOREG, tx_len, txbuf + i);
    5f8a:	f107 0210 	add.w	r2, r7, #16
    5f8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5f90:	4413      	add	r3, r2
    5f92:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
    5f96:	2070      	movs	r0, #112	; 0x70
    5f98:	4611      	mov	r1, r2
    5f9a:	461a      	mov	r2, r3
    5f9c:	f003 ff26 	bl	9dec <cc2400_spi_buf>
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
	cc2400_strobe(STX);

	// put the packet into the FIFO
	for (i = 0; i < len; i += 16) {
    5fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5fa2:	3310      	adds	r3, #16
    5fa4:	667b      	str	r3, [r7, #100]	; 0x64
    5fa6:	7afa      	ldrb	r2, [r7, #11]
    5fa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5faa:	429a      	cmp	r2, r3
    5fac:	d8d9      	bhi.n	5f62 <le_transmit+0x23e>
		if (tx_len > 16)
			tx_len = 16;
		cc2400_spi_buf(FIFOREG, tx_len, txbuf + i);
	}

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5fae:	bf00      	nop
    5fb0:	200e      	movs	r0, #14
    5fb2:	f003 fec3 	bl	9d3c <cc2400_get>
    5fb6:	4603      	mov	r3, r0
    5fb8:	f003 031f 	and.w	r3, r3, #31
    5fbc:	2b0f      	cmp	r3, #15
    5fbe:	d1f7      	bne.n	5fb0 <le_transmit+0x28c>
	TXLED_CLR;
    5fc0:	4b14      	ldr	r3, [pc, #80]	; (6014 <le_transmit+0x2f0>)
    5fc2:	f44f 7280 	mov.w	r2, #256	; 0x100
    5fc6:	601a      	str	r2, [r3, #0]

	cc2400_strobe(SRFOFF);
    5fc8:	2064      	movs	r0, #100	; 0x64
    5fca:	f003 ff8f 	bl	9eec <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    5fce:	bf00      	nop
    5fd0:	f003 ff82 	bl	9ed8 <cc2400_status>
    5fd4:	4603      	mov	r3, r0
    5fd6:	f003 0304 	and.w	r3, r3, #4
    5fda:	2b00      	cmp	r3, #0
    5fdc:	d1f8      	bne.n	5fd0 <le_transmit+0x2ac>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    5fde:	4b0e      	ldr	r3, [pc, #56]	; (6018 <le_transmit+0x2f4>)
    5fe0:	2280      	movs	r2, #128	; 0x80
    5fe2:	601a      	str	r2, [r3, #0]
#endif

	// reset GIO
	cc2400_set(IOCFG, gio_save);
    5fe4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
    5fe8:	2008      	movs	r0, #8
    5fea:	4619      	mov	r1, r3
    5fec:	f003 febc 	bl	9d68 <cc2400_set>
}
    5ff0:	3768      	adds	r7, #104	; 0x68
    5ff2:	46bd      	mov	sp, r7
    5ff4:	bd80      	pop	{r7, pc}
    5ff6:	bf00      	nop
    5ff8:	1000049c 	.word	0x1000049c
    5ffc:	0000b338 	.word	0x0000b338
    6000:	0000b2b8 	.word	0x0000b2b8
    6004:	02040811 	.word	0x02040811
    6008:	2009c038 	.word	0x2009c038
    600c:	2009c058 	.word	0x2009c058
    6010:	2009c054 	.word	0x2009c054
    6014:	2009c03c 	.word	0x2009c03c
    6018:	2009c05c 	.word	0x2009c05c

0000601c <le_jam>:

void le_jam(void) {
    601c:	b580      	push	{r7, lr}
    601e:	af00      	add	r7, sp, #0
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    6020:	200d      	movs	r0, #13
    6022:	f647 71ff 	movw	r1, #32767	; 0x7fff
    6026:	f003 fe9f 	bl	9d68 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    602a:	2012      	movs	r0, #18
    602c:	f642 3122 	movw	r1, #11042	; 0x2b22
    6030:	f003 fe9a 	bl	9d68 <cc2400_set>
	cc2400_set(MDMTST0, 0x234b);    // PRNG, 1 MHz offset
    6034:	2014      	movs	r0, #20
    6036:	f242 314b 	movw	r1, #9035	; 0x234b
    603a:	f003 fe95 	bl	9d68 <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    603e:	2020      	movs	r0, #32
    6040:	f640 4101 	movw	r1, #3073	; 0xc01
    6044:	f003 fe90 	bl	9d68 <cc2400_set>
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	// cc2400_set(FSDIV,   channel);
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    6048:	2005      	movs	r0, #5
    604a:	210b      	movs	r1, #11
    604c:	f003 fe8c 	bl	9d68 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    6050:	2003      	movs	r0, #3
    6052:	2140      	movs	r1, #64	; 0x40
    6054:	f003 fe88 	bl	9d68 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    6058:	bf00      	nop
    605a:	f003 ff3d 	bl	9ed8 <cc2400_status>
    605e:	4603      	mov	r3, r0
    6060:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6064:	2b00      	cmp	r3, #0
    6066:	d0f8      	beq.n	605a <le_jam+0x3e>
	cc2400_strobe(SFSON);
    6068:	2061      	movs	r0, #97	; 0x61
    606a:	f003 ff3f 	bl	9eec <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    606e:	bf00      	nop
    6070:	f003 ff32 	bl	9ed8 <cc2400_status>
    6074:	4603      	mov	r3, r0
    6076:	f003 0304 	and.w	r3, r3, #4
    607a:	2b00      	cmp	r3, #0
    607c:	d0f8      	beq.n	6070 <le_jam+0x54>
	TXLED_SET;
    607e:	4b0a      	ldr	r3, [pc, #40]	; (60a8 <le_jam+0x8c>)
    6080:	f44f 7280 	mov.w	r2, #256	; 0x100
    6084:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6086:	4b09      	ldr	r3, [pc, #36]	; (60ac <le_jam+0x90>)
    6088:	2280      	movs	r2, #128	; 0x80
    608a:	601a      	str	r2, [r3, #0]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    608c:	bf00      	nop
    608e:	200e      	movs	r0, #14
    6090:	f003 fe54 	bl	9d3c <cc2400_get>
    6094:	4603      	mov	r3, r0
    6096:	f003 031f 	and.w	r3, r3, #31
    609a:	2b0f      	cmp	r3, #15
    609c:	d1f7      	bne.n	608e <le_jam+0x72>
	cc2400_strobe(STX);
    609e:	2063      	movs	r0, #99	; 0x63
    60a0:	f003 ff24 	bl	9eec <cc2400_strobe>
#endif
}
    60a4:	bd80      	pop	{r7, pc}
    60a6:	bf00      	nop
    60a8:	2009c038 	.word	0x2009c038
    60ac:	2009c058 	.word	0x2009c058

000060b0 <hop>:

/* TODO - return whether hop happened, or should caller have to keep
 * track of this? */
void hop(void)
{
    60b0:	b580      	push	{r7, lr}
    60b2:	af00      	add	r7, sp, #0
	do_hop = 0;
    60b4:	4b41      	ldr	r3, [pc, #260]	; (61bc <hop+0x10c>)
    60b6:	2200      	movs	r2, #0
    60b8:	701a      	strb	r2, [r3, #0]

	// No hopping, if channel is set correctly, do nothing
	if (hop_mode == HOP_NONE) {
    60ba:	4b41      	ldr	r3, [pc, #260]	; (61c0 <hop+0x110>)
    60bc:	781b      	ldrb	r3, [r3, #0]
    60be:	2b00      	cmp	r3, #0
    60c0:	d10b      	bne.n	60da <hop+0x2a>
		if (cc2400_get(FSDIV) == (channel - 1))
    60c2:	2002      	movs	r0, #2
    60c4:	f003 fe3a 	bl	9d3c <cc2400_get>
    60c8:	4603      	mov	r3, r0
    60ca:	461a      	mov	r2, r3
    60cc:	4b3d      	ldr	r3, [pc, #244]	; (61c4 <hop+0x114>)
    60ce:	881b      	ldrh	r3, [r3, #0]
    60d0:	b29b      	uxth	r3, r3
    60d2:	3b01      	subs	r3, #1
    60d4:	429a      	cmp	r2, r3
    60d6:	d147      	bne.n	6168 <hop+0xb8>
			return;
    60d8:	e06e      	b.n	61b8 <hop+0x108>
	}

	// Slow sweep (100 hops/sec)
	else if (hop_mode == HOP_SWEEP) {
    60da:	4b39      	ldr	r3, [pc, #228]	; (61c0 <hop+0x110>)
    60dc:	781b      	ldrb	r3, [r3, #0]
    60de:	2b01      	cmp	r3, #1
    60e0:	d114      	bne.n	610c <hop+0x5c>
		channel += 32;
    60e2:	4b38      	ldr	r3, [pc, #224]	; (61c4 <hop+0x114>)
    60e4:	881b      	ldrh	r3, [r3, #0]
    60e6:	b29b      	uxth	r3, r3
    60e8:	3320      	adds	r3, #32
    60ea:	b29a      	uxth	r2, r3
    60ec:	4b35      	ldr	r3, [pc, #212]	; (61c4 <hop+0x114>)
    60ee:	801a      	strh	r2, [r3, #0]
		if (channel > 2480)
    60f0:	4b34      	ldr	r3, [pc, #208]	; (61c4 <hop+0x114>)
    60f2:	881b      	ldrh	r3, [r3, #0]
    60f4:	b29b      	uxth	r3, r3
    60f6:	f5b3 6f1b 	cmp.w	r3, #2480	; 0x9b0
    60fa:	d935      	bls.n	6168 <hop+0xb8>
			channel -= 79;
    60fc:	4b31      	ldr	r3, [pc, #196]	; (61c4 <hop+0x114>)
    60fe:	881b      	ldrh	r3, [r3, #0]
    6100:	b29b      	uxth	r3, r3
    6102:	3b4f      	subs	r3, #79	; 0x4f
    6104:	b29a      	uxth	r2, r3
    6106:	4b2f      	ldr	r3, [pc, #188]	; (61c4 <hop+0x114>)
    6108:	801a      	strh	r2, [r3, #0]
    610a:	e02d      	b.n	6168 <hop+0xb8>
	}

	else if (hop_mode == HOP_BLUETOOTH) {
    610c:	4b2c      	ldr	r3, [pc, #176]	; (61c0 <hop+0x110>)
    610e:	781b      	ldrb	r3, [r3, #0]
    6110:	2b02      	cmp	r3, #2
    6112:	d10d      	bne.n	6130 <hop+0x80>
		TXLED_SET;
    6114:	4b2c      	ldr	r3, [pc, #176]	; (61c8 <hop+0x118>)
    6116:	f44f 7280 	mov.w	r2, #256	; 0x100
    611a:	601a      	str	r2, [r3, #0]
		channel = next_hop(clkn);
    611c:	4b2b      	ldr	r3, [pc, #172]	; (61cc <hop+0x11c>)
    611e:	681b      	ldr	r3, [r3, #0]
    6120:	4618      	mov	r0, r3
    6122:	f002 f939 	bl	8398 <next_hop>
    6126:	4603      	mov	r3, r0
    6128:	461a      	mov	r2, r3
    612a:	4b26      	ldr	r3, [pc, #152]	; (61c4 <hop+0x114>)
    612c:	801a      	strh	r2, [r3, #0]
    612e:	e01b      	b.n	6168 <hop+0xb8>
	}

	else if (hop_mode == HOP_BTLE) {
    6130:	4b23      	ldr	r3, [pc, #140]	; (61c0 <hop+0x110>)
    6132:	781b      	ldrb	r3, [r3, #0]
    6134:	2b03      	cmp	r3, #3
    6136:	d10b      	bne.n	6150 <hop+0xa0>
		TXLED_SET;
    6138:	4b23      	ldr	r3, [pc, #140]	; (61c8 <hop+0x118>)
    613a:	f44f 7280 	mov.w	r2, #256	; 0x100
    613e:	601a      	str	r2, [r3, #0]
		channel = btle_next_hop(&le);
    6140:	4823      	ldr	r0, [pc, #140]	; (61d0 <hop+0x120>)
    6142:	f002 f9ef 	bl	8524 <btle_next_hop>
    6146:	4603      	mov	r3, r0
    6148:	461a      	mov	r2, r3
    614a:	4b1e      	ldr	r3, [pc, #120]	; (61c4 <hop+0x114>)
    614c:	801a      	strh	r2, [r3, #0]
    614e:	e00b      	b.n	6168 <hop+0xb8>
	}

	else if (hop_mode == HOP_DIRECT) {
    6150:	4b1b      	ldr	r3, [pc, #108]	; (61c0 <hop+0x110>)
    6152:	781b      	ldrb	r3, [r3, #0]
    6154:	2b04      	cmp	r3, #4
    6156:	d107      	bne.n	6168 <hop+0xb8>
		TXLED_SET;
    6158:	4b1b      	ldr	r3, [pc, #108]	; (61c8 <hop+0x118>)
    615a:	f44f 7280 	mov.w	r2, #256	; 0x100
    615e:	601a      	str	r2, [r3, #0]
		channel = hop_direct_channel;
    6160:	4b1c      	ldr	r3, [pc, #112]	; (61d4 <hop+0x124>)
    6162:	881a      	ldrh	r2, [r3, #0]
    6164:	4b17      	ldr	r3, [pc, #92]	; (61c4 <hop+0x114>)
    6166:	801a      	strh	r2, [r3, #0]
	}

        /* IDLE mode, but leave amp on, so don't call cc2400_idle(). */
	cc2400_strobe(SRFOFF);
    6168:	2064      	movs	r0, #100	; 0x64
    616a:	f003 febf 	bl	9eec <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    616e:	bf00      	nop
    6170:	f003 feb2 	bl	9ed8 <cc2400_status>
    6174:	4603      	mov	r3, r0
    6176:	f003 0304 	and.w	r3, r3, #4
    617a:	2b00      	cmp	r3, #0
    617c:	d1f8      	bne.n	6170 <hop+0xc0>

	/* Retune */
	cc2400_set(FSDIV, channel - 1);
    617e:	4b11      	ldr	r3, [pc, #68]	; (61c4 <hop+0x114>)
    6180:	881b      	ldrh	r3, [r3, #0]
    6182:	b29b      	uxth	r3, r3
    6184:	3b01      	subs	r3, #1
    6186:	b29b      	uxth	r3, r3
    6188:	2002      	movs	r0, #2
    618a:	4619      	mov	r1, r3
    618c:	f003 fdec 	bl	9d68 <cc2400_set>
	
	/* Update CS register if hopping.  */
	if (hop_mode > 0) {
    6190:	4b0b      	ldr	r3, [pc, #44]	; (61c0 <hop+0x110>)
    6192:	781b      	ldrb	r3, [r3, #0]
    6194:	2b00      	cmp	r3, #0
    6196:	d001      	beq.n	619c <hop+0xec>
		cs_threshold_calc_and_set();
    6198:	f7fe fb28 	bl	47ec <cs_threshold_calc_and_set>
	}

	/* Wait for lock */
	cc2400_strobe(SFSON);
    619c:	2061      	movs	r0, #97	; 0x61
    619e:	f003 fea5 	bl	9eec <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    61a2:	bf00      	nop
    61a4:	f003 fe98 	bl	9ed8 <cc2400_status>
    61a8:	4603      	mov	r3, r0
    61aa:	f003 0304 	and.w	r3, r3, #4
    61ae:	2b00      	cmp	r3, #0
    61b0:	d0f8      	beq.n	61a4 <hop+0xf4>
	
	/* RX mode */
	cc2400_strobe(SRX);
    61b2:	2062      	movs	r0, #98	; 0x62
    61b4:	f003 fe9a 	bl	9eec <cc2400_strobe>

}
    61b8:	bd80      	pop	{r7, pc}
    61ba:	bf00      	nop
    61bc:	1000097d 	.word	0x1000097d
    61c0:	1000097c 	.word	0x1000097c
    61c4:	1000049c 	.word	0x1000049c
    61c8:	2009c038 	.word	0x2009c038
    61cc:	10000be4 	.word	0x10000be4
    61d0:	10000458 	.word	0x10000458
    61d4:	10000980 	.word	0x10000980

000061d8 <bt_stream_rx>:

/* Bluetooth packet monitoring */
void bt_stream_rx()
{
    61d8:	b5b0      	push	{r4, r5, r7, lr}
    61da:	b082      	sub	sp, #8
    61dc:	af00      	add	r7, sp, #0
	u8 *tmp = NULL;
    61de:	2300      	movs	r3, #0
    61e0:	603b      	str	r3, [r7, #0]
	int8_t rssi;
	int i;
	int16_t packet_offset;
	int8_t rssi_at_trigger;
	
	RXLED_CLR;
    61e2:	4b83      	ldr	r3, [pc, #524]	; (63f0 <bt_stream_rx+0x218>)
    61e4:	2210      	movs	r2, #16
    61e6:	601a      	str	r2, [r3, #0]

	queue_init();
    61e8:	f002 fb44 	bl	8874 <queue_init>
	dio_ssp_init();
    61ec:	f003 fcea 	bl	9bc4 <dio_ssp_init>
	dma_init();
    61f0:	f7ff f9e2 	bl	55b8 <dma_init>
	dio_ssp_start();
    61f4:	f7ff fc0a 	bl	5a0c <dio_ssp_start>
	
	if(mode == MODE_BT_FOLLOW) {
    61f8:	4b7e      	ldr	r3, [pc, #504]	; (63f4 <bt_stream_rx+0x21c>)
    61fa:	781b      	ldrb	r3, [r3, #0]
    61fc:	b2db      	uxtb	r3, r3
    61fe:	2b08      	cmp	r3, #8
    6200:	d10b      	bne.n	621a <bt_stream_rx+0x42>
		precalc();
    6202:	f001 fee7 	bl	7fd4 <precalc>
		cc2400_rx_sync((syncword >> 32) & 0xffffffff);
    6206:	4b7c      	ldr	r3, [pc, #496]	; (63f8 <bt_stream_rx+0x220>)
    6208:	e9d3 2300 	ldrd	r2, r3, [r3]
    620c:	001c      	movs	r4, r3
    620e:	2500      	movs	r5, #0
    6210:	4623      	mov	r3, r4
    6212:	4618      	mov	r0, r3
    6214:	f7ff fd14 	bl	5c40 <cc2400_rx_sync>
    6218:	e001      	b.n	621e <bt_stream_rx+0x46>
	} else {
		cc2400_rx();
    621a:	f7ff fcb3 	bl	5b84 <cc2400_rx>
	}
	cs_trigger_enable();
    621e:	f7fe fb1f 	bl	4860 <cs_trigger_enable>

	hold = 0;
    6222:	2300      	movs	r3, #0
    6224:	71fb      	strb	r3, [r7, #7]

	while ((requested_mode == MODE_RX_SYMBOLS) ||
    6226:	e0d0      	b.n	63ca <bt_stream_rx+0x1f2>

		/* If timer says time to hop, do it. TODO - set
		 * per-channel carrier sense threshold. Set by
		 * firmware or host. TODO - if hop happened, clear
		 * hold. */
		if (do_hop)
    6228:	4b74      	ldr	r3, [pc, #464]	; (63fc <bt_stream_rx+0x224>)
    622a:	781b      	ldrb	r3, [r3, #0]
    622c:	b2db      	uxtb	r3, r3
    622e:	2b00      	cmp	r3, #0
    6230:	d001      	beq.n	6236 <bt_stream_rx+0x5e>
			hop();
    6232:	f7ff ff3d 	bl	60b0 <hop>

		RXLED_CLR;
    6236:	4b6e      	ldr	r3, [pc, #440]	; (63f0 <bt_stream_rx+0x218>)
    6238:	2210      	movs	r2, #16
    623a:	601a      	str	r2, [r3, #0]
		 * cover all the symbols in a DMA transfer. Can not do
		 * RSSI sampling in CS interrupt, but could log time
		 * at multiple trigger points there. The MAX() below
		 * helps with statistics in the case that cs_trigger
		 * happened before the loop started. */
		rssi_reset();
    623c:	f7fe f886 	bl	434c <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    6240:	2380      	movs	r3, #128	; 0x80
    6242:	717b      	strb	r3, [r7, #5]
		while ((rx_tc == 0) && (rx_err == 0)) {
    6244:	e022      	b.n	628c <bt_stream_rx+0xb4>
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    6246:	2006      	movs	r0, #6
    6248:	f003 fd78 	bl	9d3c <cc2400_get>
    624c:	4603      	mov	r3, r0
    624e:	0a1b      	lsrs	r3, r3, #8
    6250:	b29b      	uxth	r3, r3
    6252:	71bb      	strb	r3, [r7, #6]
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    6254:	4b6a      	ldr	r3, [pc, #424]	; (6400 <bt_stream_rx+0x228>)
    6256:	781b      	ldrb	r3, [r3, #0]
    6258:	b2db      	uxtb	r3, r3
    625a:	2b00      	cmp	r3, #0
    625c:	d011      	beq.n	6282 <bt_stream_rx+0xaa>
    625e:	f997 3005 	ldrsb.w	r3, [r7, #5]
    6262:	f113 0f80 	cmn.w	r3, #128	; 0x80
    6266:	d10c      	bne.n	6282 <bt_stream_rx+0xaa>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    6268:	4b66      	ldr	r3, [pc, #408]	; (6404 <bt_stream_rx+0x22c>)
    626a:	781b      	ldrb	r3, [r3, #0]
    626c:	b25b      	sxtb	r3, r3
    626e:	f103 0236 	add.w	r2, r3, #54	; 0x36
    6272:	f997 3006 	ldrsb.w	r3, [r7, #6]
    6276:	4293      	cmp	r3, r2
    6278:	bfb8      	it	lt
    627a:	4613      	movlt	r3, r2
    627c:	71bb      	strb	r3, [r7, #6]
				rssi_at_trigger = rssi;
    627e:	79bb      	ldrb	r3, [r7, #6]
    6280:	717b      	strb	r3, [r7, #5]
			}
			rssi_add(rssi);
    6282:	f997 3006 	ldrsb.w	r3, [r7, #6]
    6286:	4618      	mov	r0, r3
    6288:	f7fe f87a 	bl	4380 <rssi_add>
		 * at multiple trigger points there. The MAX() below
		 * helps with statistics in the case that cs_trigger
		 * happened before the loop started. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while ((rx_tc == 0) && (rx_err == 0)) {
    628c:	4b5e      	ldr	r3, [pc, #376]	; (6408 <bt_stream_rx+0x230>)
    628e:	681b      	ldr	r3, [r3, #0]
    6290:	2b00      	cmp	r3, #0
    6292:	d103      	bne.n	629c <bt_stream_rx+0xc4>
    6294:	4b5d      	ldr	r3, [pc, #372]	; (640c <bt_stream_rx+0x234>)
    6296:	681b      	ldr	r3, [r3, #0]
    6298:	2b00      	cmp	r3, #0
    629a:	d0d4      	beq.n	6246 <bt_stream_rx+0x6e>
			}
			rssi_add(rssi);
		}

		/* Keep buffer swapping in sync with DMA. */
		if (rx_tc % 2) {
    629c:	4b5a      	ldr	r3, [pc, #360]	; (6408 <bt_stream_rx+0x230>)
    629e:	681b      	ldr	r3, [r3, #0]
    62a0:	f003 0301 	and.w	r3, r3, #1
    62a4:	2b00      	cmp	r3, #0
    62a6:	d009      	beq.n	62bc <bt_stream_rx+0xe4>
			tmp = active_rxbuf;
    62a8:	4b59      	ldr	r3, [pc, #356]	; (6410 <bt_stream_rx+0x238>)
    62aa:	681b      	ldr	r3, [r3, #0]
    62ac:	603b      	str	r3, [r7, #0]
			active_rxbuf = idle_rxbuf;
    62ae:	4b59      	ldr	r3, [pc, #356]	; (6414 <bt_stream_rx+0x23c>)
    62b0:	681b      	ldr	r3, [r3, #0]
    62b2:	4a57      	ldr	r2, [pc, #348]	; (6410 <bt_stream_rx+0x238>)
    62b4:	6013      	str	r3, [r2, #0]
			idle_rxbuf = tmp;
    62b6:	4a57      	ldr	r2, [pc, #348]	; (6414 <bt_stream_rx+0x23c>)
    62b8:	683b      	ldr	r3, [r7, #0]
    62ba:	6013      	str	r3, [r2, #0]
		}

		if (rx_err) {
    62bc:	4b53      	ldr	r3, [pc, #332]	; (640c <bt_stream_rx+0x234>)
    62be:	681b      	ldr	r3, [r3, #0]
    62c0:	2b00      	cmp	r3, #0
    62c2:	d007      	beq.n	62d4 <bt_stream_rx+0xfc>
			status |= DMA_ERROR;
    62c4:	4b54      	ldr	r3, [pc, #336]	; (6418 <bt_stream_rx+0x240>)
    62c6:	781b      	ldrb	r3, [r3, #0]
    62c8:	b2db      	uxtb	r3, r3
    62ca:	f043 0302 	orr.w	r3, r3, #2
    62ce:	b2da      	uxtb	r2, r3
    62d0:	4b51      	ldr	r3, [pc, #324]	; (6418 <bt_stream_rx+0x240>)
    62d2:	701a      	strb	r2, [r3, #0]
		}

		/* No DMA transfer? */
		if (!rx_tc)
    62d4:	4b4c      	ldr	r3, [pc, #304]	; (6408 <bt_stream_rx+0x230>)
    62d6:	681b      	ldr	r3, [r3, #0]
    62d8:	2b00      	cmp	r3, #0
    62da:	d100      	bne.n	62de <bt_stream_rx+0x106>
			goto rx_continue;
    62dc:	e06a      	b.n	63b4 <bt_stream_rx+0x1dc>

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    62de:	4b4a      	ldr	r3, [pc, #296]	; (6408 <bt_stream_rx+0x230>)
    62e0:	681b      	ldr	r3, [r3, #0]
    62e2:	2b01      	cmp	r3, #1
    62e4:	d907      	bls.n	62f6 <bt_stream_rx+0x11e>
			status |= DMA_OVERFLOW;
    62e6:	4b4c      	ldr	r3, [pc, #304]	; (6418 <bt_stream_rx+0x240>)
    62e8:	781b      	ldrb	r3, [r3, #0]
    62ea:	b2db      	uxtb	r3, r3
    62ec:	f043 0301 	orr.w	r3, r3, #1
    62f0:	b2da      	uxtb	r2, r3
    62f2:	4b49      	ldr	r3, [pc, #292]	; (6418 <bt_stream_rx+0x240>)
    62f4:	701a      	strb	r2, [r3, #0]

		rssi_iir_update();
    62f6:	f7fe f879 	bl	43ec <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    62fa:	4b41      	ldr	r3, [pc, #260]	; (6400 <bt_stream_rx+0x228>)
    62fc:	781b      	ldrb	r3, [r3, #0]
    62fe:	b2db      	uxtb	r3, r3
    6300:	2b00      	cmp	r3, #0
    6302:	d103      	bne.n	630c <bt_stream_rx+0x134>
    6304:	4b45      	ldr	r3, [pc, #276]	; (641c <bt_stream_rx+0x244>)
    6306:	781b      	ldrb	r3, [r3, #0]
    6308:	2b00      	cmp	r3, #0
    630a:	d00c      	beq.n	6326 <bt_stream_rx+0x14e>
			status |= CS_TRIGGER;
    630c:	4b42      	ldr	r3, [pc, #264]	; (6418 <bt_stream_rx+0x240>)
    630e:	781b      	ldrb	r3, [r3, #0]
    6310:	b2db      	uxtb	r3, r3
    6312:	f043 0308 	orr.w	r3, r3, #8
    6316:	b2da      	uxtb	r2, r3
    6318:	4b3f      	ldr	r3, [pc, #252]	; (6418 <bt_stream_rx+0x240>)
    631a:	701a      	strb	r2, [r3, #0]
			hold = CS_HOLD_TIME;
    631c:	2302      	movs	r3, #2
    631e:	71fb      	strb	r3, [r7, #7]
			cs_trigger = 0;
    6320:	4b37      	ldr	r3, [pc, #220]	; (6400 <bt_stream_rx+0x228>)
    6322:	2200      	movs	r2, #0
    6324:	701a      	strb	r2, [r3, #0]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    6326:	4b3e      	ldr	r3, [pc, #248]	; (6420 <bt_stream_rx+0x248>)
    6328:	781b      	ldrb	r3, [r3, #0]
    632a:	b25a      	sxtb	r2, r3
    632c:	4b35      	ldr	r3, [pc, #212]	; (6404 <bt_stream_rx+0x22c>)
    632e:	781b      	ldrb	r3, [r3, #0]
    6330:	b25b      	sxtb	r3, r3
    6332:	3336      	adds	r3, #54	; 0x36
    6334:	429a      	cmp	r2, r3
    6336:	db09      	blt.n	634c <bt_stream_rx+0x174>
			status |= RSSI_TRIGGER;
    6338:	4b37      	ldr	r3, [pc, #220]	; (6418 <bt_stream_rx+0x240>)
    633a:	781b      	ldrb	r3, [r3, #0]
    633c:	b2db      	uxtb	r3, r3
    633e:	f043 0310 	orr.w	r3, r3, #16
    6342:	b2da      	uxtb	r2, r3
    6344:	4b34      	ldr	r3, [pc, #208]	; (6418 <bt_stream_rx+0x240>)
    6346:	701a      	strb	r2, [r3, #0]
			hold = CS_HOLD_TIME;
    6348:	2302      	movs	r3, #2
    634a:	71fb      	strb	r3, [r7, #7]
		}

		/* Send a packet once in a while (6.25 Hz) to keep
		 * host USB reads from timing out. */
		if (keepalive_trigger) {
    634c:	4b35      	ldr	r3, [pc, #212]	; (6424 <bt_stream_rx+0x24c>)
    634e:	781b      	ldrb	r3, [r3, #0]
    6350:	b2db      	uxtb	r3, r3
    6352:	2b00      	cmp	r3, #0
    6354:	d007      	beq.n	6366 <bt_stream_rx+0x18e>
			if (hold == 0)
    6356:	79fb      	ldrb	r3, [r7, #7]
    6358:	2b00      	cmp	r3, #0
    635a:	d101      	bne.n	6360 <bt_stream_rx+0x188>
				hold = 1;
    635c:	2301      	movs	r3, #1
    635e:	71fb      	strb	r3, [r7, #7]
			keepalive_trigger = 0;
    6360:	4b30      	ldr	r3, [pc, #192]	; (6424 <bt_stream_rx+0x24c>)
    6362:	2200      	movs	r2, #0
    6364:	701a      	strb	r2, [r3, #0]
		}

		/* Hold expired? Ignore data. */
		if (hold == 0) {
    6366:	79fb      	ldrb	r3, [r7, #7]
    6368:	2b00      	cmp	r3, #0
    636a:	d100      	bne.n	636e <bt_stream_rx+0x196>
			goto rx_continue;
    636c:	e022      	b.n	63b4 <bt_stream_rx+0x1dc>
		}
		hold--;
    636e:	79fb      	ldrb	r3, [r7, #7]
    6370:	3b01      	subs	r3, #1
    6372:	71fb      	strb	r3, [r7, #7]
		
		/* Queue data from DMA buffer. */
		switch (hop_mode) {
    6374:	4b2c      	ldr	r3, [pc, #176]	; (6428 <bt_stream_rx+0x250>)
    6376:	781b      	ldrb	r3, [r3, #0]
    6378:	2b02      	cmp	r3, #2
    637a:	d10d      	bne.n	6398 <bt_stream_rx+0x1c0>
			case HOP_BLUETOOTH:
				//if ((packet_offset = find_access_code(idle_rxbuf)) >= 0) {
				//		clock_trim = 20 - packet_offset;
						if (enqueue(BR_PACKET, idle_rxbuf)) {
    637c:	4b25      	ldr	r3, [pc, #148]	; (6414 <bt_stream_rx+0x23c>)
    637e:	681b      	ldr	r3, [r3, #0]
    6380:	2000      	movs	r0, #0
    6382:	4619      	mov	r1, r3
    6384:	f7fe f8c4 	bl	4510 <enqueue>
    6388:	4603      	mov	r3, r0
    638a:	2b00      	cmp	r3, #0
    638c:	d003      	beq.n	6396 <bt_stream_rx+0x1be>
								RXLED_SET;
    638e:	4b27      	ldr	r3, [pc, #156]	; (642c <bt_stream_rx+0x254>)
    6390:	2210      	movs	r2, #16
    6392:	601a      	str	r2, [r3, #0]
						}
				//}
				break;
    6394:	e00e      	b.n	63b4 <bt_stream_rx+0x1dc>
    6396:	e00d      	b.n	63b4 <bt_stream_rx+0x1dc>
			default:
				if (enqueue(BR_PACKET, idle_rxbuf)) {
    6398:	4b1e      	ldr	r3, [pc, #120]	; (6414 <bt_stream_rx+0x23c>)
    639a:	681b      	ldr	r3, [r3, #0]
    639c:	2000      	movs	r0, #0
    639e:	4619      	mov	r1, r3
    63a0:	f7fe f8b6 	bl	4510 <enqueue>
    63a4:	4603      	mov	r3, r0
    63a6:	2b00      	cmp	r3, #0
    63a8:	d003      	beq.n	63b2 <bt_stream_rx+0x1da>
						RXLED_SET;
    63aa:	4b20      	ldr	r3, [pc, #128]	; (642c <bt_stream_rx+0x254>)
    63ac:	2210      	movs	r2, #16
    63ae:	601a      	str	r2, [r3, #0]
				}
				break;
    63b0:	e7ff      	b.n	63b2 <bt_stream_rx+0x1da>
    63b2:	bf00      	nop
		}

	rx_continue:
		handle_usb(clkn);
    63b4:	4b1e      	ldr	r3, [pc, #120]	; (6430 <bt_stream_rx+0x258>)
    63b6:	681b      	ldr	r3, [r3, #0]
    63b8:	4618      	mov	r0, r3
    63ba:	f002 fafb 	bl	89b4 <handle_usb>
		rx_tc = 0;
    63be:	4b12      	ldr	r3, [pc, #72]	; (6408 <bt_stream_rx+0x230>)
    63c0:	2200      	movs	r2, #0
    63c2:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    63c4:	4b11      	ldr	r3, [pc, #68]	; (640c <bt_stream_rx+0x234>)
    63c6:	2200      	movs	r2, #0
    63c8:	601a      	str	r2, [r3, #0]
	}
	cs_trigger_enable();

	hold = 0;

	while ((requested_mode == MODE_RX_SYMBOLS) ||
    63ca:	4b1a      	ldr	r3, [pc, #104]	; (6434 <bt_stream_rx+0x25c>)
    63cc:	781b      	ldrb	r3, [r3, #0]
    63ce:	b2db      	uxtb	r3, r3
    63d0:	2b01      	cmp	r3, #1
    63d2:	f43f af29 	beq.w	6228 <bt_stream_rx+0x50>
		   (requested_mode == MODE_BT_FOLLOW)) {
    63d6:	4b17      	ldr	r3, [pc, #92]	; (6434 <bt_stream_rx+0x25c>)
    63d8:	781b      	ldrb	r3, [r3, #0]
    63da:	b2db      	uxtb	r3, r3
	}
	cs_trigger_enable();

	hold = 0;

	while ((requested_mode == MODE_RX_SYMBOLS) ||
    63dc:	2b08      	cmp	r3, #8
    63de:	f43f af23 	beq.w	6228 <bt_stream_rx+0x50>

	/* This call is a nop so far. Since bt_rx_stream() starts the
	 * stream, it makes sense that it would stop it. TODO - how
	 * should setup/teardown be handled? Should every new mode be
	 * starting from scratch? */
	dio_ssp_stop();
    63e2:	f7ff fb43 	bl	5a6c <dio_ssp_stop>
	cs_trigger_disable();
    63e6:	f7fe fa59 	bl	489c <cs_trigger_disable>
}
    63ea:	3708      	adds	r7, #8
    63ec:	46bd      	mov	sp, r7
    63ee:	bdb0      	pop	{r4, r5, r7, pc}
    63f0:	2009c03c 	.word	0x2009c03c
    63f4:	10000a3e 	.word	0x10000a3e
    63f8:	10000cf8 	.word	0x10000cf8
    63fc:	1000097d 	.word	0x1000097d
    6400:	100010b0 	.word	0x100010b0
    6404:	1000044d 	.word	0x1000044d
    6408:	10000b00 	.word	0x10000b00
    640c:	100010ac 	.word	0x100010ac
    6410:	10000450 	.word	0x10000450
    6414:	10000454 	.word	0x10000454
    6418:	10000a48 	.word	0x10000a48
    641c:	1000097e 	.word	0x1000097e
    6420:	10000b04 	.word	0x10000b04
    6424:	10000be0 	.word	0x10000be0
    6428:	1000097c 	.word	0x1000097c
    642c:	2009c038 	.word	0x2009c038
    6430:	10000be4 	.word	0x10000be4
    6434:	10000a3f 	.word	0x10000a3f

00006438 <le_set_access_address>:

/* set LE access address */
static void le_set_access_address(u32 aa) {
    6438:	b580      	push	{r7, lr}
    643a:	b084      	sub	sp, #16
    643c:	af00      	add	r7, sp, #0
    643e:	6078      	str	r0, [r7, #4]
	u32 aa_rev;

	le.access_address = aa;
    6440:	4a09      	ldr	r2, [pc, #36]	; (6468 <le_set_access_address+0x30>)
    6442:	687b      	ldr	r3, [r7, #4]
    6444:	6013      	str	r3, [r2, #0]
	aa_rev = rbit(aa);
    6446:	6878      	ldr	r0, [r7, #4]
    6448:	f003 fabc 	bl	99c4 <rbit>
    644c:	60f8      	str	r0, [r7, #12]
	le.syncl = aa_rev & 0xffff;
    644e:	68fb      	ldr	r3, [r7, #12]
    6450:	b29a      	uxth	r2, r3
    6452:	4b05      	ldr	r3, [pc, #20]	; (6468 <le_set_access_address+0x30>)
    6454:	80da      	strh	r2, [r3, #6]
	le.synch = aa_rev >> 16;
    6456:	68fb      	ldr	r3, [r7, #12]
    6458:	0c1b      	lsrs	r3, r3, #16
    645a:	b29a      	uxth	r2, r3
    645c:	4b02      	ldr	r3, [pc, #8]	; (6468 <le_set_access_address+0x30>)
    645e:	809a      	strh	r2, [r3, #4]
}
    6460:	3710      	adds	r7, #16
    6462:	46bd      	mov	sp, r7
    6464:	bd80      	pop	{r7, pc}
    6466:	bf00      	nop
    6468:	10000458 	.word	0x10000458

0000646c <reset_le>:

/* reset le state, called by bt_generic_le and bt_follow_le() */
void reset_le() {
    646c:	b580      	push	{r7, lr}
    646e:	af00      	add	r7, sp, #0
	le_set_access_address(0x8e89bed6);     // advertising channel access address
    6470:	481f      	ldr	r0, [pc, #124]	; (64f0 <reset_le+0x84>)
    6472:	f7ff ffe1 	bl	6438 <le_set_access_address>
	le.crc_init  = 0x555555;	       // advertising channel CRCInit
    6476:	4b1f      	ldr	r3, [pc, #124]	; (64f4 <reset_le+0x88>)
    6478:	4a1f      	ldr	r2, [pc, #124]	; (64f8 <reset_le+0x8c>)
    647a:	609a      	str	r2, [r3, #8]
	le.crc_init_reversed = 0xAAAAAA;
    647c:	4b1d      	ldr	r3, [pc, #116]	; (64f4 <reset_le+0x88>)
    647e:	4a1f      	ldr	r2, [pc, #124]	; (64fc <reset_le+0x90>)
    6480:	60da      	str	r2, [r3, #12]
	le.crc_verify = 1;
    6482:	4b1c      	ldr	r3, [pc, #112]	; (64f4 <reset_le+0x88>)
    6484:	2201      	movs	r2, #1
    6486:	611a      	str	r2, [r3, #16]
	le.last_packet = 0;
    6488:	4b1a      	ldr	r3, [pc, #104]	; (64f4 <reset_le+0x88>)
    648a:	2200      	movs	r2, #0
    648c:	641a      	str	r2, [r3, #64]	; 0x40

	le.link_state = LINK_INACTIVE;
    648e:	4b19      	ldr	r3, [pc, #100]	; (64f4 <reset_le+0x88>)
    6490:	2200      	movs	r2, #0
    6492:	751a      	strb	r2, [r3, #20]

	le.channel_idx = 0;
    6494:	4b17      	ldr	r3, [pc, #92]	; (64f4 <reset_le+0x88>)
    6496:	2200      	movs	r2, #0
    6498:	755a      	strb	r2, [r3, #21]
	le.channel_increment = 0;
    649a:	4b16      	ldr	r3, [pc, #88]	; (64f4 <reset_le+0x88>)
    649c:	2200      	movs	r2, #0
    649e:	759a      	strb	r2, [r3, #22]

	le.conn_epoch = 0;
    64a0:	4b14      	ldr	r3, [pc, #80]	; (64f4 <reset_le+0x88>)
    64a2:	2200      	movs	r2, #0
    64a4:	619a      	str	r2, [r3, #24]
	le.interval_timer = 0;
    64a6:	4b13      	ldr	r3, [pc, #76]	; (64f4 <reset_le+0x88>)
    64a8:	2200      	movs	r2, #0
    64aa:	839a      	strh	r2, [r3, #28]
	le.conn_interval = 0;
    64ac:	4b11      	ldr	r3, [pc, #68]	; (64f4 <reset_le+0x88>)
    64ae:	2200      	movs	r2, #0
    64b0:	83da      	strh	r2, [r3, #30]
	le.conn_interval = 0;
    64b2:	4b10      	ldr	r3, [pc, #64]	; (64f4 <reset_le+0x88>)
    64b4:	2200      	movs	r2, #0
    64b6:	83da      	strh	r2, [r3, #30]
	le.conn_count = 0;
    64b8:	4b0e      	ldr	r3, [pc, #56]	; (64f4 <reset_le+0x88>)
    64ba:	2200      	movs	r2, #0
    64bc:	841a      	strh	r2, [r3, #32]

	le.win_size = 0;
    64be:	4b0d      	ldr	r3, [pc, #52]	; (64f4 <reset_le+0x88>)
    64c0:	2200      	movs	r2, #0
    64c2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	le.win_offset = 0;
    64c6:	4b0b      	ldr	r3, [pc, #44]	; (64f4 <reset_le+0x88>)
    64c8:	2200      	movs	r2, #0
    64ca:	849a      	strh	r2, [r3, #36]	; 0x24

	le.update_pending = 0;
    64cc:	4b09      	ldr	r3, [pc, #36]	; (64f4 <reset_le+0x88>)
    64ce:	2200      	movs	r2, #0
    64d0:	629a      	str	r2, [r3, #40]	; 0x28
	le.update_instant = 0;
    64d2:	4b08      	ldr	r3, [pc, #32]	; (64f4 <reset_le+0x88>)
    64d4:	2200      	movs	r2, #0
    64d6:	859a      	strh	r2, [r3, #44]	; 0x2c
	le.interval_update = 0;
    64d8:	4b06      	ldr	r3, [pc, #24]	; (64f4 <reset_le+0x88>)
    64da:	2200      	movs	r2, #0
    64dc:	85da      	strh	r2, [r3, #46]	; 0x2e
	le.win_size_update = 0;
    64de:	4b05      	ldr	r3, [pc, #20]	; (64f4 <reset_le+0x88>)
    64e0:	2200      	movs	r2, #0
    64e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	le.win_offset_update;

	do_hop = 0;
    64e6:	4b06      	ldr	r3, [pc, #24]	; (6500 <reset_le+0x94>)
    64e8:	2200      	movs	r2, #0
    64ea:	701a      	strb	r2, [r3, #0]
}
    64ec:	bd80      	pop	{r7, pc}
    64ee:	bf00      	nop
    64f0:	8e89bed6 	.word	0x8e89bed6
    64f4:	10000458 	.word	0x10000458
    64f8:	00555555 	.word	0x00555555
    64fc:	00aaaaaa 	.word	0x00aaaaaa
    6500:	1000097d 	.word	0x1000097d

00006504 <reset_le_promisc>:

// reset LE Promisc state
void reset_le_promisc(void) {
    6504:	b580      	push	{r7, lr}
    6506:	af00      	add	r7, sp, #0
	memset(&le_promisc, 0, sizeof(le_promisc));
    6508:	4805      	ldr	r0, [pc, #20]	; (6520 <reset_le_promisc+0x1c>)
    650a:	2100      	movs	r1, #0
    650c:	f44f 7284 	mov.w	r2, #264	; 0x108
    6510:	f7fd fe72 	bl	41f8 <memset>
	le_promisc.smallest_hop_interval = 0xffffffff;
    6514:	4b02      	ldr	r3, [pc, #8]	; (6520 <reset_le_promisc+0x1c>)
    6516:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    651a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    651e:	bd80      	pop	{r7, pc}
    6520:	10000bec 	.word	0x10000bec

00006524 <bt_generic_le>:

/* generic le mode */
void bt_generic_le(u8 active_mode)
{
    6524:	b580      	push	{r7, lr}
    6526:	b088      	sub	sp, #32
    6528:	af00      	add	r7, sp, #0
    652a:	4603      	mov	r3, r0
    652c:	71fb      	strb	r3, [r7, #7]
	u8 *tmp = NULL;
    652e:	2300      	movs	r3, #0
    6530:	60fb      	str	r3, [r7, #12]
	u8 hold;
	int i, j;
	int8_t rssi, rssi_at_trigger;

	modulation = MOD_BT_LOW_ENERGY;
    6532:	4ba4      	ldr	r3, [pc, #656]	; (67c4 <bt_generic_le+0x2a0>)
    6534:	2201      	movs	r2, #1
    6536:	701a      	strb	r2, [r3, #0]
	mode = active_mode;
    6538:	4aa3      	ldr	r2, [pc, #652]	; (67c8 <bt_generic_le+0x2a4>)
    653a:	79fb      	ldrb	r3, [r7, #7]
    653c:	7013      	strb	r3, [r2, #0]

	reset_le();
    653e:	f7ff ff95 	bl	646c <reset_le>

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    6542:	4ba2      	ldr	r3, [pc, #648]	; (67cc <bt_generic_le+0x2a8>)
    6544:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6548:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    654a:	4ba1      	ldr	r3, [pc, #644]	; (67d0 <bt_generic_le+0x2ac>)
    654c:	2210      	movs	r2, #16
    654e:	601a      	str	r2, [r3, #0]

	queue_init();
    6550:	f002 f990 	bl	8874 <queue_init>
	dio_ssp_init();
    6554:	f003 fb36 	bl	9bc4 <dio_ssp_init>
	dma_init();
    6558:	f7ff f82e 	bl	55b8 <dma_init>
	dio_ssp_start();
    655c:	f7ff fa56 	bl	5a0c <dio_ssp_start>
	cc2400_rx();
    6560:	f7ff fb10 	bl	5b84 <cc2400_rx>

	cs_trigger_enable();
    6564:	f7fe f97c 	bl	4860 <cs_trigger_enable>

	hold = 0;
    6568:	2300      	movs	r3, #0
    656a:	77fb      	strb	r3, [r7, #31]

	while (requested_mode == active_mode) {
    656c:	e115      	b.n	679a <bt_generic_le+0x276>
		if (requested_channel != 0) {
    656e:	4b99      	ldr	r3, [pc, #612]	; (67d4 <bt_generic_le+0x2b0>)
    6570:	881b      	ldrh	r3, [r3, #0]
    6572:	b29b      	uxth	r3, r3
    6574:	2b00      	cmp	r3, #0
    6576:	d024      	beq.n	65c2 <bt_generic_le+0x9e>
			cc2400_strobe(SRFOFF);
    6578:	2064      	movs	r0, #100	; 0x64
    657a:	f003 fcb7 	bl	9eec <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    657e:	bf00      	nop
    6580:	f003 fcaa 	bl	9ed8 <cc2400_status>
    6584:	4603      	mov	r3, r0
    6586:	f003 0304 	and.w	r3, r3, #4
    658a:	2b00      	cmp	r3, #0
    658c:	d1f8      	bne.n	6580 <bt_generic_le+0x5c>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    658e:	4b92      	ldr	r3, [pc, #584]	; (67d8 <bt_generic_le+0x2b4>)
    6590:	881b      	ldrh	r3, [r3, #0]
    6592:	b29b      	uxth	r3, r3
    6594:	3b01      	subs	r3, #1
    6596:	b29b      	uxth	r3, r3
    6598:	2002      	movs	r0, #2
    659a:	4619      	mov	r1, r3
    659c:	f003 fbe4 	bl	9d68 <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    65a0:	2061      	movs	r0, #97	; 0x61
    65a2:	f003 fca3 	bl	9eec <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    65a6:	bf00      	nop
    65a8:	f003 fc96 	bl	9ed8 <cc2400_status>
    65ac:	4603      	mov	r3, r0
    65ae:	f003 0304 	and.w	r3, r3, #4
    65b2:	2b00      	cmp	r3, #0
    65b4:	d0f8      	beq.n	65a8 <bt_generic_le+0x84>

			/* RX mode */
			cc2400_strobe(SRX);
    65b6:	2062      	movs	r0, #98	; 0x62
    65b8:	f003 fc98 	bl	9eec <cc2400_strobe>

			requested_channel = 0;
    65bc:	4b85      	ldr	r3, [pc, #532]	; (67d4 <bt_generic_le+0x2b0>)
    65be:	2200      	movs	r2, #0
    65c0:	801a      	strh	r2, [r3, #0]
		}

		if (do_hop) {
    65c2:	4b86      	ldr	r3, [pc, #536]	; (67dc <bt_generic_le+0x2b8>)
    65c4:	781b      	ldrb	r3, [r3, #0]
    65c6:	b2db      	uxtb	r3, r3
    65c8:	2b00      	cmp	r3, #0
    65ca:	d002      	beq.n	65d2 <bt_generic_le+0xae>
			hop();
    65cc:	f7ff fd70 	bl	60b0 <hop>
    65d0:	e003      	b.n	65da <bt_generic_le+0xb6>
		} else {
			TXLED_CLR;
    65d2:	4b7f      	ldr	r3, [pc, #508]	; (67d0 <bt_generic_le+0x2ac>)
    65d4:	f44f 7280 	mov.w	r2, #256	; 0x100
    65d8:	601a      	str	r2, [r3, #0]
		}

		RXLED_CLR;
    65da:	4b7d      	ldr	r3, [pc, #500]	; (67d0 <bt_generic_le+0x2ac>)
    65dc:	2210      	movs	r2, #16
    65de:	601a      	str	r2, [r3, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    65e0:	f7fd feb4 	bl	434c <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    65e4:	2380      	movs	r3, #128	; 0x80
    65e6:	74bb      	strb	r3, [r7, #18]
		while ((rx_tc == 0) && (rx_err == 0))
    65e8:	e022      	b.n	6630 <bt_generic_le+0x10c>
		{
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    65ea:	2006      	movs	r0, #6
    65ec:	f003 fba6 	bl	9d3c <cc2400_get>
    65f0:	4603      	mov	r3, r0
    65f2:	0a1b      	lsrs	r3, r3, #8
    65f4:	b29b      	uxth	r3, r3
    65f6:	74fb      	strb	r3, [r7, #19]
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    65f8:	4b79      	ldr	r3, [pc, #484]	; (67e0 <bt_generic_le+0x2bc>)
    65fa:	781b      	ldrb	r3, [r3, #0]
    65fc:	b2db      	uxtb	r3, r3
    65fe:	2b00      	cmp	r3, #0
    6600:	d011      	beq.n	6626 <bt_generic_le+0x102>
    6602:	f997 3012 	ldrsb.w	r3, [r7, #18]
    6606:	f113 0f80 	cmn.w	r3, #128	; 0x80
    660a:	d10c      	bne.n	6626 <bt_generic_le+0x102>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    660c:	4b75      	ldr	r3, [pc, #468]	; (67e4 <bt_generic_le+0x2c0>)
    660e:	781b      	ldrb	r3, [r3, #0]
    6610:	b25b      	sxtb	r3, r3
    6612:	f103 0236 	add.w	r2, r3, #54	; 0x36
    6616:	f997 3013 	ldrsb.w	r3, [r7, #19]
    661a:	4293      	cmp	r3, r2
    661c:	bfb8      	it	lt
    661e:	4613      	movlt	r3, r2
    6620:	74fb      	strb	r3, [r7, #19]
				rssi_at_trigger = rssi;
    6622:	7cfb      	ldrb	r3, [r7, #19]
    6624:	74bb      	strb	r3, [r7, #18]
			}
			rssi_add(rssi);
    6626:	f997 3013 	ldrsb.w	r3, [r7, #19]
    662a:	4618      	mov	r0, r3
    662c:	f7fd fea8 	bl	4380 <rssi_add>
		RXLED_CLR;

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while ((rx_tc == 0) && (rx_err == 0))
    6630:	4b6d      	ldr	r3, [pc, #436]	; (67e8 <bt_generic_le+0x2c4>)
    6632:	681b      	ldr	r3, [r3, #0]
    6634:	2b00      	cmp	r3, #0
    6636:	d103      	bne.n	6640 <bt_generic_le+0x11c>
    6638:	4b6c      	ldr	r3, [pc, #432]	; (67ec <bt_generic_le+0x2c8>)
    663a:	681b      	ldr	r3, [r3, #0]
    663c:	2b00      	cmp	r3, #0
    663e:	d0d4      	beq.n	65ea <bt_generic_le+0xc6>
			}
			rssi_add(rssi);
		}

		/* Keep buffer swapping in sync with DMA. */
		if (rx_tc % 2) {
    6640:	4b69      	ldr	r3, [pc, #420]	; (67e8 <bt_generic_le+0x2c4>)
    6642:	681b      	ldr	r3, [r3, #0]
    6644:	f003 0301 	and.w	r3, r3, #1
    6648:	2b00      	cmp	r3, #0
    664a:	d009      	beq.n	6660 <bt_generic_le+0x13c>
			tmp = active_rxbuf;
    664c:	4b68      	ldr	r3, [pc, #416]	; (67f0 <bt_generic_le+0x2cc>)
    664e:	681b      	ldr	r3, [r3, #0]
    6650:	60fb      	str	r3, [r7, #12]
			active_rxbuf = idle_rxbuf;
    6652:	4b68      	ldr	r3, [pc, #416]	; (67f4 <bt_generic_le+0x2d0>)
    6654:	681b      	ldr	r3, [r3, #0]
    6656:	4a66      	ldr	r2, [pc, #408]	; (67f0 <bt_generic_le+0x2cc>)
    6658:	6013      	str	r3, [r2, #0]
			idle_rxbuf = tmp;
    665a:	4a66      	ldr	r2, [pc, #408]	; (67f4 <bt_generic_le+0x2d0>)
    665c:	68fb      	ldr	r3, [r7, #12]
    665e:	6013      	str	r3, [r2, #0]
		}

		if (rx_err) {
    6660:	4b62      	ldr	r3, [pc, #392]	; (67ec <bt_generic_le+0x2c8>)
    6662:	681b      	ldr	r3, [r3, #0]
    6664:	2b00      	cmp	r3, #0
    6666:	d007      	beq.n	6678 <bt_generic_le+0x154>
			status |= DMA_ERROR;
    6668:	4b63      	ldr	r3, [pc, #396]	; (67f8 <bt_generic_le+0x2d4>)
    666a:	781b      	ldrb	r3, [r3, #0]
    666c:	b2db      	uxtb	r3, r3
    666e:	f043 0302 	orr.w	r3, r3, #2
    6672:	b2da      	uxtb	r2, r3
    6674:	4b60      	ldr	r3, [pc, #384]	; (67f8 <bt_generic_le+0x2d4>)
    6676:	701a      	strb	r2, [r3, #0]
		}

		/* No DMA transfer? */
		if (!rx_tc)
    6678:	4b5b      	ldr	r3, [pc, #364]	; (67e8 <bt_generic_le+0x2c4>)
    667a:	681b      	ldr	r3, [r3, #0]
    667c:	2b00      	cmp	r3, #0
    667e:	d100      	bne.n	6682 <bt_generic_le+0x15e>
			goto rx_continue;
    6680:	e085      	b.n	678e <bt_generic_le+0x26a>

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    6682:	4b59      	ldr	r3, [pc, #356]	; (67e8 <bt_generic_le+0x2c4>)
    6684:	681b      	ldr	r3, [r3, #0]
    6686:	2b01      	cmp	r3, #1
    6688:	d907      	bls.n	669a <bt_generic_le+0x176>
			status |= DMA_OVERFLOW;
    668a:	4b5b      	ldr	r3, [pc, #364]	; (67f8 <bt_generic_le+0x2d4>)
    668c:	781b      	ldrb	r3, [r3, #0]
    668e:	b2db      	uxtb	r3, r3
    6690:	f043 0301 	orr.w	r3, r3, #1
    6694:	b2da      	uxtb	r2, r3
    6696:	4b58      	ldr	r3, [pc, #352]	; (67f8 <bt_generic_le+0x2d4>)
    6698:	701a      	strb	r2, [r3, #0]

		rssi_iir_update();
    669a:	f7fd fea7 	bl	43ec <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    669e:	4b50      	ldr	r3, [pc, #320]	; (67e0 <bt_generic_le+0x2bc>)
    66a0:	781b      	ldrb	r3, [r3, #0]
    66a2:	b2db      	uxtb	r3, r3
    66a4:	2b00      	cmp	r3, #0
    66a6:	d103      	bne.n	66b0 <bt_generic_le+0x18c>
    66a8:	4b54      	ldr	r3, [pc, #336]	; (67fc <bt_generic_le+0x2d8>)
    66aa:	781b      	ldrb	r3, [r3, #0]
    66ac:	2b00      	cmp	r3, #0
    66ae:	d00c      	beq.n	66ca <bt_generic_le+0x1a6>
			status |= CS_TRIGGER;
    66b0:	4b51      	ldr	r3, [pc, #324]	; (67f8 <bt_generic_le+0x2d4>)
    66b2:	781b      	ldrb	r3, [r3, #0]
    66b4:	b2db      	uxtb	r3, r3
    66b6:	f043 0308 	orr.w	r3, r3, #8
    66ba:	b2da      	uxtb	r2, r3
    66bc:	4b4e      	ldr	r3, [pc, #312]	; (67f8 <bt_generic_le+0x2d4>)
    66be:	701a      	strb	r2, [r3, #0]
			hold = CS_HOLD_TIME;
    66c0:	2302      	movs	r3, #2
    66c2:	77fb      	strb	r3, [r7, #31]
			cs_trigger = 0;
    66c4:	4b46      	ldr	r3, [pc, #280]	; (67e0 <bt_generic_le+0x2bc>)
    66c6:	2200      	movs	r2, #0
    66c8:	701a      	strb	r2, [r3, #0]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    66ca:	4b4d      	ldr	r3, [pc, #308]	; (6800 <bt_generic_le+0x2dc>)
    66cc:	781b      	ldrb	r3, [r3, #0]
    66ce:	b25a      	sxtb	r2, r3
    66d0:	4b44      	ldr	r3, [pc, #272]	; (67e4 <bt_generic_le+0x2c0>)
    66d2:	781b      	ldrb	r3, [r3, #0]
    66d4:	b25b      	sxtb	r3, r3
    66d6:	3336      	adds	r3, #54	; 0x36
    66d8:	429a      	cmp	r2, r3
    66da:	db09      	blt.n	66f0 <bt_generic_le+0x1cc>
			status |= RSSI_TRIGGER;
    66dc:	4b46      	ldr	r3, [pc, #280]	; (67f8 <bt_generic_le+0x2d4>)
    66de:	781b      	ldrb	r3, [r3, #0]
    66e0:	b2db      	uxtb	r3, r3
    66e2:	f043 0310 	orr.w	r3, r3, #16
    66e6:	b2da      	uxtb	r2, r3
    66e8:	4b43      	ldr	r3, [pc, #268]	; (67f8 <bt_generic_le+0x2d4>)
    66ea:	701a      	strb	r2, [r3, #0]
			hold = CS_HOLD_TIME;
    66ec:	2302      	movs	r3, #2
    66ee:	77fb      	strb	r3, [r7, #31]
		}

		/* Send a packet once in a while (6.25 Hz) to keep
		 * host USB reads from timing out. */
		if (keepalive_trigger) {
    66f0:	4b44      	ldr	r3, [pc, #272]	; (6804 <bt_generic_le+0x2e0>)
    66f2:	781b      	ldrb	r3, [r3, #0]
    66f4:	b2db      	uxtb	r3, r3
    66f6:	2b00      	cmp	r3, #0
    66f8:	d007      	beq.n	670a <bt_generic_le+0x1e6>
			if (hold == 0)
    66fa:	7ffb      	ldrb	r3, [r7, #31]
    66fc:	2b00      	cmp	r3, #0
    66fe:	d101      	bne.n	6704 <bt_generic_le+0x1e0>
				hold = 1;
    6700:	2301      	movs	r3, #1
    6702:	77fb      	strb	r3, [r7, #31]
			keepalive_trigger = 0;
    6704:	4b3f      	ldr	r3, [pc, #252]	; (6804 <bt_generic_le+0x2e0>)
    6706:	2200      	movs	r2, #0
    6708:	701a      	strb	r2, [r3, #0]
		}

		/* Hold expired? Ignore data. */
		if (hold == 0) {
    670a:	7ffb      	ldrb	r3, [r7, #31]
    670c:	2b00      	cmp	r3, #0
    670e:	d100      	bne.n	6712 <bt_generic_le+0x1ee>
			goto rx_continue;
    6710:	e03d      	b.n	678e <bt_generic_le+0x26a>
		}
		hold--;
    6712:	7ffb      	ldrb	r3, [r7, #31]
    6714:	3b01      	subs	r3, #1
    6716:	77fb      	strb	r3, [r7, #31]

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    6718:	483b      	ldr	r0, [pc, #236]	; (6808 <bt_generic_le+0x2e4>)
    671a:	493c      	ldr	r1, [pc, #240]	; (680c <bt_generic_le+0x2e8>)
    671c:	f44f 72c8 	mov.w	r2, #400	; 0x190
    6720:	f004 fd0c 	bl	b13c <memcpy>

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    6724:	2300      	movs	r3, #0
    6726:	61bb      	str	r3, [r7, #24]
    6728:	e025      	b.n	6776 <bt_generic_le+0x252>
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    672a:	2300      	movs	r3, #0
    672c:	617b      	str	r3, [r7, #20]
    672e:	e01c      	b.n	676a <bt_generic_le+0x246>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    6730:	69bb      	ldr	r3, [r7, #24]
    6732:	3332      	adds	r3, #50	; 0x32
    6734:	00da      	lsls	r2, r3, #3
    6736:	697b      	ldr	r3, [r7, #20]
    6738:	4413      	add	r3, r2
    673a:	4a2e      	ldr	r2, [pc, #184]	; (67f4 <bt_generic_le+0x2d0>)
    673c:	6811      	ldr	r1, [r2, #0]
    673e:	69ba      	ldr	r2, [r7, #24]
    6740:	440a      	add	r2, r1
    6742:	7812      	ldrb	r2, [r2, #0]
    6744:	09d2      	lsrs	r2, r2, #7
    6746:	b2d1      	uxtb	r1, r2
    6748:	4a2f      	ldr	r2, [pc, #188]	; (6808 <bt_generic_le+0x2e4>)
    674a:	54d1      	strb	r1, [r2, r3]
				idle_rxbuf[i] <<= 1;
    674c:	4b29      	ldr	r3, [pc, #164]	; (67f4 <bt_generic_le+0x2d0>)
    674e:	681a      	ldr	r2, [r3, #0]
    6750:	69bb      	ldr	r3, [r7, #24]
    6752:	4413      	add	r3, r2
    6754:	4a27      	ldr	r2, [pc, #156]	; (67f4 <bt_generic_le+0x2d0>)
    6756:	6811      	ldr	r1, [r2, #0]
    6758:	69ba      	ldr	r2, [r7, #24]
    675a:	440a      	add	r2, r1
    675c:	7812      	ldrb	r2, [r2, #0]
    675e:	0052      	lsls	r2, r2, #1
    6760:	b2d2      	uxtb	r2, r2
    6762:	701a      	strb	r2, [r3, #0]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    6764:	697b      	ldr	r3, [r7, #20]
    6766:	3301      	adds	r3, #1
    6768:	617b      	str	r3, [r7, #20]
    676a:	697b      	ldr	r3, [r7, #20]
    676c:	2b07      	cmp	r3, #7
    676e:	dddf      	ble.n	6730 <bt_generic_le+0x20c>

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    6770:	69bb      	ldr	r3, [r7, #24]
    6772:	3301      	adds	r3, #1
    6774:	61bb      	str	r3, [r7, #24]
    6776:	69bb      	ldr	r3, [r7, #24]
    6778:	2b31      	cmp	r3, #49	; 0x31
    677a:	ddd6      	ble.n	672a <bt_generic_le+0x206>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
			}
		}

		int ret = data_cb(unpacked);
    677c:	4b24      	ldr	r3, [pc, #144]	; (6810 <bt_generic_le+0x2ec>)
    677e:	681b      	ldr	r3, [r3, #0]
    6780:	4821      	ldr	r0, [pc, #132]	; (6808 <bt_generic_le+0x2e4>)
    6782:	4798      	blx	r3
    6784:	60b8      	str	r0, [r7, #8]
		if (!ret) break;
    6786:	68bb      	ldr	r3, [r7, #8]
    6788:	2b00      	cmp	r3, #0
    678a:	d100      	bne.n	678e <bt_generic_le+0x26a>
    678c:	e00c      	b.n	67a8 <bt_generic_le+0x284>

	rx_continue:
		rx_tc = 0;
    678e:	4b16      	ldr	r3, [pc, #88]	; (67e8 <bt_generic_le+0x2c4>)
    6790:	2200      	movs	r2, #0
    6792:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    6794:	4b15      	ldr	r3, [pc, #84]	; (67ec <bt_generic_le+0x2c8>)
    6796:	2200      	movs	r2, #0
    6798:	601a      	str	r2, [r3, #0]

	cs_trigger_enable();

	hold = 0;

	while (requested_mode == active_mode) {
    679a:	4b1e      	ldr	r3, [pc, #120]	; (6814 <bt_generic_le+0x2f0>)
    679c:	781b      	ldrb	r3, [r3, #0]
    679e:	b2db      	uxtb	r3, r3
    67a0:	79fa      	ldrb	r2, [r7, #7]
    67a2:	429a      	cmp	r2, r3
    67a4:	f43f aee3 	beq.w	656e <bt_generic_le+0x4a>
		rx_tc = 0;
		rx_err = 0;
	}

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    67a8:	4b1b      	ldr	r3, [pc, #108]	; (6818 <bt_generic_le+0x2f4>)
    67aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    67ae:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    67b0:	f7ff f9c0 	bl	5b34 <cc2400_idle>
	dio_ssp_stop();
    67b4:	f7ff f95a 	bl	5a6c <dio_ssp_stop>
	cs_trigger_disable();
    67b8:	f7fe f870 	bl	489c <cs_trigger_disable>
}
    67bc:	3720      	adds	r7, #32
    67be:	46bd      	mov	sp, r7
    67c0:	bd80      	pop	{r7, pc}
    67c2:	bf00      	nop
    67c4:	10000a42 	.word	0x10000a42
    67c8:	10000a3e 	.word	0x10000a3e
    67cc:	e000e100 	.word	0xe000e100
    67d0:	2009c03c 	.word	0x2009c03c
    67d4:	10000a44 	.word	0x10000a44
    67d8:	1000049c 	.word	0x1000049c
    67dc:	1000097d 	.word	0x1000097d
    67e0:	100010b0 	.word	0x100010b0
    67e4:	1000044d 	.word	0x1000044d
    67e8:	10000b00 	.word	0x10000b00
    67ec:	100010ac 	.word	0x100010ac
    67f0:	10000450 	.word	0x10000450
    67f4:	10000454 	.word	0x10000454
    67f8:	10000a48 	.word	0x10000a48
    67fc:	1000097e 	.word	0x1000097e
    6800:	10000b04 	.word	0x10000b04
    6804:	10000be0 	.word	0x10000be0
    6808:	10000d00 	.word	0x10000d00
    680c:	10000e90 	.word	0x10000e90
    6810:	10000998 	.word	0x10000998
    6814:	10000a3f 	.word	0x10000a3f
    6818:	e000e180 	.word	0xe000e180

0000681c <bt_le_sync>:


void bt_le_sync(u8 active_mode)
{
    681c:	b590      	push	{r4, r7, lr}
    681e:	b09b      	sub	sp, #108	; 0x6c
    6820:	af00      	add	r7, sp, #0
    6822:	4603      	mov	r3, r0
    6824:	71fb      	strb	r3, [r7, #7]
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
    6826:	4b87      	ldr	r3, [pc, #540]	; (6a44 <bt_le_sync+0x228>)
    6828:	2201      	movs	r2, #1
    682a:	701a      	strb	r2, [r3, #0]
	mode = active_mode;
    682c:	4a86      	ldr	r2, [pc, #536]	; (6a48 <bt_le_sync+0x22c>)
    682e:	79fb      	ldrb	r3, [r7, #7]
    6830:	7013      	strb	r3, [r2, #0]

	le.link_state = LINK_LISTENING;
    6832:	4b86      	ldr	r3, [pc, #536]	; (6a4c <bt_le_sync+0x230>)
    6834:	2201      	movs	r2, #1
    6836:	751a      	strb	r2, [r3, #20]

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    6838:	4b85      	ldr	r3, [pc, #532]	; (6a50 <bt_le_sync+0x234>)
    683a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    683e:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    6840:	4b84      	ldr	r3, [pc, #528]	; (6a54 <bt_le_sync+0x238>)
    6842:	2210      	movs	r2, #16
    6844:	601a      	str	r2, [r3, #0]

	queue_init();
    6846:	f002 f815 	bl	8874 <queue_init>
	dio_ssp_init();
    684a:	f003 f9bb 	bl	9bc4 <dio_ssp_init>
	dma_init_le();
    684e:	f7fe ff73 	bl	5738 <dma_init_le>
	dio_ssp_start();
    6852:	f7ff f8db 	bl	5a0c <dio_ssp_start>

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address
    6856:	4b7d      	ldr	r3, [pc, #500]	; (6a4c <bt_le_sync+0x230>)
    6858:	681b      	ldr	r3, [r3, #0]
    685a:	4618      	mov	r0, r3
    685c:	f003 f8b2 	bl	99c4 <rbit>
    6860:	4603      	mov	r3, r0
    6862:	4618      	mov	r0, r3
    6864:	f7ff f9ec 	bl	5c40 <cc2400_rx_sync>

	while (requested_mode == active_mode) {
    6868:	e247      	b.n	6cfa <bt_le_sync+0x4de>
		if (requested_channel != 0) {
    686a:	4b7b      	ldr	r3, [pc, #492]	; (6a58 <bt_le_sync+0x23c>)
    686c:	881b      	ldrh	r3, [r3, #0]
    686e:	b29b      	uxth	r3, r3
    6870:	2b00      	cmp	r3, #0
    6872:	d029      	beq.n	68c8 <bt_le_sync+0xac>
			cc2400_strobe(SRFOFF);
    6874:	2064      	movs	r0, #100	; 0x64
    6876:	f003 fb39 	bl	9eec <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    687a:	bf00      	nop
    687c:	f003 fb2c 	bl	9ed8 <cc2400_status>
    6880:	4603      	mov	r3, r0
    6882:	f003 0304 	and.w	r3, r3, #4
    6886:	2b00      	cmp	r3, #0
    6888:	d1f8      	bne.n	687c <bt_le_sync+0x60>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    688a:	4b74      	ldr	r3, [pc, #464]	; (6a5c <bt_le_sync+0x240>)
    688c:	881b      	ldrh	r3, [r3, #0]
    688e:	b29b      	uxth	r3, r3
    6890:	3b01      	subs	r3, #1
    6892:	b29b      	uxth	r3, r3
    6894:	2002      	movs	r0, #2
    6896:	4619      	mov	r1, r3
    6898:	f003 fa66 	bl	9d68 <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    689c:	2061      	movs	r0, #97	; 0x61
    689e:	f003 fb25 	bl	9eec <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    68a2:	bf00      	nop
    68a4:	f003 fb18 	bl	9ed8 <cc2400_status>
    68a8:	4603      	mov	r3, r0
    68aa:	f003 0304 	and.w	r3, r3, #4
    68ae:	2b00      	cmp	r3, #0
    68b0:	d0f8      	beq.n	68a4 <bt_le_sync+0x88>

			/* RX mode */
			cc2400_strobe(SRX);
    68b2:	2062      	movs	r0, #98	; 0x62
    68b4:	f003 fb1a 	bl	9eec <cc2400_strobe>

			saved_request = requested_channel;
    68b8:	4b67      	ldr	r3, [pc, #412]	; (6a58 <bt_le_sync+0x23c>)
    68ba:	881b      	ldrh	r3, [r3, #0]
    68bc:	b29a      	uxth	r2, r3
    68be:	4b68      	ldr	r3, [pc, #416]	; (6a60 <bt_le_sync+0x244>)
    68c0:	801a      	strh	r2, [r3, #0]
			requested_channel = 0;
    68c2:	4b65      	ldr	r3, [pc, #404]	; (6a58 <bt_le_sync+0x23c>)
    68c4:	2200      	movs	r2, #0
    68c6:	801a      	strh	r2, [r3, #0]
		}

		RXLED_CLR;
    68c8:	4b62      	ldr	r3, [pc, #392]	; (6a54 <bt_le_sync+0x238>)
    68ca:	2210      	movs	r2, #16
    68cc:	601a      	str	r2, [r3, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    68ce:	f7fd fd3d 	bl	434c <rssi_reset>
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
    68d2:	bf00      	nop
    68d4:	4b63      	ldr	r3, [pc, #396]	; (6a64 <bt_le_sync+0x248>)
    68d6:	681b      	ldr	r3, [r3, #0]
    68d8:	2b00      	cmp	r3, #0
    68da:	d10e      	bne.n	68fa <bt_le_sync+0xde>
    68dc:	4b62      	ldr	r3, [pc, #392]	; (6a68 <bt_le_sync+0x24c>)
    68de:	681b      	ldr	r3, [r3, #0]
    68e0:	2b00      	cmp	r3, #0
    68e2:	d10a      	bne.n	68fa <bt_le_sync+0xde>
    68e4:	4b61      	ldr	r3, [pc, #388]	; (6a6c <bt_le_sync+0x250>)
    68e6:	781b      	ldrb	r3, [r3, #0]
    68e8:	b2db      	uxtb	r3, r3
    68ea:	2b00      	cmp	r3, #0
    68ec:	d105      	bne.n	68fa <bt_le_sync+0xde>
    68ee:	4b60      	ldr	r3, [pc, #384]	; (6a70 <bt_le_sync+0x254>)
    68f0:	781b      	ldrb	r3, [r3, #0]
    68f2:	b2db      	uxtb	r3, r3
    68f4:	79fa      	ldrb	r2, [r7, #7]
    68f6:	429a      	cmp	r2, r3
    68f8:	d0ec      	beq.n	68d4 <bt_le_sync+0xb8>
			;

		if (requested_mode != active_mode) {
    68fa:	4b5d      	ldr	r3, [pc, #372]	; (6a70 <bt_le_sync+0x254>)
    68fc:	781b      	ldrb	r3, [r3, #0]
    68fe:	b2db      	uxtb	r3, r3
    6900:	79fa      	ldrb	r2, [r7, #7]
    6902:	429a      	cmp	r2, r3
    6904:	d000      	beq.n	6908 <bt_le_sync+0xec>
			goto cleanup;
    6906:	e1ff      	b.n	6d08 <bt_le_sync+0x4ec>
		}

		if (rx_err) {
    6908:	4b57      	ldr	r3, [pc, #348]	; (6a68 <bt_le_sync+0x24c>)
    690a:	681b      	ldr	r3, [r3, #0]
    690c:	2b00      	cmp	r3, #0
    690e:	d007      	beq.n	6920 <bt_le_sync+0x104>
			status |= DMA_ERROR;
    6910:	4b58      	ldr	r3, [pc, #352]	; (6a74 <bt_le_sync+0x258>)
    6912:	781b      	ldrb	r3, [r3, #0]
    6914:	b2db      	uxtb	r3, r3
    6916:	f043 0302 	orr.w	r3, r3, #2
    691a:	b2da      	uxtb	r2, r3
    691c:	4b55      	ldr	r3, [pc, #340]	; (6a74 <bt_le_sync+0x258>)
    691e:	701a      	strb	r2, [r3, #0]
		}

		if (do_hop)
    6920:	4b52      	ldr	r3, [pc, #328]	; (6a6c <bt_le_sync+0x250>)
    6922:	781b      	ldrb	r3, [r3, #0]
    6924:	b2db      	uxtb	r3, r3
    6926:	2b00      	cmp	r3, #0
    6928:	d000      	beq.n	692c <bt_le_sync+0x110>
			goto rx_flush;
    692a:	e12b      	b.n	6b84 <bt_le_sync+0x368>

		/* No DMA transfer? */
		if (!rx_tc)
    692c:	4b4d      	ldr	r3, [pc, #308]	; (6a64 <bt_le_sync+0x248>)
    692e:	681b      	ldr	r3, [r3, #0]
    6930:	2b00      	cmp	r3, #0
    6932:	d100      	bne.n	6936 <bt_le_sync+0x11a>
    6934:	e1e1      	b.n	6cfa <bt_le_sync+0x4de>

		/////////////////////
		// process the packet

		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
    6936:	f107 0308 	add.w	r3, r7, #8
    693a:	65fb      	str	r3, [r7, #92]	; 0x5c
		packet[0] = le.access_address;
    693c:	4b43      	ldr	r3, [pc, #268]	; (6a4c <bt_le_sync+0x230>)
    693e:	681b      	ldr	r3, [r3, #0]
    6940:	60bb      	str	r3, [r7, #8]

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    6942:	4b46      	ldr	r3, [pc, #280]	; (6a5c <bt_le_sync+0x240>)
    6944:	881b      	ldrh	r3, [r3, #0]
    6946:	b29b      	uxth	r3, r3
    6948:	b2db      	uxtb	r3, r3
    694a:	3b62      	subs	r3, #98	; 0x62
    694c:	b2db      	uxtb	r3, r3
    694e:	4618      	mov	r0, r3
    6950:	f001 fe10 	bl	8574 <btle_channel_index>
    6954:	4603      	mov	r3, r0
    6956:	461a      	mov	r2, r3
    6958:	4613      	mov	r3, r2
    695a:	005b      	lsls	r3, r3, #1
    695c:	4413      	add	r3, r2
    695e:	011b      	lsls	r3, r3, #4
    6960:	4a45      	ldr	r2, [pc, #276]	; (6a78 <bt_le_sync+0x25c>)
    6962:	4413      	add	r3, r2
    6964:	65bb      	str	r3, [r7, #88]	; 0x58
		for (i = 0; i < 4; i+= 4) {
    6966:	2300      	movs	r3, #0
    6968:	667b      	str	r3, [r7, #100]	; 0x64
    696a:	e034      	b.n	69d6 <bt_le_sync+0x1ba>
			uint32_t v = rxbuf1[i+0] << 24
    696c:	4a43      	ldr	r2, [pc, #268]	; (6a7c <bt_le_sync+0x260>)
    696e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6970:	4413      	add	r3, r2
    6972:	781b      	ldrb	r3, [r3, #0]
    6974:	061a      	lsls	r2, r3, #24
					   | rxbuf1[i+1] << 16
    6976:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6978:	3301      	adds	r3, #1
    697a:	4940      	ldr	r1, [pc, #256]	; (6a7c <bt_le_sync+0x260>)
    697c:	5ccb      	ldrb	r3, [r1, r3]
    697e:	041b      	lsls	r3, r3, #16
    6980:	431a      	orrs	r2, r3
					   | rxbuf1[i+2] << 8
    6982:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6984:	3302      	adds	r3, #2
    6986:	493d      	ldr	r1, [pc, #244]	; (6a7c <bt_le_sync+0x260>)
    6988:	5ccb      	ldrb	r3, [r1, r3]
    698a:	021b      	lsls	r3, r3, #8
    698c:	4313      	orrs	r3, r2
					   | rxbuf1[i+3] << 0;
    698e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    6990:	3203      	adds	r2, #3
    6992:	493a      	ldr	r1, [pc, #232]	; (6a7c <bt_le_sync+0x260>)
    6994:	5c8a      	ldrb	r2, [r1, r2]
    6996:	4313      	orrs	r3, r2
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
    6998:	657b      	str	r3, [r7, #84]	; 0x54
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    699a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    699c:	2b00      	cmp	r3, #0
    699e:	da00      	bge.n	69a2 <bt_le_sync+0x186>
    69a0:	3303      	adds	r3, #3
    69a2:	109b      	asrs	r3, r3, #2
    69a4:	1c5c      	adds	r4, r3, #1
    69a6:	6d78      	ldr	r0, [r7, #84]	; 0x54
    69a8:	f003 f80c 	bl	99c4 <rbit>
    69ac:	4601      	mov	r1, r0
    69ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    69b0:	2b00      	cmp	r3, #0
    69b2:	da00      	bge.n	69b6 <bt_le_sync+0x19a>
    69b4:	3303      	adds	r3, #3
    69b6:	109b      	asrs	r3, r3, #2
    69b8:	009b      	lsls	r3, r3, #2
    69ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
    69bc:	4413      	add	r3, r2
    69be:	681b      	ldr	r3, [r3, #0]
    69c0:	ea81 0203 	eor.w	r2, r1, r3
    69c4:	00a3      	lsls	r3, r4, #2
    69c6:	f107 0168 	add.w	r1, r7, #104	; 0x68
    69ca:	440b      	add	r3, r1
    69cc:	f843 2c60 	str.w	r2, [r3, #-96]
		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
    69d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    69d2:	3304      	adds	r3, #4
    69d4:	667b      	str	r3, [r7, #100]	; 0x64
    69d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    69d8:	2b03      	cmp	r3, #3
    69da:	ddc7      	ble.n	696c <bt_le_sync+0x150>
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		unsigned len = (p[5] & 0x3f) + 2;
    69dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    69de:	3305      	adds	r3, #5
    69e0:	781b      	ldrb	r3, [r3, #0]
    69e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    69e6:	3302      	adds	r3, #2
    69e8:	653b      	str	r3, [r7, #80]	; 0x50
		if (len > 39)
    69ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    69ec:	2b27      	cmp	r3, #39	; 0x27
    69ee:	d900      	bls.n	69f2 <bt_le_sync+0x1d6>
			goto rx_flush;
    69f0:	e0c8      	b.n	6b84 <bt_le_sync+0x368>

		// transfer the minimum number of bytes from the CC2400
		// this allows us enough time to resume RX for subsequent packets on the same channel
		unsigned total_transfers = ((len + 3) + 4 - 1) / 4;
    69f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    69f4:	3306      	adds	r3, #6
    69f6:	089b      	lsrs	r3, r3, #2
    69f8:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (total_transfers < 11) {
    69fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    69fc:	2b0a      	cmp	r3, #10
    69fe:	d80d      	bhi.n	6a1c <bt_le_sync+0x200>
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0)
    6a00:	bf00      	nop
    6a02:	4b1f      	ldr	r3, [pc, #124]	; (6a80 <bt_le_sync+0x264>)
    6a04:	681a      	ldr	r2, [r3, #0]
    6a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6a08:	009b      	lsls	r3, r3, #2
    6a0a:	491c      	ldr	r1, [pc, #112]	; (6a7c <bt_le_sync+0x260>)
    6a0c:	440b      	add	r3, r1
    6a0e:	429a      	cmp	r2, r3
    6a10:	d20f      	bcs.n	6a32 <bt_le_sync+0x216>
    6a12:	4b15      	ldr	r3, [pc, #84]	; (6a68 <bt_le_sync+0x24c>)
    6a14:	681b      	ldr	r3, [r3, #0]
    6a16:	2b00      	cmp	r3, #0
    6a18:	d0f3      	beq.n	6a02 <bt_le_sync+0x1e6>
    6a1a:	e00a      	b.n	6a32 <bt_le_sync+0x216>
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
    6a1c:	bf00      	nop
    6a1e:	4b19      	ldr	r3, [pc, #100]	; (6a84 <bt_le_sync+0x268>)
    6a20:	681b      	ldr	r3, [r3, #0]
    6a22:	f003 0301 	and.w	r3, r3, #1
    6a26:	2b00      	cmp	r3, #0
    6a28:	d003      	beq.n	6a32 <bt_le_sync+0x216>
    6a2a:	4b0f      	ldr	r3, [pc, #60]	; (6a68 <bt_le_sync+0x24c>)
    6a2c:	681b      	ldr	r3, [r3, #0]
    6a2e:	2b00      	cmp	r3, #0
    6a30:	d0f5      	beq.n	6a1e <bt_le_sync+0x202>
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6a32:	4a15      	ldr	r2, [pc, #84]	; (6a88 <bt_le_sync+0x26c>)
    6a34:	4b14      	ldr	r3, [pc, #80]	; (6a88 <bt_le_sync+0x26c>)
    6a36:	681b      	ldr	r3, [r3, #0]
    6a38:	f023 0301 	bic.w	r3, r3, #1
    6a3c:	6013      	str	r3, [r2, #0]

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    6a3e:	2304      	movs	r3, #4
    6a40:	667b      	str	r3, [r7, #100]	; 0x64
    6a42:	e058      	b.n	6af6 <bt_le_sync+0x2da>
    6a44:	10000a42 	.word	0x10000a42
    6a48:	10000a3e 	.word	0x10000a3e
    6a4c:	10000458 	.word	0x10000458
    6a50:	e000e100 	.word	0xe000e100
    6a54:	2009c03c 	.word	0x2009c03c
    6a58:	10000a44 	.word	0x10000a44
    6a5c:	1000049c 	.word	0x1000049c
    6a60:	10000a46 	.word	0x10000a46
    6a64:	10000b00 	.word	0x10000b00
    6a68:	100010ac 	.word	0x100010ac
    6a6c:	1000097d 	.word	0x1000097d
    6a70:	10000a3f 	.word	0x10000a3f
    6a74:	10000a48 	.word	0x10000a48
    6a78:	0000b388 	.word	0x0000b388
    6a7c:	10001078 	.word	0x10001078
    6a80:	50004104 	.word	0x50004104
    6a84:	50004110 	.word	0x50004110
    6a88:	40030024 	.word	0x40030024
			uint32_t v = rxbuf1[i+0] << 24
    6a8c:	4aa5      	ldr	r2, [pc, #660]	; (6d24 <bt_le_sync+0x508>)
    6a8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6a90:	4413      	add	r3, r2
    6a92:	781b      	ldrb	r3, [r3, #0]
    6a94:	061a      	lsls	r2, r3, #24
					   | rxbuf1[i+1] << 16
    6a96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6a98:	3301      	adds	r3, #1
    6a9a:	49a2      	ldr	r1, [pc, #648]	; (6d24 <bt_le_sync+0x508>)
    6a9c:	5ccb      	ldrb	r3, [r1, r3]
    6a9e:	041b      	lsls	r3, r3, #16
    6aa0:	431a      	orrs	r2, r3
				       | rxbuf1[i+2] << 8
    6aa2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6aa4:	3302      	adds	r3, #2
    6aa6:	499f      	ldr	r1, [pc, #636]	; (6d24 <bt_le_sync+0x508>)
    6aa8:	5ccb      	ldrb	r3, [r1, r3]
    6aaa:	021b      	lsls	r3, r3, #8
    6aac:	4313      	orrs	r3, r2
					   | rxbuf1[i+3] << 0;
    6aae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    6ab0:	3203      	adds	r2, #3
    6ab2:	499c      	ldr	r1, [pc, #624]	; (6d24 <bt_le_sync+0x508>)
    6ab4:	5c8a      	ldrb	r2, [r1, r2]
    6ab6:	4313      	orrs	r3, r2
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    6ab8:	64bb      	str	r3, [r7, #72]	; 0x48
					   | rxbuf1[i+1] << 16
				       | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    6aba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6abc:	2b00      	cmp	r3, #0
    6abe:	da00      	bge.n	6ac2 <bt_le_sync+0x2a6>
    6ac0:	3303      	adds	r3, #3
    6ac2:	109b      	asrs	r3, r3, #2
    6ac4:	1c5c      	adds	r4, r3, #1
    6ac6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    6ac8:	f002 ff7c 	bl	99c4 <rbit>
    6acc:	4601      	mov	r1, r0
    6ace:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6ad0:	2b00      	cmp	r3, #0
    6ad2:	da00      	bge.n	6ad6 <bt_le_sync+0x2ba>
    6ad4:	3303      	adds	r3, #3
    6ad6:	109b      	asrs	r3, r3, #2
    6ad8:	009b      	lsls	r3, r3, #2
    6ada:	6dba      	ldr	r2, [r7, #88]	; 0x58
    6adc:	4413      	add	r3, r2
    6ade:	681b      	ldr	r3, [r3, #0]
    6ae0:	ea81 0203 	eor.w	r2, r1, r3
    6ae4:	00a3      	lsls	r3, r4, #2
    6ae6:	f107 0168 	add.w	r1, r7, #104	; 0x68
    6aea:	440b      	add	r3, r1
    6aec:	f843 2c60 	str.w	r2, [r3, #-96]
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    6af0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6af2:	3304      	adds	r3, #4
    6af4:	667b      	str	r3, [r7, #100]	; 0x64
    6af6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6af8:	2b2b      	cmp	r3, #43	; 0x2b
    6afa:	ddc7      	ble.n	6a8c <bt_le_sync+0x270>
				       | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
    6afc:	4b8a      	ldr	r3, [pc, #552]	; (6d28 <bt_le_sync+0x50c>)
    6afe:	691b      	ldr	r3, [r3, #16]
    6b00:	2b00      	cmp	r3, #0
    6b02:	d023      	beq.n	6b4c <bt_le_sync+0x330>
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    6b04:	4b88      	ldr	r3, [pc, #544]	; (6d28 <bt_le_sync+0x50c>)
    6b06:	68d9      	ldr	r1, [r3, #12]
    6b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    6b0a:	1d1a      	adds	r2, r3, #4
    6b0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6b0e:	4608      	mov	r0, r1
    6b10:	4611      	mov	r1, r2
    6b12:	461a      	mov	r2, r3
    6b14:	f001 fe32 	bl	877c <btle_crcgen_lut>
    6b18:	6478      	str	r0, [r7, #68]	; 0x44
			u32 wire_crc = (p[4+len+2] << 16)
    6b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6b1c:	3306      	adds	r3, #6
    6b1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    6b20:	4413      	add	r3, r2
    6b22:	781b      	ldrb	r3, [r3, #0]
    6b24:	041a      	lsls	r2, r3, #16
						 | (p[4+len+1] << 8)
    6b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6b28:	3305      	adds	r3, #5
    6b2a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    6b2c:	440b      	add	r3, r1
    6b2e:	781b      	ldrb	r3, [r3, #0]
    6b30:	021b      	lsls	r3, r3, #8
    6b32:	4313      	orrs	r3, r2
						 | (p[4+len+0] << 0);
    6b34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    6b36:	3204      	adds	r2, #4
    6b38:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    6b3a:	440a      	add	r2, r1
    6b3c:	7812      	ldrb	r2, [r2, #0]
    6b3e:	4313      	orrs	r3, r2
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
			u32 wire_crc = (p[4+len+2] << 16)
    6b40:	643b      	str	r3, [r7, #64]	; 0x40
						 | (p[4+len+1] << 8)
						 | (p[4+len+0] << 0);
			if (calc_crc != wire_crc) // skip packets with a bad CRC
    6b42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6b46:	429a      	cmp	r2, r3
    6b48:	d000      	beq.n	6b4c <bt_le_sync+0x330>
				goto rx_flush;
    6b4a:	e01b      	b.n	6b84 <bt_le_sync+0x368>
		}


		RXLED_SET;
    6b4c:	4b77      	ldr	r3, [pc, #476]	; (6d2c <bt_le_sync+0x510>)
    6b4e:	2210      	movs	r2, #16
    6b50:	601a      	str	r2, [r3, #0]
		packet_cb((uint8_t *)packet);
    6b52:	4b77      	ldr	r3, [pc, #476]	; (6d30 <bt_le_sync+0x514>)
    6b54:	681b      	ldr	r3, [r3, #0]
    6b56:	f107 0208 	add.w	r2, r7, #8
    6b5a:	4610      	mov	r0, r2
    6b5c:	4798      	blx	r3
		enqueue(LE_PACKET, (uint8_t *)packet);
    6b5e:	f107 0308 	add.w	r3, r7, #8
    6b62:	2001      	movs	r0, #1
    6b64:	4619      	mov	r1, r3
    6b66:	f7fd fcd3 	bl	4510 <enqueue>
		le.last_packet = CLK100NS;
    6b6a:	4b72      	ldr	r3, [pc, #456]	; (6d34 <bt_le_sync+0x518>)
    6b6c:	681b      	ldr	r3, [r3, #0]
    6b6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6b72:	f640 4235 	movw	r2, #3125	; 0xc35
    6b76:	fb02 f203 	mul.w	r2, r2, r3
    6b7a:	4b6f      	ldr	r3, [pc, #444]	; (6d38 <bt_le_sync+0x51c>)
    6b7c:	681b      	ldr	r3, [r3, #0]
    6b7e:	4413      	add	r3, r2
    6b80:	4a69      	ldr	r2, [pc, #420]	; (6d28 <bt_le_sync+0x50c>)
    6b82:	6413      	str	r3, [r2, #64]	; 0x40

	rx_flush:
		cc2400_strobe(SFSON);
    6b84:	2061      	movs	r0, #97	; 0x61
    6b86:	f003 f9b1 	bl	9eec <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    6b8a:	bf00      	nop
    6b8c:	f003 f9a4 	bl	9ed8 <cc2400_status>
    6b90:	4603      	mov	r3, r0
    6b92:	f003 0304 	and.w	r3, r3, #4
    6b96:	2b00      	cmp	r3, #0
    6b98:	d0f8      	beq.n	6b8c <bt_le_sync+0x370>

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6b9a:	4a68      	ldr	r2, [pc, #416]	; (6d3c <bt_le_sync+0x520>)
    6b9c:	4b67      	ldr	r3, [pc, #412]	; (6d3c <bt_le_sync+0x520>)
    6b9e:	681b      	ldr	r3, [r3, #0]
    6ba0:	f023 0301 	bic.w	r3, r3, #1
    6ba4:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    6ba6:	e003      	b.n	6bb0 <bt_le_sync+0x394>
			u8 tmp = (u8)DIO_SSP_DR;
    6ba8:	4b65      	ldr	r3, [pc, #404]	; (6d40 <bt_le_sync+0x524>)
    6baa:	681b      	ldr	r3, [r3, #0]
    6bac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		cc2400_strobe(SFSON);
		while (!(cc2400_status() & FS_LOCK));

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		while (SSP1SR & SSPSR_RNE) {
    6bb0:	4b64      	ldr	r3, [pc, #400]	; (6d44 <bt_le_sync+0x528>)
    6bb2:	681b      	ldr	r3, [r3, #0]
    6bb4:	f003 0304 	and.w	r3, r3, #4
    6bb8:	2b00      	cmp	r3, #0
    6bba:	d1f5      	bne.n	6ba8 <bt_le_sync+0x38c>
			u8 tmp = (u8)DIO_SSP_DR;
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
    6bbc:	4b5d      	ldr	r3, [pc, #372]	; (6d34 <bt_le_sync+0x518>)
    6bbe:	681b      	ldr	r3, [r3, #0]
    6bc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6bc4:	f640 4235 	movw	r2, #3125	; 0xc35
    6bc8:	fb02 f203 	mul.w	r2, r2, r3
    6bcc:	4b5a      	ldr	r3, [pc, #360]	; (6d38 <bt_le_sync+0x51c>)
    6bce:	681b      	ldr	r3, [r3, #0]
    6bd0:	4413      	add	r3, r2
    6bd2:	663b      	str	r3, [r7, #96]	; 0x60
		if (now < le.last_packet)
    6bd4:	4b54      	ldr	r3, [pc, #336]	; (6d28 <bt_le_sync+0x50c>)
    6bd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    6bd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6bda:	429a      	cmp	r2, r3
    6bdc:	d905      	bls.n	6bea <bt_le_sync+0x3ce>
			now += 3276800000; // handle rollover
    6bde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6be0:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    6be4:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    6be8:	663b      	str	r3, [r7, #96]	; 0x60
		if  ( // timeout
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    6bea:	4b4f      	ldr	r3, [pc, #316]	; (6d28 <bt_le_sync+0x50c>)
    6bec:	7d1b      	ldrb	r3, [r3, #20]

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
			now += 3276800000; // handle rollover
		if  ( // timeout
    6bee:	2b03      	cmp	r3, #3
    6bf0:	d003      	beq.n	6bfa <bt_le_sync+0x3de>
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    6bf2:	4b4d      	ldr	r3, [pc, #308]	; (6d28 <bt_le_sync+0x50c>)
    6bf4:	7d1b      	ldrb	r3, [r3, #20]
    6bf6:	2b02      	cmp	r3, #2
    6bf8:	d106      	bne.n	6c08 <bt_le_sync+0x3ec>
			&& (now - le.last_packet > 50000000))
    6bfa:	4b4b      	ldr	r3, [pc, #300]	; (6d28 <bt_le_sync+0x50c>)
    6bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6bfe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    6c00:	1ad3      	subs	r3, r2, r3
    6c02:	4a51      	ldr	r2, [pc, #324]	; (6d48 <bt_le_sync+0x52c>)
    6c04:	4293      	cmp	r3, r2
    6c06:	d803      	bhi.n	6c10 <bt_le_sync+0x3f4>
			// jam finished
			|| (le_jam_count == 1)
    6c08:	4b50      	ldr	r3, [pc, #320]	; (6d4c <bt_le_sync+0x530>)
    6c0a:	681b      	ldr	r3, [r3, #0]
    6c0c:	2b01      	cmp	r3, #1
    6c0e:	d137      	bne.n	6c80 <bt_le_sync+0x464>
			)
		{
			reset_le();
    6c10:	f7ff fc2c 	bl	646c <reset_le>
			le_jam_count = 0;
    6c14:	4b4d      	ldr	r3, [pc, #308]	; (6d4c <bt_le_sync+0x530>)
    6c16:	2200      	movs	r2, #0
    6c18:	601a      	str	r2, [r3, #0]
			TXLED_CLR;
    6c1a:	4b4d      	ldr	r3, [pc, #308]	; (6d50 <bt_le_sync+0x534>)
    6c1c:	f44f 7280 	mov.w	r2, #256	; 0x100
    6c20:	601a      	str	r2, [r3, #0]

			if (jam_mode == JAM_ONCE) {
    6c22:	4b4c      	ldr	r3, [pc, #304]	; (6d54 <bt_le_sync+0x538>)
    6c24:	781b      	ldrb	r3, [r3, #0]
    6c26:	b2db      	uxtb	r3, r3
    6c28:	2b01      	cmp	r3, #1
    6c2a:	d106      	bne.n	6c3a <bt_le_sync+0x41e>
				jam_mode = JAM_NONE;
    6c2c:	4b49      	ldr	r3, [pc, #292]	; (6d54 <bt_le_sync+0x538>)
    6c2e:	2200      	movs	r2, #0
    6c30:	701a      	strb	r2, [r3, #0]
				requested_mode = MODE_IDLE;
    6c32:	4b49      	ldr	r3, [pc, #292]	; (6d58 <bt_le_sync+0x53c>)
    6c34:	2200      	movs	r2, #0
    6c36:	701a      	strb	r2, [r3, #0]
				goto cleanup;
    6c38:	e066      	b.n	6d08 <bt_le_sync+0x4ec>
			}

			// go back to promisc if the connection dies
			if (active_mode == MODE_BT_PROMISC_LE)
    6c3a:	79fb      	ldrb	r3, [r7, #7]
    6c3c:	2b0a      	cmp	r3, #10
    6c3e:	d101      	bne.n	6c44 <bt_le_sync+0x428>
				goto cleanup;
    6c40:	bf00      	nop
    6c42:	e061      	b.n	6d08 <bt_le_sync+0x4ec>

			le.link_state = LINK_LISTENING;
    6c44:	4b38      	ldr	r3, [pc, #224]	; (6d28 <bt_le_sync+0x50c>)
    6c46:	2201      	movs	r2, #1
    6c48:	751a      	strb	r2, [r3, #20]

			cc2400_strobe(SRFOFF);
    6c4a:	2064      	movs	r0, #100	; 0x64
    6c4c:	f003 f94e 	bl	9eec <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    6c50:	bf00      	nop
    6c52:	f003 f941 	bl	9ed8 <cc2400_status>
    6c56:	4603      	mov	r3, r0
    6c58:	f003 0304 	and.w	r3, r3, #4
    6c5c:	2b00      	cmp	r3, #0
    6c5e:	d1f8      	bne.n	6c52 <bt_le_sync+0x436>

			/* Retune */
			channel = saved_request != 0 ? saved_request : 2402;
    6c60:	4b3e      	ldr	r3, [pc, #248]	; (6d5c <bt_le_sync+0x540>)
    6c62:	881b      	ldrh	r3, [r3, #0]
    6c64:	b29b      	uxth	r3, r3
    6c66:	2b00      	cmp	r3, #0
    6c68:	d003      	beq.n	6c72 <bt_le_sync+0x456>
    6c6a:	4b3c      	ldr	r3, [pc, #240]	; (6d5c <bt_le_sync+0x540>)
    6c6c:	881b      	ldrh	r3, [r3, #0]
    6c6e:	b29b      	uxth	r3, r3
    6c70:	e001      	b.n	6c76 <bt_le_sync+0x45a>
    6c72:	f640 1362 	movw	r3, #2402	; 0x962
    6c76:	4a3a      	ldr	r2, [pc, #232]	; (6d60 <bt_le_sync+0x544>)
    6c78:	8013      	strh	r3, [r2, #0]
			restart_jamming = 1;
    6c7a:	4b3a      	ldr	r3, [pc, #232]	; (6d64 <bt_le_sync+0x548>)
    6c7c:	2201      	movs	r2, #1
    6c7e:	601a      	str	r2, [r3, #0]
		}

		cc2400_set(SYNCL, le.syncl);
    6c80:	4b29      	ldr	r3, [pc, #164]	; (6d28 <bt_le_sync+0x50c>)
    6c82:	88db      	ldrh	r3, [r3, #6]
    6c84:	202c      	movs	r0, #44	; 0x2c
    6c86:	4619      	mov	r1, r3
    6c88:	f003 f86e 	bl	9d68 <cc2400_set>
		cc2400_set(SYNCH, le.synch);
    6c8c:	4b26      	ldr	r3, [pc, #152]	; (6d28 <bt_le_sync+0x50c>)
    6c8e:	889b      	ldrh	r3, [r3, #4]
    6c90:	202d      	movs	r0, #45	; 0x2d
    6c92:	4619      	mov	r1, r3
    6c94:	f003 f868 	bl	9d68 <cc2400_set>

		if (do_hop)
    6c98:	4b33      	ldr	r3, [pc, #204]	; (6d68 <bt_le_sync+0x54c>)
    6c9a:	781b      	ldrb	r3, [r3, #0]
    6c9c:	b2db      	uxtb	r3, r3
    6c9e:	2b00      	cmp	r3, #0
    6ca0:	d001      	beq.n	6ca6 <bt_le_sync+0x48a>
			hop();
    6ca2:	f7ff fa05 	bl	60b0 <hop>

		// ♪ you can jam but you keep turning off the light ♪
		if (le_jam_count > 0) {
    6ca6:	4b29      	ldr	r3, [pc, #164]	; (6d4c <bt_le_sync+0x530>)
    6ca8:	681b      	ldr	r3, [r3, #0]
    6caa:	2b00      	cmp	r3, #0
    6cac:	dd07      	ble.n	6cbe <bt_le_sync+0x4a2>
			le_jam();
    6cae:	f7ff f9b5 	bl	601c <le_jam>
			--le_jam_count;
    6cb2:	4b26      	ldr	r3, [pc, #152]	; (6d4c <bt_le_sync+0x530>)
    6cb4:	681b      	ldr	r3, [r3, #0]
    6cb6:	3b01      	subs	r3, #1
    6cb8:	4a24      	ldr	r2, [pc, #144]	; (6d4c <bt_le_sync+0x530>)
    6cba:	6013      	str	r3, [r2, #0]
    6cbc:	e017      	b.n	6cee <bt_le_sync+0x4d2>
		} else {
			/* RX mode */
			dma_init_le();
    6cbe:	f7fe fd3b 	bl	5738 <dma_init_le>
			dio_ssp_start();
    6cc2:	f7fe fea3 	bl	5a0c <dio_ssp_start>

			if (restart_jamming) {
    6cc6:	4b27      	ldr	r3, [pc, #156]	; (6d64 <bt_le_sync+0x548>)
    6cc8:	681b      	ldr	r3, [r3, #0]
    6cca:	2b00      	cmp	r3, #0
    6ccc:	d00c      	beq.n	6ce8 <bt_le_sync+0x4cc>
				cc2400_rx_sync(rbit(le.access_address));
    6cce:	4b16      	ldr	r3, [pc, #88]	; (6d28 <bt_le_sync+0x50c>)
    6cd0:	681b      	ldr	r3, [r3, #0]
    6cd2:	4618      	mov	r0, r3
    6cd4:	f002 fe76 	bl	99c4 <rbit>
    6cd8:	4603      	mov	r3, r0
    6cda:	4618      	mov	r0, r3
    6cdc:	f7fe ffb0 	bl	5c40 <cc2400_rx_sync>
				restart_jamming = 0;
    6ce0:	4b20      	ldr	r3, [pc, #128]	; (6d64 <bt_le_sync+0x548>)
    6ce2:	2200      	movs	r2, #0
    6ce4:	601a      	str	r2, [r3, #0]
    6ce6:	e002      	b.n	6cee <bt_le_sync+0x4d2>
			} else {
				cc2400_strobe(SRX);
    6ce8:	2062      	movs	r0, #98	; 0x62
    6cea:	f003 f8ff 	bl	9eec <cc2400_strobe>
			}
		}

		rx_tc = 0;
    6cee:	4b1f      	ldr	r3, [pc, #124]	; (6d6c <bt_le_sync+0x550>)
    6cf0:	2200      	movs	r2, #0
    6cf2:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    6cf4:	4b1e      	ldr	r3, [pc, #120]	; (6d70 <bt_le_sync+0x554>)
    6cf6:	2200      	movs	r2, #0
    6cf8:	601a      	str	r2, [r3, #0]
	dma_init_le();
	dio_ssp_start();

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address

	while (requested_mode == active_mode) {
    6cfa:	4b17      	ldr	r3, [pc, #92]	; (6d58 <bt_le_sync+0x53c>)
    6cfc:	781b      	ldrb	r3, [r3, #0]
    6cfe:	b2db      	uxtb	r3, r3
    6d00:	79fa      	ldrb	r2, [r7, #7]
    6d02:	429a      	cmp	r2, r3
    6d04:	f43f adb1 	beq.w	686a <bt_le_sync+0x4e>
	}

cleanup:

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    6d08:	4b1a      	ldr	r3, [pc, #104]	; (6d74 <bt_le_sync+0x558>)
    6d0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6d0e:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    6d10:	f7fe ff10 	bl	5b34 <cc2400_idle>
	dio_ssp_stop();
    6d14:	f7fe feaa 	bl	5a6c <dio_ssp_stop>
	cs_trigger_disable();
    6d18:	f7fd fdc0 	bl	489c <cs_trigger_disable>
}
    6d1c:	376c      	adds	r7, #108	; 0x6c
    6d1e:	46bd      	mov	sp, r7
    6d20:	bd90      	pop	{r4, r7, pc}
    6d22:	bf00      	nop
    6d24:	10001078 	.word	0x10001078
    6d28:	10000458 	.word	0x10000458
    6d2c:	2009c038 	.word	0x2009c038
    6d30:	1000099c 	.word	0x1000099c
    6d34:	10000be4 	.word	0x10000be4
    6d38:	40004008 	.word	0x40004008
    6d3c:	40030024 	.word	0x40030024
    6d40:	40030008 	.word	0x40030008
    6d44:	4003000c 	.word	0x4003000c
    6d48:	02faf080 	.word	0x02faf080
    6d4c:	10000994 	.word	0x10000994
    6d50:	2009c03c 	.word	0x2009c03c
    6d54:	10000a40 	.word	0x10000a40
    6d58:	10000a3f 	.word	0x10000a3f
    6d5c:	10000a46 	.word	0x10000a46
    6d60:	1000049c 	.word	0x1000049c
    6d64:	10000a50 	.word	0x10000a50
    6d68:	1000097d 	.word	0x1000097d
    6d6c:	10000b00 	.word	0x10000b00
    6d70:	100010ac 	.word	0x100010ac
    6d74:	e000e180 	.word	0xe000e180

00006d78 <cb_follow_le>:



/* low energy connection following
 * follows a known AA around */
int cb_follow_le() {
    6d78:	b580      	push	{r7, lr}
    6d7a:	b08c      	sub	sp, #48	; 0x30
    6d7c:	af00      	add	r7, sp, #0
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];
    6d7e:	4b6c      	ldr	r3, [pc, #432]	; (6f30 <cb_follow_le+0x1b8>)
    6d80:	881b      	ldrh	r3, [r3, #0]
    6d82:	b29b      	uxth	r3, r3
    6d84:	b2db      	uxtb	r3, r3
    6d86:	3b62      	subs	r3, #98	; 0x62
    6d88:	b2db      	uxtb	r3, r3
    6d8a:	4618      	mov	r0, r3
    6d8c:	f001 fbf2 	bl	8574 <btle_channel_index>
    6d90:	4603      	mov	r3, r0
    6d92:	461a      	mov	r2, r3
    6d94:	4b67      	ldr	r3, [pc, #412]	; (6f34 <cb_follow_le+0x1bc>)
    6d96:	5c9b      	ldrb	r3, [r3, r2]
    6d98:	623b      	str	r3, [r7, #32]

	u32 access_address = 0;
    6d9a:	2300      	movs	r3, #0
    6d9c:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < 31; ++i) {
    6d9e:	2300      	movs	r3, #0
    6da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    6da2:	e00e      	b.n	6dc2 <cb_follow_le+0x4a>
		access_address >>= 1;
    6da4:	69fb      	ldr	r3, [r7, #28]
    6da6:	085b      	lsrs	r3, r3, #1
    6da8:	61fb      	str	r3, [r7, #28]
		access_address |= (unpacked[i] << 31);
    6daa:	4a63      	ldr	r2, [pc, #396]	; (6f38 <cb_follow_le+0x1c0>)
    6dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6dae:	4413      	add	r3, r2
    6db0:	781b      	ldrb	r3, [r3, #0]
    6db2:	07db      	lsls	r3, r3, #31
    6db4:	461a      	mov	r2, r3
    6db6:	69fb      	ldr	r3, [r7, #28]
    6db8:	4313      	orrs	r3, r2
    6dba:	61fb      	str	r3, [r7, #28]
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    6dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6dbe:	3301      	adds	r3, #1
    6dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    6dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6dc4:	2b1e      	cmp	r3, #30
    6dc6:	dded      	ble.n	6da4 <cb_follow_le+0x2c>
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    6dc8:	231f      	movs	r3, #31
    6dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    6dcc:	e0a6      	b.n	6f1c <cb_follow_le+0x1a4>
		access_address >>= 1;
    6dce:	69fb      	ldr	r3, [r7, #28]
    6dd0:	085b      	lsrs	r3, r3, #1
    6dd2:	61fb      	str	r3, [r7, #28]
		access_address |= (unpacked[i] << 31);
    6dd4:	4a58      	ldr	r2, [pc, #352]	; (6f38 <cb_follow_le+0x1c0>)
    6dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6dd8:	4413      	add	r3, r2
    6dda:	781b      	ldrb	r3, [r3, #0]
    6ddc:	07db      	lsls	r3, r3, #31
    6dde:	461a      	mov	r2, r3
    6de0:	69fb      	ldr	r3, [r7, #28]
    6de2:	4313      	orrs	r3, r2
    6de4:	61fb      	str	r3, [r7, #28]
		if (access_address == le.access_address) {
    6de6:	4b55      	ldr	r3, [pc, #340]	; (6f3c <cb_follow_le+0x1c4>)
    6de8:	681a      	ldr	r2, [r3, #0]
    6dea:	69fb      	ldr	r3, [r7, #28]
    6dec:	429a      	cmp	r2, r3
    6dee:	f040 8092 	bne.w	6f16 <cb_follow_le+0x19e>
			for (j = 0; j < 46; ++j) {
    6df2:	2300      	movs	r3, #0
    6df4:	62bb      	str	r3, [r7, #40]	; 0x28
    6df6:	e048      	b.n	6e8a <cb_follow_le+0x112>
				u8 byte = 0;
    6df8:	2300      	movs	r3, #0
    6dfa:	76fb      	strb	r3, [r7, #27]
				for (k = 0; k < 8; k++) {
    6dfc:	2300      	movs	r3, #0
    6dfe:	627b      	str	r3, [r7, #36]	; 0x24
    6e00:	e037      	b.n	6e72 <cb_follow_le+0xfa>
					int offset = k + (j * 8) + i - 31;
    6e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6e04:	00da      	lsls	r2, r3, #3
    6e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6e08:	441a      	add	r2, r3
    6e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6e0c:	4413      	add	r3, r2
    6e0e:	3b1f      	subs	r3, #31
    6e10:	613b      	str	r3, [r7, #16]
					if (offset >= DMA_SIZE*8*2) break;
    6e12:	693b      	ldr	r3, [r7, #16]
    6e14:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
    6e18:	db00      	blt.n	6e1c <cb_follow_le+0xa4>
    6e1a:	e02d      	b.n	6e78 <cb_follow_le+0x100>
					int bit = unpacked[offset];
    6e1c:	4a46      	ldr	r2, [pc, #280]	; (6f38 <cb_follow_le+0x1c0>)
    6e1e:	693b      	ldr	r3, [r7, #16]
    6e20:	4413      	add	r3, r2
    6e22:	781b      	ldrb	r3, [r3, #0]
    6e24:	617b      	str	r3, [r7, #20]
					if (j >= 4) { // unwhiten data bytes
    6e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6e28:	2b03      	cmp	r3, #3
    6e2a:	dd16      	ble.n	6e5a <cb_follow_le+0xe2>
						bit ^= whitening[idx];
    6e2c:	4a44      	ldr	r2, [pc, #272]	; (6f40 <cb_follow_le+0x1c8>)
    6e2e:	6a3b      	ldr	r3, [r7, #32]
    6e30:	4413      	add	r3, r2
    6e32:	781b      	ldrb	r3, [r3, #0]
    6e34:	461a      	mov	r2, r3
    6e36:	697b      	ldr	r3, [r7, #20]
    6e38:	4053      	eors	r3, r2
    6e3a:	617b      	str	r3, [r7, #20]
						idx = (idx + 1) % sizeof(whitening);
    6e3c:	6a3b      	ldr	r3, [r7, #32]
    6e3e:	3301      	adds	r3, #1
    6e40:	4619      	mov	r1, r3
    6e42:	4b40      	ldr	r3, [pc, #256]	; (6f44 <cb_follow_le+0x1cc>)
    6e44:	fba1 2303 	umull	r2, r3, r1, r3
    6e48:	1ac8      	subs	r0, r1, r3
    6e4a:	0840      	lsrs	r0, r0, #1
    6e4c:	4403      	add	r3, r0
    6e4e:	099a      	lsrs	r2, r3, #6
    6e50:	4613      	mov	r3, r2
    6e52:	01db      	lsls	r3, r3, #7
    6e54:	1a9b      	subs	r3, r3, r2
    6e56:	1aca      	subs	r2, r1, r3
    6e58:	623a      	str	r2, [r7, #32]
					}
					byte |= bit << k;
    6e5a:	697a      	ldr	r2, [r7, #20]
    6e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6e5e:	fa02 f303 	lsl.w	r3, r2, r3
    6e62:	b2da      	uxtb	r2, r3
    6e64:	7efb      	ldrb	r3, [r7, #27]
    6e66:	4313      	orrs	r3, r2
    6e68:	b2db      	uxtb	r3, r3
    6e6a:	76fb      	strb	r3, [r7, #27]
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    6e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6e6e:	3301      	adds	r3, #1
    6e70:	627b      	str	r3, [r7, #36]	; 0x24
    6e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6e74:	2b07      	cmp	r3, #7
    6e76:	ddc4      	ble.n	6e02 <cb_follow_le+0x8a>
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
				}
				idle_rxbuf[j] = byte;
    6e78:	4b33      	ldr	r3, [pc, #204]	; (6f48 <cb_follow_le+0x1d0>)
    6e7a:	681a      	ldr	r2, [r3, #0]
    6e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6e7e:	4413      	add	r3, r2
    6e80:	7efa      	ldrb	r2, [r7, #27]
    6e82:	701a      	strb	r2, [r3, #0]

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
    6e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6e86:	3301      	adds	r3, #1
    6e88:	62bb      	str	r3, [r7, #40]	; 0x28
    6e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6e8c:	2b2d      	cmp	r3, #45	; 0x2d
    6e8e:	ddb3      	ble.n	6df8 <cb_follow_le+0x80>
				}
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
    6e90:	4b2a      	ldr	r3, [pc, #168]	; (6f3c <cb_follow_le+0x1c4>)
    6e92:	691b      	ldr	r3, [r3, #16]
    6e94:	2b00      	cmp	r3, #0
    6e96:	d02e      	beq.n	6ef6 <cb_follow_le+0x17e>
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    6e98:	4b2b      	ldr	r3, [pc, #172]	; (6f48 <cb_follow_le+0x1d0>)
    6e9a:	681b      	ldr	r3, [r3, #0]
    6e9c:	3305      	adds	r3, #5
    6e9e:	781b      	ldrb	r3, [r3, #0]
    6ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6ea4:	3302      	adds	r3, #2
    6ea6:	60fb      	str	r3, [r7, #12]
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, idle_rxbuf + 4, len);
    6ea8:	4b24      	ldr	r3, [pc, #144]	; (6f3c <cb_follow_le+0x1c4>)
    6eaa:	68da      	ldr	r2, [r3, #12]
    6eac:	4b26      	ldr	r3, [pc, #152]	; (6f48 <cb_follow_le+0x1d0>)
    6eae:	681b      	ldr	r3, [r3, #0]
    6eb0:	3304      	adds	r3, #4
    6eb2:	4610      	mov	r0, r2
    6eb4:	4619      	mov	r1, r3
    6eb6:	68fa      	ldr	r2, [r7, #12]
    6eb8:	f001 fc60 	bl	877c <btle_crcgen_lut>
    6ebc:	60b8      	str	r0, [r7, #8]
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    6ebe:	4b22      	ldr	r3, [pc, #136]	; (6f48 <cb_follow_le+0x1d0>)
    6ec0:	681a      	ldr	r2, [r3, #0]
    6ec2:	68fb      	ldr	r3, [r7, #12]
    6ec4:	3306      	adds	r3, #6
    6ec6:	4413      	add	r3, r2
    6ec8:	781b      	ldrb	r3, [r3, #0]
    6eca:	041a      	lsls	r2, r3, #16
							 | (idle_rxbuf[4+len+1] << 8)
    6ecc:	4b1e      	ldr	r3, [pc, #120]	; (6f48 <cb_follow_le+0x1d0>)
    6ece:	6819      	ldr	r1, [r3, #0]
    6ed0:	68fb      	ldr	r3, [r7, #12]
    6ed2:	3305      	adds	r3, #5
    6ed4:	440b      	add	r3, r1
    6ed6:	781b      	ldrb	r3, [r3, #0]
    6ed8:	021b      	lsls	r3, r3, #8
    6eda:	4313      	orrs	r3, r2
							 |  idle_rxbuf[4+len+0];
    6edc:	4a1a      	ldr	r2, [pc, #104]	; (6f48 <cb_follow_le+0x1d0>)
    6ede:	6812      	ldr	r2, [r2, #0]
    6ee0:	68f9      	ldr	r1, [r7, #12]
    6ee2:	3104      	adds	r1, #4
    6ee4:	440a      	add	r2, r1
    6ee6:	7812      	ldrb	r2, [r2, #0]
    6ee8:	4313      	orrs	r3, r2

			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, idle_rxbuf + 4, len);
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    6eea:	607b      	str	r3, [r7, #4]
							 | (idle_rxbuf[4+len+1] << 8)
							 |  idle_rxbuf[4+len+0];
				if (calc_crc != wire_crc) // skip packets with a bad CRC
    6eec:	68ba      	ldr	r2, [r7, #8]
    6eee:	687b      	ldr	r3, [r7, #4]
    6ef0:	429a      	cmp	r2, r3
    6ef2:	d000      	beq.n	6ef6 <cb_follow_le+0x17e>
					break;
    6ef4:	e017      	b.n	6f26 <cb_follow_le+0x1ae>
			}

			// send to PC
			enqueue(LE_PACKET, idle_rxbuf);
    6ef6:	4b14      	ldr	r3, [pc, #80]	; (6f48 <cb_follow_le+0x1d0>)
    6ef8:	681b      	ldr	r3, [r3, #0]
    6efa:	2001      	movs	r0, #1
    6efc:	4619      	mov	r1, r3
    6efe:	f7fd fb07 	bl	4510 <enqueue>
			RXLED_SET;
    6f02:	4b12      	ldr	r3, [pc, #72]	; (6f4c <cb_follow_le+0x1d4>)
    6f04:	2210      	movs	r2, #16
    6f06:	601a      	str	r2, [r3, #0]

			packet_cb(idle_rxbuf);
    6f08:	4b11      	ldr	r3, [pc, #68]	; (6f50 <cb_follow_le+0x1d8>)
    6f0a:	681b      	ldr	r3, [r3, #0]
    6f0c:	4a0e      	ldr	r2, [pc, #56]	; (6f48 <cb_follow_le+0x1d0>)
    6f0e:	6812      	ldr	r2, [r2, #0]
    6f10:	4610      	mov	r0, r2
    6f12:	4798      	blx	r3

			break;
    6f14:	e007      	b.n	6f26 <cb_follow_le+0x1ae>
	for (i = 0; i < 31; ++i) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    6f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6f18:	3301      	adds	r3, #1
    6f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    6f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6f1e:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
    6f22:	f6ff af54 	blt.w	6dce <cb_follow_le+0x56>

			break;
		}
	}

	return 1;
    6f26:	2301      	movs	r3, #1
}
    6f28:	4618      	mov	r0, r3
    6f2a:	3730      	adds	r7, #48	; 0x30
    6f2c:	46bd      	mov	sp, r7
    6f2e:	bd80      	pop	{r7, pc}
    6f30:	1000049c 	.word	0x1000049c
    6f34:	0000b338 	.word	0x0000b338
    6f38:	10000d00 	.word	0x10000d00
    6f3c:	10000458 	.word	0x10000458
    6f40:	0000b2b8 	.word	0x0000b2b8
    6f44:	02040811 	.word	0x02040811
    6f48:	10000454 	.word	0x10000454
    6f4c:	2009c038 	.word	0x2009c038
    6f50:	1000099c 	.word	0x1000099c

00006f54 <connection_follow_cb>:

/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb(u8 *packet) {
    6f54:	b580      	push	{r7, lr}
    6f56:	b08a      	sub	sp, #40	; 0x28
    6f58:	af00      	add	r7, sp, #0
    6f5a:	6078      	str	r0, [r7, #4]
	int i;
	u32 aa = 0;
    6f5c:	2300      	movs	r3, #0
    6f5e:	623b      	str	r3, [r7, #32]
#define ADV_ADDRESS_IDX 0
#define HEADER_IDX 4
#define DATA_LEN_IDX 5
#define DATA_START_IDX 6

	u8 *adv_addr = &packet[ADV_ADDRESS_IDX];
    6f60:	687b      	ldr	r3, [r7, #4]
    6f62:	61fb      	str	r3, [r7, #28]
	u8 header = packet[HEADER_IDX];
    6f64:	687b      	ldr	r3, [r7, #4]
    6f66:	791b      	ldrb	r3, [r3, #4]
    6f68:	76fb      	strb	r3, [r7, #27]
	u8 *data_len = &packet[DATA_LEN_IDX];
    6f6a:	687b      	ldr	r3, [r7, #4]
    6f6c:	3305      	adds	r3, #5
    6f6e:	617b      	str	r3, [r7, #20]
	u8 *data = &packet[DATA_START_IDX];
    6f70:	687b      	ldr	r3, [r7, #4]
    6f72:	3306      	adds	r3, #6
    6f74:	613b      	str	r3, [r7, #16]
	u8 *crc = &packet[DATA_START_IDX + *data_len];
    6f76:	697b      	ldr	r3, [r7, #20]
    6f78:	781b      	ldrb	r3, [r3, #0]
    6f7a:	3306      	adds	r3, #6
    6f7c:	461a      	mov	r2, r3
    6f7e:	687b      	ldr	r3, [r7, #4]
    6f80:	4413      	add	r3, r2
    6f82:	60fb      	str	r3, [r7, #12]

	if (le.link_state == LINK_CONN_PENDING) {
    6f84:	4b8b      	ldr	r3, [pc, #556]	; (71b4 <connection_follow_cb+0x260>)
    6f86:	7d1b      	ldrb	r3, [r3, #20]
    6f88:	2b02      	cmp	r3, #2
    6f8a:	d11c      	bne.n	6fc6 <connection_follow_cb+0x72>
		// We received a packet in the connection pending state, so now the device *should* be connected
		le.link_state = LINK_CONNECTED;
    6f8c:	4b89      	ldr	r3, [pc, #548]	; (71b4 <connection_follow_cb+0x260>)
    6f8e:	2203      	movs	r2, #3
    6f90:	751a      	strb	r2, [r3, #20]
		le.conn_epoch = clkn;
    6f92:	4b89      	ldr	r3, [pc, #548]	; (71b8 <connection_follow_cb+0x264>)
    6f94:	681b      	ldr	r3, [r3, #0]
    6f96:	4a87      	ldr	r2, [pc, #540]	; (71b4 <connection_follow_cb+0x260>)
    6f98:	6193      	str	r3, [r2, #24]
		le.interval_timer = le.conn_interval - 1;
    6f9a:	4b86      	ldr	r3, [pc, #536]	; (71b4 <connection_follow_cb+0x260>)
    6f9c:	8bdb      	ldrh	r3, [r3, #30]
    6f9e:	3b01      	subs	r3, #1
    6fa0:	b29a      	uxth	r2, r3
    6fa2:	4b84      	ldr	r3, [pc, #528]	; (71b4 <connection_follow_cb+0x260>)
    6fa4:	839a      	strh	r2, [r3, #28]
		le.conn_count = 0;
    6fa6:	4b83      	ldr	r3, [pc, #524]	; (71b4 <connection_follow_cb+0x260>)
    6fa8:	2200      	movs	r2, #0
    6faa:	841a      	strh	r2, [r3, #32]
		le.update_pending = 0;
    6fac:	4b81      	ldr	r3, [pc, #516]	; (71b4 <connection_follow_cb+0x260>)
    6fae:	2200      	movs	r2, #0
    6fb0:	629a      	str	r2, [r3, #40]	; 0x28

		// hue hue hue
		if (jam_mode != JAM_NONE)
    6fb2:	4b82      	ldr	r3, [pc, #520]	; (71bc <connection_follow_cb+0x268>)
    6fb4:	781b      	ldrb	r3, [r3, #0]
    6fb6:	b2db      	uxtb	r3, r3
    6fb8:	2b00      	cmp	r3, #0
    6fba:	f000 80f7 	beq.w	71ac <connection_follow_cb+0x258>
			le_jam_count = JAM_COUNT_DEFAULT;
    6fbe:	4b80      	ldr	r3, [pc, #512]	; (71c0 <connection_follow_cb+0x26c>)
    6fc0:	2228      	movs	r2, #40	; 0x28
    6fc2:	601a      	str	r2, [r3, #0]
    6fc4:	e0f2      	b.n	71ac <connection_follow_cb+0x258>

	} else if (le.link_state == LINK_CONNECTED) {
    6fc6:	4b7b      	ldr	r3, [pc, #492]	; (71b4 <connection_follow_cb+0x260>)
    6fc8:	7d1b      	ldrb	r3, [r3, #20]
    6fca:	2b03      	cmp	r3, #3
    6fcc:	d16f      	bne.n	70ae <connection_follow_cb+0x15a>
		u8 llid =  header & 0x03;
    6fce:	7efb      	ldrb	r3, [r7, #27]
    6fd0:	f003 0303 	and.w	r3, r3, #3
    6fd4:	72fb      	strb	r3, [r7, #11]

		// Apply any connection parameter update if necessary
		if (le.update_pending && le.conn_count == le.update_instant) {
    6fd6:	4b77      	ldr	r3, [pc, #476]	; (71b4 <connection_follow_cb+0x260>)
    6fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6fda:	2b00      	cmp	r3, #0
    6fdc:	d021      	beq.n	7022 <connection_follow_cb+0xce>
    6fde:	4b75      	ldr	r3, [pc, #468]	; (71b4 <connection_follow_cb+0x260>)
    6fe0:	8c1b      	ldrh	r3, [r3, #32]
    6fe2:	b29a      	uxth	r2, r3
    6fe4:	4b73      	ldr	r3, [pc, #460]	; (71b4 <connection_follow_cb+0x260>)
    6fe6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    6fe8:	429a      	cmp	r2, r3
    6fea:	d11a      	bne.n	7022 <connection_follow_cb+0xce>
			// This is the first packet received in the connection interval for which the new parameters apply
			le.conn_epoch = clkn;
    6fec:	4b72      	ldr	r3, [pc, #456]	; (71b8 <connection_follow_cb+0x264>)
    6fee:	681b      	ldr	r3, [r3, #0]
    6ff0:	4a70      	ldr	r2, [pc, #448]	; (71b4 <connection_follow_cb+0x260>)
    6ff2:	6193      	str	r3, [r2, #24]
			le.conn_interval = le.interval_update;
    6ff4:	4b6f      	ldr	r3, [pc, #444]	; (71b4 <connection_follow_cb+0x260>)
    6ff6:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    6ff8:	4b6e      	ldr	r3, [pc, #440]	; (71b4 <connection_follow_cb+0x260>)
    6ffa:	83da      	strh	r2, [r3, #30]
			le.interval_timer = le.interval_update - 1;
    6ffc:	4b6d      	ldr	r3, [pc, #436]	; (71b4 <connection_follow_cb+0x260>)
    6ffe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    7000:	3b01      	subs	r3, #1
    7002:	b29a      	uxth	r2, r3
    7004:	4b6b      	ldr	r3, [pc, #428]	; (71b4 <connection_follow_cb+0x260>)
    7006:	839a      	strh	r2, [r3, #28]
			le.win_size = le.win_size_update;
    7008:	4b6a      	ldr	r3, [pc, #424]	; (71b4 <connection_follow_cb+0x260>)
    700a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    700e:	4b69      	ldr	r3, [pc, #420]	; (71b4 <connection_follow_cb+0x260>)
    7010:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			le.win_offset = le.win_offset_update;
    7014:	4b67      	ldr	r3, [pc, #412]	; (71b4 <connection_follow_cb+0x260>)
    7016:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    7018:	4b66      	ldr	r3, [pc, #408]	; (71b4 <connection_follow_cb+0x260>)
    701a:	849a      	strh	r2, [r3, #36]	; 0x24
			le.update_pending = 0;
    701c:	4b65      	ldr	r3, [pc, #404]	; (71b4 <connection_follow_cb+0x260>)
    701e:	2200      	movs	r2, #0
    7020:	629a      	str	r2, [r3, #40]	; 0x28
		}

		if (llid == 0x03 && data[0] == 0x00) {
    7022:	7afb      	ldrb	r3, [r7, #11]
    7024:	2b03      	cmp	r3, #3
    7026:	d141      	bne.n	70ac <connection_follow_cb+0x158>
    7028:	693b      	ldr	r3, [r7, #16]
    702a:	781b      	ldrb	r3, [r3, #0]
    702c:	2b00      	cmp	r3, #0
    702e:	d13d      	bne.n	70ac <connection_follow_cb+0x158>
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
    7030:	687b      	ldr	r3, [r7, #4]
    7032:	79da      	ldrb	r2, [r3, #7]
    7034:	4b5f      	ldr	r3, [pc, #380]	; (71b4 <connection_follow_cb+0x260>)
    7036:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
    703a:	687b      	ldr	r3, [r7, #4]
    703c:	3308      	adds	r3, #8
    703e:	781b      	ldrb	r3, [r3, #0]
    7040:	b29a      	uxth	r2, r3
    7042:	687b      	ldr	r3, [r7, #4]
    7044:	3309      	adds	r3, #9
    7046:	781b      	ldrb	r3, [r3, #0]
    7048:	b29b      	uxth	r3, r3
    704a:	021b      	lsls	r3, r3, #8
    704c:	b29b      	uxth	r3, r3
    704e:	4413      	add	r3, r2
    7050:	b29a      	uxth	r2, r3
    7052:	4b58      	ldr	r3, [pc, #352]	; (71b4 <connection_follow_cb+0x260>)
    7054:	865a      	strh	r2, [r3, #50]	; 0x32
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
    7056:	687b      	ldr	r3, [r7, #4]
    7058:	330a      	adds	r3, #10
    705a:	781b      	ldrb	r3, [r3, #0]
    705c:	b29a      	uxth	r2, r3
    705e:	687b      	ldr	r3, [r7, #4]
    7060:	330b      	adds	r3, #11
    7062:	781b      	ldrb	r3, [r3, #0]
    7064:	b29b      	uxth	r3, r3
    7066:	021b      	lsls	r3, r3, #8
    7068:	b29b      	uxth	r3, r3
    706a:	4413      	add	r3, r2
    706c:	b29a      	uxth	r2, r3
    706e:	4b51      	ldr	r3, [pc, #324]	; (71b4 <connection_follow_cb+0x260>)
    7070:	85da      	strh	r2, [r3, #46]	; 0x2e
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    7072:	687b      	ldr	r3, [r7, #4]
    7074:	3310      	adds	r3, #16
    7076:	781b      	ldrb	r3, [r3, #0]
    7078:	b29a      	uxth	r2, r3
    707a:	687b      	ldr	r3, [r7, #4]
    707c:	3311      	adds	r3, #17
    707e:	781b      	ldrb	r3, [r3, #0]
    7080:	b29b      	uxth	r3, r3
    7082:	021b      	lsls	r3, r3, #8
    7084:	b29b      	uxth	r3, r3
    7086:	4413      	add	r3, r2
    7088:	b29a      	uxth	r2, r3
    708a:	4b4a      	ldr	r3, [pc, #296]	; (71b4 <connection_follow_cb+0x260>)
    708c:	859a      	strh	r2, [r3, #44]	; 0x2c
			if (le.update_instant - le.conn_count < 32767)
    708e:	4b49      	ldr	r3, [pc, #292]	; (71b4 <connection_follow_cb+0x260>)
    7090:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    7092:	461a      	mov	r2, r3
    7094:	4b47      	ldr	r3, [pc, #284]	; (71b4 <connection_follow_cb+0x260>)
    7096:	8c1b      	ldrh	r3, [r3, #32]
    7098:	b29b      	uxth	r3, r3
    709a:	1ad3      	subs	r3, r2, r3
    709c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    70a0:	4293      	cmp	r3, r2
    70a2:	dc03      	bgt.n	70ac <connection_follow_cb+0x158>
				le.update_pending = 1;
    70a4:	4b43      	ldr	r3, [pc, #268]	; (71b4 <connection_follow_cb+0x260>)
    70a6:	2201      	movs	r2, #1
    70a8:	629a      	str	r2, [r3, #40]	; 0x28
    70aa:	e07f      	b.n	71ac <connection_follow_cb+0x258>
    70ac:	e07e      	b.n	71ac <connection_follow_cb+0x258>
		}

	} else if (le.link_state == LINK_LISTENING) {
    70ae:	4b41      	ldr	r3, [pc, #260]	; (71b4 <connection_follow_cb+0x260>)
    70b0:	7d1b      	ldrb	r3, [r3, #20]
    70b2:	2b01      	cmp	r3, #1
    70b4:	d17a      	bne.n	71ac <connection_follow_cb+0x258>
		u8 pkt_type = packet[4] & 0x0F;
    70b6:	687b      	ldr	r3, [r7, #4]
    70b8:	3304      	adds	r3, #4
    70ba:	781b      	ldrb	r3, [r3, #0]
    70bc:	f003 030f 	and.w	r3, r3, #15
    70c0:	72bb      	strb	r3, [r7, #10]
		if (pkt_type == 0x05) {
    70c2:	7abb      	ldrb	r3, [r7, #10]
    70c4:	2b05      	cmp	r3, #5
    70c6:	d171      	bne.n	71ac <connection_follow_cb+0x258>
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    70c8:	4b3a      	ldr	r3, [pc, #232]	; (71b4 <connection_follow_cb+0x260>)
    70ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    70cc:	2b00      	cmp	r3, #0
    70ce:	d014      	beq.n	70fa <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    70d0:	687b      	ldr	r3, [r7, #4]
    70d2:	3306      	adds	r3, #6
    70d4:	483b      	ldr	r0, [pc, #236]	; (71c4 <connection_follow_cb+0x270>)
    70d6:	4619      	mov	r1, r3
    70d8:	2206      	movs	r2, #6
    70da:	f003 fffd 	bl	b0d8 <memcmp>
    70de:	4603      	mov	r3, r0
	} else if (le.link_state == LINK_LISTENING) {
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    70e0:	2b00      	cmp	r3, #0
    70e2:	d00a      	beq.n	70fa <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
			    memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
    70e4:	687b      	ldr	r3, [r7, #4]
    70e6:	330c      	adds	r3, #12
    70e8:	4836      	ldr	r0, [pc, #216]	; (71c4 <connection_follow_cb+0x270>)
    70ea:	4619      	mov	r1, r3
    70ec:	2206      	movs	r2, #6
    70ee:	f003 fff3 	bl	b0d8 <memcmp>
    70f2:	4603      	mov	r3, r0
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    70f4:	2b00      	cmp	r3, #0
    70f6:	d000      	beq.n	70fa <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
				return;
    70f8:	e058      	b.n	71ac <connection_follow_cb+0x258>
			}

			le.link_state = LINK_CONN_PENDING;
    70fa:	4b2e      	ldr	r3, [pc, #184]	; (71b4 <connection_follow_cb+0x260>)
    70fc:	2202      	movs	r2, #2
    70fe:	751a      	strb	r2, [r3, #20]
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    7100:	4b2c      	ldr	r3, [pc, #176]	; (71b4 <connection_follow_cb+0x260>)
    7102:	2200      	movs	r2, #0
    7104:	611a      	str	r2, [r3, #16]

			for (i = 0; i < 4; ++i)
    7106:	2300      	movs	r3, #0
    7108:	627b      	str	r3, [r7, #36]	; 0x24
    710a:	e011      	b.n	7130 <connection_follow_cb+0x1dc>
				aa |= packet[18+i] << (i*8);
    710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    710e:	3312      	adds	r3, #18
    7110:	461a      	mov	r2, r3
    7112:	687b      	ldr	r3, [r7, #4]
    7114:	4413      	add	r3, r2
    7116:	781b      	ldrb	r3, [r3, #0]
    7118:	461a      	mov	r2, r3
    711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    711c:	00db      	lsls	r3, r3, #3
    711e:	fa02 f303 	lsl.w	r3, r2, r3
    7122:	461a      	mov	r2, r3
    7124:	6a3b      	ldr	r3, [r7, #32]
    7126:	4313      	orrs	r3, r2
    7128:	623b      	str	r3, [r7, #32]
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    712a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    712c:	3301      	adds	r3, #1
    712e:	627b      	str	r3, [r7, #36]	; 0x24
    7130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7132:	2b03      	cmp	r3, #3
    7134:	ddea      	ble.n	710c <connection_follow_cb+0x1b8>
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);
    7136:	6a38      	ldr	r0, [r7, #32]
    7138:	f7ff f97e 	bl	6438 <le_set_access_address>

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    713c:	687b      	ldr	r3, [r7, #4]
    713e:	3318      	adds	r3, #24
    7140:	781b      	ldrb	r3, [r3, #0]
    7142:	041a      	lsls	r2, r3, #16
						| (packet[CRC_INIT+1] << 8)
    7144:	687b      	ldr	r3, [r7, #4]
    7146:	3317      	adds	r3, #23
    7148:	781b      	ldrb	r3, [r3, #0]
    714a:	021b      	lsls	r3, r3, #8
    714c:	4313      	orrs	r3, r2
						|  packet[CRC_INIT+0];
    714e:	687a      	ldr	r2, [r7, #4]
    7150:	3216      	adds	r2, #22
    7152:	7812      	ldrb	r2, [r2, #0]
    7154:	4313      	orrs	r3, r2
			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    7156:	461a      	mov	r2, r3
    7158:	4b16      	ldr	r3, [pc, #88]	; (71b4 <connection_follow_cb+0x260>)
    715a:	609a      	str	r2, [r3, #8]
						| (packet[CRC_INIT+1] << 8)
						|  packet[CRC_INIT+0];
			le.crc_init_reversed = rbit(le.crc_init);
    715c:	4b15      	ldr	r3, [pc, #84]	; (71b4 <connection_follow_cb+0x260>)
    715e:	689b      	ldr	r3, [r3, #8]
    7160:	4618      	mov	r0, r3
    7162:	f002 fc2f 	bl	99c4 <rbit>
    7166:	4602      	mov	r2, r0
    7168:	4b12      	ldr	r3, [pc, #72]	; (71b4 <connection_follow_cb+0x260>)
    716a:	60da      	str	r2, [r3, #12]

#define WIN_SIZE (2+4+6+6+4+3)
			le.win_size = packet[WIN_SIZE];
    716c:	687b      	ldr	r3, [r7, #4]
    716e:	7e5a      	ldrb	r2, [r3, #25]
    7170:	4b10      	ldr	r3, [pc, #64]	; (71b4 <connection_follow_cb+0x260>)
    7172:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

#define WIN_OFFSET (2+4+6+6+4+3+1)
			le.win_offset = packet[WIN_OFFSET];
    7176:	687b      	ldr	r3, [r7, #4]
    7178:	331a      	adds	r3, #26
    717a:	781b      	ldrb	r3, [r3, #0]
    717c:	b29a      	uxth	r2, r3
    717e:	4b0d      	ldr	r3, [pc, #52]	; (71b4 <connection_follow_cb+0x260>)
    7180:	849a      	strh	r2, [r3, #36]	; 0x24

#define CONN_INTERVAL (2+4+6+6+4+3+1+2)
			le.conn_interval = packet[CONN_INTERVAL];
    7182:	687b      	ldr	r3, [r7, #4]
    7184:	331c      	adds	r3, #28
    7186:	781b      	ldrb	r3, [r3, #0]
    7188:	b29a      	uxth	r2, r3
    718a:	4b0a      	ldr	r3, [pc, #40]	; (71b4 <connection_follow_cb+0x260>)
    718c:	83da      	strh	r2, [r3, #30]

#define CHANNEL_INC (2+4+6+6+4+3+1+2+2+2+2+5)
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    718e:	687b      	ldr	r3, [r7, #4]
    7190:	3327      	adds	r3, #39	; 0x27
    7192:	781b      	ldrb	r3, [r3, #0]
    7194:	f003 031f 	and.w	r3, r3, #31
    7198:	b2da      	uxtb	r2, r3
    719a:	4b06      	ldr	r3, [pc, #24]	; (71b4 <connection_follow_cb+0x260>)
    719c:	759a      	strb	r2, [r3, #22]
			le.channel_idx = le.channel_increment;
    719e:	4b05      	ldr	r3, [pc, #20]	; (71b4 <connection_follow_cb+0x260>)
    71a0:	7d9a      	ldrb	r2, [r3, #22]
    71a2:	4b04      	ldr	r3, [pc, #16]	; (71b4 <connection_follow_cb+0x260>)
    71a4:	755a      	strb	r2, [r3, #21]

			// Hop to the initial channel immediately
			do_hop = 1;
    71a6:	4b08      	ldr	r3, [pc, #32]	; (71c8 <connection_follow_cb+0x274>)
    71a8:	2201      	movs	r2, #1
    71aa:	701a      	strb	r2, [r3, #0]
		}
	}
}
    71ac:	3728      	adds	r7, #40	; 0x28
    71ae:	46bd      	mov	sp, r7
    71b0:	bd80      	pop	{r7, pc}
    71b2:	bf00      	nop
    71b4:	10000458 	.word	0x10000458
    71b8:	10000be4 	.word	0x10000be4
    71bc:	10000a40 	.word	0x10000a40
    71c0:	10000994 	.word	0x10000994
    71c4:	1000048c 	.word	0x1000048c
    71c8:	1000097d 	.word	0x1000097d

000071cc <bt_follow_le>:

void bt_follow_le() {
    71cc:	b580      	push	{r7, lr}
    71ce:	af00      	add	r7, sp, #0
	reset_le();
    71d0:	f7ff f94c 	bl	646c <reset_le>
	packet_cb = connection_follow_cb;
    71d4:	4b04      	ldr	r3, [pc, #16]	; (71e8 <bt_follow_le+0x1c>)
    71d6:	4a05      	ldr	r2, [pc, #20]	; (71ec <bt_follow_le+0x20>)
    71d8:	601a      	str	r2, [r3, #0]
	bt_le_sync(MODE_BT_FOLLOW_LE);
    71da:	2009      	movs	r0, #9
    71dc:	f7ff fb1e 	bl	681c <bt_le_sync>
	data_cb = cb_follow_le;
	packet_cb = connection_follow_cb;
	bt_generic_le(MODE_BT_FOLLOW_LE);
	*/

	mode = MODE_IDLE;
    71e0:	4b03      	ldr	r3, [pc, #12]	; (71f0 <bt_follow_le+0x24>)
    71e2:	2200      	movs	r2, #0
    71e4:	701a      	strb	r2, [r3, #0]
}
    71e6:	bd80      	pop	{r7, pc}
    71e8:	1000099c 	.word	0x1000099c
    71ec:	00006f55 	.word	0x00006f55
    71f0:	10000a3e 	.word	0x10000a3e

000071f4 <le_promisc_state>:

// issue state change message
void le_promisc_state(u8 type, void *data, unsigned len) {
    71f4:	b580      	push	{r7, lr}
    71f6:	b092      	sub	sp, #72	; 0x48
    71f8:	af00      	add	r7, sp, #0
    71fa:	4603      	mov	r3, r0
    71fc:	60b9      	str	r1, [r7, #8]
    71fe:	607a      	str	r2, [r7, #4]
    7200:	73fb      	strb	r3, [r7, #15]
	u8 buf[50] = { 0, };
    7202:	f107 0314 	add.w	r3, r7, #20
    7206:	2200      	movs	r2, #0
    7208:	601a      	str	r2, [r3, #0]
    720a:	3304      	adds	r3, #4
    720c:	2200      	movs	r2, #0
    720e:	601a      	str	r2, [r3, #0]
    7210:	3304      	adds	r3, #4
    7212:	2200      	movs	r2, #0
    7214:	601a      	str	r2, [r3, #0]
    7216:	3304      	adds	r3, #4
    7218:	2200      	movs	r2, #0
    721a:	601a      	str	r2, [r3, #0]
    721c:	3304      	adds	r3, #4
    721e:	2200      	movs	r2, #0
    7220:	601a      	str	r2, [r3, #0]
    7222:	3304      	adds	r3, #4
    7224:	2200      	movs	r2, #0
    7226:	601a      	str	r2, [r3, #0]
    7228:	3304      	adds	r3, #4
    722a:	2200      	movs	r2, #0
    722c:	601a      	str	r2, [r3, #0]
    722e:	3304      	adds	r3, #4
    7230:	2200      	movs	r2, #0
    7232:	601a      	str	r2, [r3, #0]
    7234:	3304      	adds	r3, #4
    7236:	2200      	movs	r2, #0
    7238:	601a      	str	r2, [r3, #0]
    723a:	3304      	adds	r3, #4
    723c:	2200      	movs	r2, #0
    723e:	601a      	str	r2, [r3, #0]
    7240:	3304      	adds	r3, #4
    7242:	2200      	movs	r2, #0
    7244:	601a      	str	r2, [r3, #0]
    7246:	3304      	adds	r3, #4
    7248:	2200      	movs	r2, #0
    724a:	601a      	str	r2, [r3, #0]
    724c:	3304      	adds	r3, #4
    724e:	2200      	movs	r2, #0
    7250:	801a      	strh	r2, [r3, #0]
    7252:	3302      	adds	r3, #2
	if (len > 49)
    7254:	687b      	ldr	r3, [r7, #4]
    7256:	2b31      	cmp	r3, #49	; 0x31
    7258:	d901      	bls.n	725e <le_promisc_state+0x6a>
		len = 49;
    725a:	2331      	movs	r3, #49	; 0x31
    725c:	607b      	str	r3, [r7, #4]

	buf[0] = type;
    725e:	7bfb      	ldrb	r3, [r7, #15]
    7260:	753b      	strb	r3, [r7, #20]
	memcpy(&buf[1], data, len);
    7262:	f107 0314 	add.w	r3, r7, #20
    7266:	3301      	adds	r3, #1
    7268:	4618      	mov	r0, r3
    726a:	68b9      	ldr	r1, [r7, #8]
    726c:	687a      	ldr	r2, [r7, #4]
    726e:	f003 ff65 	bl	b13c <memcpy>
	enqueue(LE_PROMISC, buf);
    7272:	f107 0314 	add.w	r3, r7, #20
    7276:	2005      	movs	r0, #5
    7278:	4619      	mov	r1, r3
    727a:	f7fd f949 	bl	4510 <enqueue>
}
    727e:	3748      	adds	r7, #72	; 0x48
    7280:	46bd      	mov	sp, r7
    7282:	bd80      	pop	{r7, pc}

00007284 <promisc_recover_hop_increment>:

// divide, rounding to the nearest integer: round up at 0.5.
#define DIVIDE_ROUND(N, D) ((N) + (D)/2) / (D)

void promisc_recover_hop_increment(u8 *packet) {
    7284:	b580      	push	{r7, lr}
    7286:	b084      	sub	sp, #16
    7288:	af00      	add	r7, sp, #0
    728a:	6078      	str	r0, [r7, #4]
	static u32 first_ts = 0;
	if (channel == 2404) {
    728c:	4b55      	ldr	r3, [pc, #340]	; (73e4 <promisc_recover_hop_increment+0x160>)
    728e:	881b      	ldrh	r3, [r3, #0]
    7290:	b29b      	uxth	r3, r3
    7292:	f640 1264 	movw	r2, #2404	; 0x964
    7296:	4293      	cmp	r3, r2
    7298:	d114      	bne.n	72c4 <promisc_recover_hop_increment+0x40>
		first_ts = CLK100NS;
    729a:	4b53      	ldr	r3, [pc, #332]	; (73e8 <promisc_recover_hop_increment+0x164>)
    729c:	681b      	ldr	r3, [r3, #0]
    729e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    72a2:	f640 4235 	movw	r2, #3125	; 0xc35
    72a6:	fb02 f203 	mul.w	r2, r2, r3
    72aa:	4b50      	ldr	r3, [pc, #320]	; (73ec <promisc_recover_hop_increment+0x168>)
    72ac:	681b      	ldr	r3, [r3, #0]
    72ae:	4413      	add	r3, r2
    72b0:	4a4f      	ldr	r2, [pc, #316]	; (73f0 <promisc_recover_hop_increment+0x16c>)
    72b2:	6013      	str	r3, [r2, #0]
		hop_direct_channel = 2406;
    72b4:	4b4f      	ldr	r3, [pc, #316]	; (73f4 <promisc_recover_hop_increment+0x170>)
    72b6:	f640 1266 	movw	r2, #2406	; 0x966
    72ba:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    72bc:	4b4e      	ldr	r3, [pc, #312]	; (73f8 <promisc_recover_hop_increment+0x174>)
    72be:	2201      	movs	r2, #1
    72c0:	701a      	strb	r2, [r3, #0]
    72c2:	e08b      	b.n	73dc <promisc_recover_hop_increment+0x158>
	} else if (channel == 2406) {
    72c4:	4b47      	ldr	r3, [pc, #284]	; (73e4 <promisc_recover_hop_increment+0x160>)
    72c6:	881b      	ldrh	r3, [r3, #0]
    72c8:	b29b      	uxth	r3, r3
    72ca:	f640 1266 	movw	r2, #2406	; 0x966
    72ce:	4293      	cmp	r3, r2
    72d0:	d17d      	bne.n	73ce <promisc_recover_hop_increment+0x14a>
		u32 second_ts = CLK100NS;
    72d2:	4b45      	ldr	r3, [pc, #276]	; (73e8 <promisc_recover_hop_increment+0x164>)
    72d4:	681b      	ldr	r3, [r3, #0]
    72d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
    72da:	f640 4235 	movw	r2, #3125	; 0xc35
    72de:	fb02 f203 	mul.w	r2, r2, r3
    72e2:	4b42      	ldr	r3, [pc, #264]	; (73ec <promisc_recover_hop_increment+0x168>)
    72e4:	681b      	ldr	r3, [r3, #0]
    72e6:	4413      	add	r3, r2
    72e8:	60fb      	str	r3, [r7, #12]
		if (second_ts < first_ts)
    72ea:	4b41      	ldr	r3, [pc, #260]	; (73f0 <promisc_recover_hop_increment+0x16c>)
    72ec:	681b      	ldr	r3, [r3, #0]
    72ee:	68fa      	ldr	r2, [r7, #12]
    72f0:	429a      	cmp	r2, r3
    72f2:	d205      	bcs.n	7300 <promisc_recover_hop_increment+0x7c>
			second_ts += 3276800000; // handle rollover
    72f4:	68fb      	ldr	r3, [r7, #12]
    72f6:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    72fa:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    72fe:	60fb      	str	r3, [r7, #12]
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    7300:	4b3b      	ldr	r3, [pc, #236]	; (73f0 <promisc_recover_hop_increment+0x16c>)
    7302:	681b      	ldr	r3, [r3, #0]
    7304:	68fa      	ldr	r2, [r7, #12]
    7306:	1ad2      	subs	r2, r2, r3
    7308:	4b3c      	ldr	r3, [pc, #240]	; (73fc <promisc_recover_hop_increment+0x178>)
    730a:	8bdb      	ldrh	r3, [r3, #30]
    730c:	4619      	mov	r1, r3
    730e:	f243 03d4 	movw	r3, #12500	; 0x30d4
    7312:	fb03 f301 	mul.w	r3, r3, r1
    7316:	0fd9      	lsrs	r1, r3, #31
    7318:	440b      	add	r3, r1
    731a:	105b      	asrs	r3, r3, #1
    731c:	4413      	add	r3, r2
    731e:	4a37      	ldr	r2, [pc, #220]	; (73fc <promisc_recover_hop_increment+0x178>)
    7320:	8bd2      	ldrh	r2, [r2, #30]
    7322:	4611      	mov	r1, r2
    7324:	f243 02d4 	movw	r2, #12500	; 0x30d4
    7328:	fb02 f201 	mul.w	r2, r2, r1
    732c:	fbb3 f3f2 	udiv	r3, r3, r2
    7330:	60bb      	str	r3, [r7, #8]
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
    7332:	68bb      	ldr	r3, [r7, #8]
    7334:	2b24      	cmp	r3, #36	; 0x24
    7336:	d842      	bhi.n	73be <promisc_recover_hop_increment+0x13a>
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    7338:	4a31      	ldr	r2, [pc, #196]	; (7400 <promisc_recover_hop_increment+0x17c>)
    733a:	68bb      	ldr	r3, [r7, #8]
    733c:	4413      	add	r3, r2
    733e:	781a      	ldrb	r2, [r3, #0]
    7340:	4b2e      	ldr	r3, [pc, #184]	; (73fc <promisc_recover_hop_increment+0x178>)
    7342:	759a      	strb	r2, [r3, #22]
			le.interval_timer = le.conn_interval / 2;
    7344:	4b2d      	ldr	r3, [pc, #180]	; (73fc <promisc_recover_hop_increment+0x178>)
    7346:	8bdb      	ldrh	r3, [r3, #30]
    7348:	085b      	lsrs	r3, r3, #1
    734a:	b29a      	uxth	r2, r3
    734c:	4b2b      	ldr	r3, [pc, #172]	; (73fc <promisc_recover_hop_increment+0x178>)
    734e:	839a      	strh	r2, [r3, #28]
			le.conn_count = 0;
    7350:	4b2a      	ldr	r3, [pc, #168]	; (73fc <promisc_recover_hop_increment+0x178>)
    7352:	2200      	movs	r2, #0
    7354:	841a      	strh	r2, [r3, #32]
			le.conn_epoch = 0;
    7356:	4b29      	ldr	r3, [pc, #164]	; (73fc <promisc_recover_hop_increment+0x178>)
    7358:	2200      	movs	r2, #0
    735a:	619a      	str	r2, [r3, #24]
			do_hop = 0;
    735c:	4b26      	ldr	r3, [pc, #152]	; (73f8 <promisc_recover_hop_increment+0x174>)
    735e:	2200      	movs	r2, #0
    7360:	701a      	strb	r2, [r3, #0]
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    7362:	4b26      	ldr	r3, [pc, #152]	; (73fc <promisc_recover_hop_increment+0x178>)
    7364:	7d9b      	ldrb	r3, [r3, #22]
    7366:	1c5a      	adds	r2, r3, #1
    7368:	4b26      	ldr	r3, [pc, #152]	; (7404 <promisc_recover_hop_increment+0x180>)
    736a:	fb82 0103 	smull	r0, r1, r2, r3
    736e:	1853      	adds	r3, r2, r1
    7370:	1159      	asrs	r1, r3, #5
    7372:	17d3      	asrs	r3, r2, #31
    7374:	1ac9      	subs	r1, r1, r3
    7376:	460b      	mov	r3, r1
    7378:	00db      	lsls	r3, r3, #3
    737a:	440b      	add	r3, r1
    737c:	009b      	lsls	r3, r3, #2
    737e:	440b      	add	r3, r1
    7380:	1ad1      	subs	r1, r2, r3
    7382:	b2ca      	uxtb	r2, r1
    7384:	4b1d      	ldr	r3, [pc, #116]	; (73fc <promisc_recover_hop_increment+0x178>)
    7386:	755a      	strb	r2, [r3, #21]
			le.link_state = LINK_CONNECTED;
    7388:	4b1c      	ldr	r3, [pc, #112]	; (73fc <promisc_recover_hop_increment+0x178>)
    738a:	2203      	movs	r2, #3
    738c:	751a      	strb	r2, [r3, #20]
			le.crc_verify = 0;
    738e:	4b1b      	ldr	r3, [pc, #108]	; (73fc <promisc_recover_hop_increment+0x178>)
    7390:	2200      	movs	r2, #0
    7392:	611a      	str	r2, [r3, #16]
			hop_mode = HOP_BTLE;
    7394:	4b1c      	ldr	r3, [pc, #112]	; (7408 <promisc_recover_hop_increment+0x184>)
    7396:	2203      	movs	r2, #3
    7398:	701a      	strb	r2, [r3, #0]
			packet_cb = connection_follow_cb;
    739a:	4b1c      	ldr	r3, [pc, #112]	; (740c <promisc_recover_hop_increment+0x188>)
    739c:	4a1c      	ldr	r2, [pc, #112]	; (7410 <promisc_recover_hop_increment+0x18c>)
    739e:	601a      	str	r2, [r3, #0]
			le_promisc_state(3, &le.channel_increment, 1);
    73a0:	2003      	movs	r0, #3
    73a2:	491c      	ldr	r1, [pc, #112]	; (7414 <promisc_recover_hop_increment+0x190>)
    73a4:	2201      	movs	r2, #1
    73a6:	f7ff ff25 	bl	71f4 <le_promisc_state>

			if (jam_mode != JAM_NONE)
    73aa:	4b1b      	ldr	r3, [pc, #108]	; (7418 <promisc_recover_hop_increment+0x194>)
    73ac:	781b      	ldrb	r3, [r3, #0]
    73ae:	b2db      	uxtb	r3, r3
    73b0:	2b00      	cmp	r3, #0
    73b2:	d003      	beq.n	73bc <promisc_recover_hop_increment+0x138>
				le_jam_count = JAM_COUNT_DEFAULT;
    73b4:	4b19      	ldr	r3, [pc, #100]	; (741c <promisc_recover_hop_increment+0x198>)
    73b6:	2228      	movs	r2, #40	; 0x28
    73b8:	601a      	str	r2, [r3, #0]

			return;
    73ba:	e00f      	b.n	73dc <promisc_recover_hop_increment+0x158>
    73bc:	e00e      	b.n	73dc <promisc_recover_hop_increment+0x158>
		}
		hop_direct_channel = 2404;
    73be:	4b0d      	ldr	r3, [pc, #52]	; (73f4 <promisc_recover_hop_increment+0x170>)
    73c0:	f640 1264 	movw	r2, #2404	; 0x964
    73c4:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    73c6:	4b0c      	ldr	r3, [pc, #48]	; (73f8 <promisc_recover_hop_increment+0x174>)
    73c8:	2201      	movs	r2, #1
    73ca:	701a      	strb	r2, [r3, #0]
    73cc:	e006      	b.n	73dc <promisc_recover_hop_increment+0x158>
	}
	else {
		hop_direct_channel = 2404;
    73ce:	4b09      	ldr	r3, [pc, #36]	; (73f4 <promisc_recover_hop_increment+0x170>)
    73d0:	f640 1264 	movw	r2, #2404	; 0x964
    73d4:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    73d6:	4b08      	ldr	r3, [pc, #32]	; (73f8 <promisc_recover_hop_increment+0x174>)
    73d8:	2201      	movs	r2, #1
    73da:	701a      	strb	r2, [r3, #0]
	}
}
    73dc:	3710      	adds	r7, #16
    73de:	46bd      	mov	sp, r7
    73e0:	bd80      	pop	{r7, pc}
    73e2:	bf00      	nop
    73e4:	1000049c 	.word	0x1000049c
    73e8:	10000be4 	.word	0x10000be4
    73ec:	40004008 	.word	0x40004008
    73f0:	10000a54 	.word	0x10000a54
    73f4:	10000980 	.word	0x10000980
    73f8:	1000097d 	.word	0x1000097d
    73fc:	10000458 	.word	0x10000458
    7400:	0000b360 	.word	0x0000b360
    7404:	dd67c8a7 	.word	0xdd67c8a7
    7408:	1000097c 	.word	0x1000097c
    740c:	1000099c 	.word	0x1000099c
    7410:	00006f55 	.word	0x00006f55
    7414:	1000046e 	.word	0x1000046e
    7418:	10000a40 	.word	0x10000a40
    741c:	10000994 	.word	0x10000994

00007420 <promisc_recover_hop_interval>:

void promisc_recover_hop_interval(u8 *packet) {
    7420:	b580      	push	{r7, lr}
    7422:	b086      	sub	sp, #24
    7424:	af00      	add	r7, sp, #0
    7426:	6078      	str	r0, [r7, #4]
	static u32 prev_clk = 0;

	u32 cur_clk = CLK100NS;
    7428:	4b33      	ldr	r3, [pc, #204]	; (74f8 <promisc_recover_hop_interval+0xd8>)
    742a:	681b      	ldr	r3, [r3, #0]
    742c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7430:	f640 4235 	movw	r2, #3125	; 0xc35
    7434:	fb02 f203 	mul.w	r2, r2, r3
    7438:	4b30      	ldr	r3, [pc, #192]	; (74fc <promisc_recover_hop_interval+0xdc>)
    743a:	681b      	ldr	r3, [r3, #0]
    743c:	4413      	add	r3, r2
    743e:	617b      	str	r3, [r7, #20]
	if (cur_clk < prev_clk)
    7440:	4b2f      	ldr	r3, [pc, #188]	; (7500 <promisc_recover_hop_interval+0xe0>)
    7442:	681b      	ldr	r3, [r3, #0]
    7444:	697a      	ldr	r2, [r7, #20]
    7446:	429a      	cmp	r2, r3
    7448:	d203      	bcs.n	7452 <promisc_recover_hop_interval+0x32>
		cur_clk += 3267800000; // handle rollover
    744a:	697a      	ldr	r2, [r7, #20]
    744c:	4b2d      	ldr	r3, [pc, #180]	; (7504 <promisc_recover_hop_interval+0xe4>)
    744e:	4413      	add	r3, r2
    7450:	617b      	str	r3, [r7, #20]
	u32 clk_diff = cur_clk - prev_clk;
    7452:	4b2b      	ldr	r3, [pc, #172]	; (7500 <promisc_recover_hop_interval+0xe0>)
    7454:	681b      	ldr	r3, [r3, #0]
    7456:	697a      	ldr	r2, [r7, #20]
    7458:	1ad3      	subs	r3, r2, r3
    745a:	613b      	str	r3, [r7, #16]
	u16 obsv_hop_interval; // observed hop interval

	// probably consecutive data packets on the same channel
	if (clk_diff < 2 * LE_BASECLK)
    745c:	693b      	ldr	r3, [r7, #16]
    745e:	f246 12a7 	movw	r2, #24999	; 0x61a7
    7462:	4293      	cmp	r3, r2
    7464:	d800      	bhi.n	7468 <promisc_recover_hop_interval+0x48>
		return;
    7466:	e043      	b.n	74f0 <promisc_recover_hop_interval+0xd0>

	if (clk_diff < le_promisc.smallest_hop_interval)
    7468:	4b27      	ldr	r3, [pc, #156]	; (7508 <promisc_recover_hop_interval+0xe8>)
    746a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    746e:	693b      	ldr	r3, [r7, #16]
    7470:	429a      	cmp	r2, r3
    7472:	d903      	bls.n	747c <promisc_recover_hop_interval+0x5c>
		le_promisc.smallest_hop_interval = clk_diff;
    7474:	4a24      	ldr	r2, [pc, #144]	; (7508 <promisc_recover_hop_interval+0xe8>)
    7476:	693b      	ldr	r3, [r7, #16]
    7478:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    747c:	4b22      	ldr	r3, [pc, #136]	; (7508 <promisc_recover_hop_interval+0xe8>)
    747e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    7482:	f503 3361 	add.w	r3, r3, #230400	; 0x38400
    7486:	f203 3352 	addw	r3, r3, #850	; 0x352
    748a:	4a20      	ldr	r2, [pc, #128]	; (750c <promisc_recover_hop_interval+0xec>)
    748c:	fba2 2303 	umull	r2, r3, r2, r3
    7490:	0c9b      	lsrs	r3, r3, #18
    7492:	81fb      	strh	r3, [r7, #14]

	if (le.conn_interval == obsv_hop_interval) {
    7494:	4b1e      	ldr	r3, [pc, #120]	; (7510 <promisc_recover_hop_interval+0xf0>)
    7496:	8bdb      	ldrh	r3, [r3, #30]
    7498:	89fa      	ldrh	r2, [r7, #14]
    749a:	429a      	cmp	r2, r3
    749c:	d11e      	bne.n	74dc <promisc_recover_hop_interval+0xbc>
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
    749e:	4b1a      	ldr	r3, [pc, #104]	; (7508 <promisc_recover_hop_interval+0xe8>)
    74a0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    74a4:	3301      	adds	r3, #1
    74a6:	4a18      	ldr	r2, [pc, #96]	; (7508 <promisc_recover_hop_interval+0xe8>)
    74a8:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
		if (le_promisc.consec_intervals == 5) {
    74ac:	4b16      	ldr	r3, [pc, #88]	; (7508 <promisc_recover_hop_interval+0xe8>)
    74ae:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    74b2:	2b05      	cmp	r3, #5
    74b4:	d119      	bne.n	74ea <promisc_recover_hop_interval+0xca>
			packet_cb = promisc_recover_hop_increment;
    74b6:	4b17      	ldr	r3, [pc, #92]	; (7514 <promisc_recover_hop_interval+0xf4>)
    74b8:	4a17      	ldr	r2, [pc, #92]	; (7518 <promisc_recover_hop_interval+0xf8>)
    74ba:	601a      	str	r2, [r3, #0]
			hop_direct_channel = 2404;
    74bc:	4b17      	ldr	r3, [pc, #92]	; (751c <promisc_recover_hop_interval+0xfc>)
    74be:	f640 1264 	movw	r2, #2404	; 0x964
    74c2:	801a      	strh	r2, [r3, #0]
			hop_mode = HOP_DIRECT;
    74c4:	4b16      	ldr	r3, [pc, #88]	; (7520 <promisc_recover_hop_interval+0x100>)
    74c6:	2204      	movs	r2, #4
    74c8:	701a      	strb	r2, [r3, #0]
			do_hop = 1;
    74ca:	4b16      	ldr	r3, [pc, #88]	; (7524 <promisc_recover_hop_interval+0x104>)
    74cc:	2201      	movs	r2, #1
    74ce:	701a      	strb	r2, [r3, #0]
			le_promisc_state(2, &le.conn_interval, 2);
    74d0:	2002      	movs	r0, #2
    74d2:	4915      	ldr	r1, [pc, #84]	; (7528 <promisc_recover_hop_interval+0x108>)
    74d4:	2202      	movs	r2, #2
    74d6:	f7ff fe8d 	bl	71f4 <le_promisc_state>
    74da:	e006      	b.n	74ea <promisc_recover_hop_interval+0xca>
		}
	} else {
		le.conn_interval = obsv_hop_interval;
    74dc:	4a0c      	ldr	r2, [pc, #48]	; (7510 <promisc_recover_hop_interval+0xf0>)
    74de:	89fb      	ldrh	r3, [r7, #14]
    74e0:	83d3      	strh	r3, [r2, #30]
		le_promisc.consec_intervals = 0;
    74e2:	4b09      	ldr	r3, [pc, #36]	; (7508 <promisc_recover_hop_interval+0xe8>)
    74e4:	2200      	movs	r2, #0
    74e6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	}

	prev_clk = cur_clk;
    74ea:	4a05      	ldr	r2, [pc, #20]	; (7500 <promisc_recover_hop_interval+0xe0>)
    74ec:	697b      	ldr	r3, [r7, #20]
    74ee:	6013      	str	r3, [r2, #0]
}
    74f0:	3718      	adds	r7, #24
    74f2:	46bd      	mov	sp, r7
    74f4:	bd80      	pop	{r7, pc}
    74f6:	bf00      	nop
    74f8:	10000be4 	.word	0x10000be4
    74fc:	40004008 	.word	0x40004008
    7500:	10000a58 	.word	0x10000a58
    7504:	c2c6abc0 	.word	0xc2c6abc0
    7508:	10000bec 	.word	0x10000bec
    750c:	9119a9c1 	.word	0x9119a9c1
    7510:	10000458 	.word	0x10000458
    7514:	1000099c 	.word	0x1000099c
    7518:	00007285 	.word	0x00007285
    751c:	10000980 	.word	0x10000980
    7520:	1000097c 	.word	0x1000097c
    7524:	1000097d 	.word	0x1000097d
    7528:	10000476 	.word	0x10000476

0000752c <promisc_follow_cb>:

void promisc_follow_cb(u8 *packet) {
    752c:	b580      	push	{r7, lr}
    752e:	b084      	sub	sp, #16
    7530:	af00      	add	r7, sp, #0
    7532:	6078      	str	r0, [r7, #4]
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    7534:	4b28      	ldr	r3, [pc, #160]	; (75d8 <promisc_follow_cb+0xac>)
    7536:	691b      	ldr	r3, [r3, #16]
    7538:	2b00      	cmp	r3, #0
    753a:	d149      	bne.n	75d0 <promisc_follow_cb+0xa4>
    753c:	687b      	ldr	r3, [r7, #4]
    753e:	3304      	adds	r3, #4
    7540:	781b      	ldrb	r3, [r3, #0]
    7542:	2b01      	cmp	r3, #1
    7544:	d144      	bne.n	75d0 <promisc_follow_cb+0xa4>
    7546:	687b      	ldr	r3, [r7, #4]
    7548:	3305      	adds	r3, #5
    754a:	781b      	ldrb	r3, [r3, #0]
    754c:	2b00      	cmp	r3, #0
    754e:	d13f      	bne.n	75d0 <promisc_follow_cb+0xa4>
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];
    7550:	687b      	ldr	r3, [r7, #4]
    7552:	3308      	adds	r3, #8
    7554:	781b      	ldrb	r3, [r3, #0]
    7556:	041a      	lsls	r2, r3, #16
    7558:	687b      	ldr	r3, [r7, #4]
    755a:	3307      	adds	r3, #7
    755c:	781b      	ldrb	r3, [r3, #0]
    755e:	021b      	lsls	r3, r3, #8
    7560:	4313      	orrs	r3, r2
    7562:	687a      	ldr	r2, [r7, #4]
    7564:	3206      	adds	r2, #6
    7566:	7812      	ldrb	r2, [r2, #0]
    7568:	4313      	orrs	r3, r2
    756a:	60bb      	str	r3, [r7, #8]

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    756c:	687b      	ldr	r3, [r7, #4]
    756e:	3304      	adds	r3, #4
    7570:	68b8      	ldr	r0, [r7, #8]
    7572:	4619      	mov	r1, r3
    7574:	2202      	movs	r2, #2
    7576:	f001 f89f 	bl	86b8 <btle_reverse_crc>
    757a:	4602      	mov	r2, r0
    757c:	4b16      	ldr	r3, [pc, #88]	; (75d8 <promisc_follow_cb+0xac>)
    757e:	609a      	str	r2, [r3, #8]
		le.crc_init_reversed = 0;
    7580:	4b15      	ldr	r3, [pc, #84]	; (75d8 <promisc_follow_cb+0xac>)
    7582:	2200      	movs	r2, #0
    7584:	60da      	str	r2, [r3, #12]
		for (i = 0; i < 24; ++i)
    7586:	2300      	movs	r3, #0
    7588:	60fb      	str	r3, [r7, #12]
    758a:	e013      	b.n	75b4 <promisc_follow_cb+0x88>
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    758c:	4b12      	ldr	r3, [pc, #72]	; (75d8 <promisc_follow_cb+0xac>)
    758e:	68da      	ldr	r2, [r3, #12]
    7590:	4b11      	ldr	r3, [pc, #68]	; (75d8 <promisc_follow_cb+0xac>)
    7592:	6899      	ldr	r1, [r3, #8]
    7594:	68fb      	ldr	r3, [r7, #12]
    7596:	fa21 f303 	lsr.w	r3, r1, r3
    759a:	f003 0101 	and.w	r1, r3, #1
    759e:	68fb      	ldr	r3, [r7, #12]
    75a0:	f1c3 0317 	rsb	r3, r3, #23
    75a4:	fa01 f303 	lsl.w	r3, r1, r3
    75a8:	4313      	orrs	r3, r2
    75aa:	4a0b      	ldr	r2, [pc, #44]	; (75d8 <promisc_follow_cb+0xac>)
    75ac:	60d3      	str	r3, [r2, #12]
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    75ae:	68fb      	ldr	r3, [r7, #12]
    75b0:	3301      	adds	r3, #1
    75b2:	60fb      	str	r3, [r7, #12]
    75b4:	68fb      	ldr	r3, [r7, #12]
    75b6:	2b17      	cmp	r3, #23
    75b8:	dde8      	ble.n	758c <promisc_follow_cb+0x60>
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
    75ba:	4b07      	ldr	r3, [pc, #28]	; (75d8 <promisc_follow_cb+0xac>)
    75bc:	2201      	movs	r2, #1
    75be:	611a      	str	r2, [r3, #16]
		packet_cb = promisc_recover_hop_interval;
    75c0:	4b06      	ldr	r3, [pc, #24]	; (75dc <promisc_follow_cb+0xb0>)
    75c2:	4a07      	ldr	r2, [pc, #28]	; (75e0 <promisc_follow_cb+0xb4>)
    75c4:	601a      	str	r2, [r3, #0]
		le_promisc_state(1, &le.crc_init, 3);
    75c6:	2001      	movs	r0, #1
    75c8:	4906      	ldr	r1, [pc, #24]	; (75e4 <promisc_follow_cb+0xb8>)
    75ca:	2203      	movs	r2, #3
    75cc:	f7ff fe12 	bl	71f4 <le_promisc_state>
	}
}
    75d0:	3710      	adds	r7, #16
    75d2:	46bd      	mov	sp, r7
    75d4:	bd80      	pop	{r7, pc}
    75d6:	bf00      	nop
    75d8:	10000458 	.word	0x10000458
    75dc:	1000099c 	.word	0x1000099c
    75e0:	00007421 	.word	0x00007421
    75e4:	10000460 	.word	0x10000460

000075e8 <see_aa>:

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
    75e8:	b480      	push	{r7}
    75ea:	b087      	sub	sp, #28
    75ec:	af00      	add	r7, sp, #0
    75ee:	6078      	str	r0, [r7, #4]
	int i, max = -1, killme = -1;
    75f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    75f4:	613b      	str	r3, [r7, #16]
    75f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    75fa:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < AA_LIST_SIZE; ++i)
    75fc:	2300      	movs	r3, #0
    75fe:	617b      	str	r3, [r7, #20]
    7600:	e015      	b.n	762e <see_aa+0x46>
		if (le_promisc.active_aa[i].aa == aa) {
    7602:	4a22      	ldr	r2, [pc, #136]	; (768c <see_aa+0xa4>)
    7604:	697b      	ldr	r3, [r7, #20]
    7606:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    760a:	687b      	ldr	r3, [r7, #4]
    760c:	429a      	cmp	r2, r3
    760e:	d10b      	bne.n	7628 <see_aa+0x40>
			++le_promisc.active_aa[i].count;
    7610:	4a1e      	ldr	r2, [pc, #120]	; (768c <see_aa+0xa4>)
    7612:	697b      	ldr	r3, [r7, #20]
    7614:	00db      	lsls	r3, r3, #3
    7616:	4413      	add	r3, r2
    7618:	685b      	ldr	r3, [r3, #4]
    761a:	1c5a      	adds	r2, r3, #1
    761c:	491b      	ldr	r1, [pc, #108]	; (768c <see_aa+0xa4>)
    761e:	697b      	ldr	r3, [r7, #20]
    7620:	00db      	lsls	r3, r3, #3
    7622:	440b      	add	r3, r1
    7624:	605a      	str	r2, [r3, #4]
			return;
    7626:	e02c      	b.n	7682 <see_aa+0x9a>
}

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
    7628:	697b      	ldr	r3, [r7, #20]
    762a:	3301      	adds	r3, #1
    762c:	617b      	str	r3, [r7, #20]
    762e:	697b      	ldr	r3, [r7, #20]
    7630:	2b1f      	cmp	r3, #31
    7632:	dde6      	ble.n	7602 <see_aa+0x1a>
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    7634:	2300      	movs	r3, #0
    7636:	617b      	str	r3, [r7, #20]
    7638:	e015      	b.n	7666 <see_aa+0x7e>
		if (le_promisc.active_aa[i].count < max || max < 0) {
    763a:	4a14      	ldr	r2, [pc, #80]	; (768c <see_aa+0xa4>)
    763c:	697b      	ldr	r3, [r7, #20]
    763e:	00db      	lsls	r3, r3, #3
    7640:	4413      	add	r3, r2
    7642:	685a      	ldr	r2, [r3, #4]
    7644:	693b      	ldr	r3, [r7, #16]
    7646:	429a      	cmp	r2, r3
    7648:	db02      	blt.n	7650 <see_aa+0x68>
    764a:	693b      	ldr	r3, [r7, #16]
    764c:	2b00      	cmp	r3, #0
    764e:	da07      	bge.n	7660 <see_aa+0x78>
			killme = i;
    7650:	697b      	ldr	r3, [r7, #20]
    7652:	60fb      	str	r3, [r7, #12]
			max = le_promisc.active_aa[i].count;
    7654:	4a0d      	ldr	r2, [pc, #52]	; (768c <see_aa+0xa4>)
    7656:	697b      	ldr	r3, [r7, #20]
    7658:	00db      	lsls	r3, r3, #3
    765a:	4413      	add	r3, r2
    765c:	685b      	ldr	r3, [r3, #4]
    765e:	613b      	str	r3, [r7, #16]
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    7660:	697b      	ldr	r3, [r7, #20]
    7662:	3301      	adds	r3, #1
    7664:	617b      	str	r3, [r7, #20]
    7666:	697b      	ldr	r3, [r7, #20]
    7668:	2b1f      	cmp	r3, #31
    766a:	dde6      	ble.n	763a <see_aa+0x52>
		if (le_promisc.active_aa[i].count < max || max < 0) {
			killme = i;
			max = le_promisc.active_aa[i].count;
		}

	le_promisc.active_aa[killme].aa = aa;
    766c:	4907      	ldr	r1, [pc, #28]	; (768c <see_aa+0xa4>)
    766e:	68fb      	ldr	r3, [r7, #12]
    7670:	687a      	ldr	r2, [r7, #4]
    7672:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	le_promisc.active_aa[killme].count = 1;
    7676:	4a05      	ldr	r2, [pc, #20]	; (768c <see_aa+0xa4>)
    7678:	68fb      	ldr	r3, [r7, #12]
    767a:	00db      	lsls	r3, r3, #3
    767c:	4413      	add	r3, r2
    767e:	2201      	movs	r2, #1
    7680:	605a      	str	r2, [r3, #4]
}
    7682:	371c      	adds	r7, #28
    7684:	46bd      	mov	sp, r7
    7686:	f85d 7b04 	ldr.w	r7, [sp], #4
    768a:	4770      	bx	lr
    768c:	10000bec 	.word	0x10000bec

00007690 <cb_le_promisc>:

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    7690:	b590      	push	{r4, r7, lr}
    7692:	b0a1      	sub	sp, #132	; 0x84
    7694:	af00      	add	r7, sp, #0
    7696:	6078      	str	r0, [r7, #4]
	int i, j, k;
	int idx;

	// empty data PDU: 01 00
	char desired[4][16] = {
    7698:	f107 031c 	add.w	r3, r7, #28
    769c:	2240      	movs	r2, #64	; 0x40
    769e:	4618      	mov	r0, r3
    76a0:	2100      	movs	r1, #0
    76a2:	f7fc fda9 	bl	41f8 <memset>
    76a6:	2301      	movs	r3, #1
    76a8:	773b      	strb	r3, [r7, #28]
    76aa:	2301      	movs	r3, #1
    76ac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    76b0:	2301      	movs	r3, #1
    76b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    76b6:	2301      	movs	r3, #1
    76b8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    76bc:	2301      	movs	r3, #1
    76be:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    76c2:	2301      	movs	r3, #1
    76c4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    76c8:	2301      	movs	r3, #1
    76ca:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    76ce:	2301      	movs	r3, #1
    76d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    76d4:	2300      	movs	r3, #0
    76d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    76d8:	e041      	b.n	775e <cb_le_promisc+0xce>
		idx = whitening_index[btle_channel_index(channel-2402)];
    76da:	4ba5      	ldr	r3, [pc, #660]	; (7970 <cb_le_promisc+0x2e0>)
    76dc:	881b      	ldrh	r3, [r3, #0]
    76de:	b29b      	uxth	r3, r3
    76e0:	b2db      	uxtb	r3, r3
    76e2:	3b62      	subs	r3, #98	; 0x62
    76e4:	b2db      	uxtb	r3, r3
    76e6:	4618      	mov	r0, r3
    76e8:	f000 ff44 	bl	8574 <btle_channel_index>
    76ec:	4603      	mov	r3, r0
    76ee:	461a      	mov	r2, r3
    76f0:	4ba0      	ldr	r3, [pc, #640]	; (7974 <cb_le_promisc+0x2e4>)
    76f2:	5c9b      	ldrb	r3, [r3, r2]
    76f4:	673b      	str	r3, [r7, #112]	; 0x70

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    76f6:	2300      	movs	r3, #0
    76f8:	67bb      	str	r3, [r7, #120]	; 0x78
    76fa:	e02a      	b.n	7752 <cb_le_promisc+0xc2>
			desired[i][j] ^= whitening[idx];
    76fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    76fe:	011b      	lsls	r3, r3, #4
    7700:	f107 0280 	add.w	r2, r7, #128	; 0x80
    7704:	441a      	add	r2, r3
    7706:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7708:	4413      	add	r3, r2
    770a:	3b64      	subs	r3, #100	; 0x64
    770c:	781a      	ldrb	r2, [r3, #0]
    770e:	499a      	ldr	r1, [pc, #616]	; (7978 <cb_le_promisc+0x2e8>)
    7710:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    7712:	440b      	add	r3, r1
    7714:	781b      	ldrb	r3, [r3, #0]
    7716:	4053      	eors	r3, r2
    7718:	b2d9      	uxtb	r1, r3
    771a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    771c:	011b      	lsls	r3, r3, #4
    771e:	f107 0280 	add.w	r2, r7, #128	; 0x80
    7722:	441a      	add	r2, r3
    7724:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7726:	4413      	add	r3, r2
    7728:	3b64      	subs	r3, #100	; 0x64
    772a:	460a      	mov	r2, r1
    772c:	701a      	strb	r2, [r3, #0]
			idx = (idx + 1) % sizeof(whitening);
    772e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    7730:	3301      	adds	r3, #1
    7732:	4619      	mov	r1, r3
    7734:	4b91      	ldr	r3, [pc, #580]	; (797c <cb_le_promisc+0x2ec>)
    7736:	fba1 2303 	umull	r2, r3, r1, r3
    773a:	1ac8      	subs	r0, r1, r3
    773c:	0840      	lsrs	r0, r0, #1
    773e:	4403      	add	r3, r0
    7740:	099a      	lsrs	r2, r3, #6
    7742:	4613      	mov	r3, r2
    7744:	01db      	lsls	r3, r3, #7
    7746:	1a9b      	subs	r3, r3, r2
    7748:	1aca      	subs	r2, r1, r3
    774a:	673a      	str	r2, [r7, #112]	; 0x70

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    774c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    774e:	3301      	adds	r3, #1
    7750:	67bb      	str	r3, [r7, #120]	; 0x78
    7752:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7754:	2b0f      	cmp	r3, #15
    7756:	ddd1      	ble.n	76fc <cb_le_promisc+0x6c>
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    7758:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    775a:	3301      	adds	r3, #1
    775c:	67fb      	str	r3, [r7, #124]	; 0x7c
    775e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7760:	2b03      	cmp	r3, #3
    7762:	ddba      	ble.n	76da <cb_le_promisc+0x4a>
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    7764:	2320      	movs	r3, #32
    7766:	67fb      	str	r3, [r7, #124]	; 0x7c
    7768:	e0d0      	b.n	790c <cb_le_promisc+0x27c>
		int ok[4] = { 1, 1, 1, 1 };
    776a:	4b85      	ldr	r3, [pc, #532]	; (7980 <cb_le_promisc+0x2f0>)
    776c:	f107 040c 	add.w	r4, r7, #12
    7770:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    7772:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		int matching = -1;
    7776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    777a:	66fb      	str	r3, [r7, #108]	; 0x6c

		for (j = 0; j < 4; ++j) {
    777c:	2300      	movs	r3, #0
    777e:	67bb      	str	r3, [r7, #120]	; 0x78
    7780:	e026      	b.n	77d0 <cb_le_promisc+0x140>
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    7782:	2300      	movs	r3, #0
    7784:	677b      	str	r3, [r7, #116]	; 0x74
    7786:	e01d      	b.n	77c4 <cb_le_promisc+0x134>
				if (unpacked[i+k] != desired[j][k]) {
    7788:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    778a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    778c:	4413      	add	r3, r2
    778e:	461a      	mov	r2, r3
    7790:	687b      	ldr	r3, [r7, #4]
    7792:	4413      	add	r3, r2
    7794:	781a      	ldrb	r2, [r3, #0]
    7796:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7798:	011b      	lsls	r3, r3, #4
    779a:	f107 0180 	add.w	r1, r7, #128	; 0x80
    779e:	4419      	add	r1, r3
    77a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    77a2:	440b      	add	r3, r1
    77a4:	3b64      	subs	r3, #100	; 0x64
    77a6:	781b      	ldrb	r3, [r3, #0]
    77a8:	429a      	cmp	r2, r3
    77aa:	d008      	beq.n	77be <cb_le_promisc+0x12e>
					ok[j] = 0;
    77ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    77ae:	009b      	lsls	r3, r3, #2
    77b0:	f107 0280 	add.w	r2, r7, #128	; 0x80
    77b4:	4413      	add	r3, r2
    77b6:	2200      	movs	r2, #0
    77b8:	f843 2c74 	str.w	r2, [r3, #-116]
					break;
    77bc:	e005      	b.n	77ca <cb_le_promisc+0x13a>
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    77be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    77c0:	3301      	adds	r3, #1
    77c2:	677b      	str	r3, [r7, #116]	; 0x74
    77c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    77c6:	2b0f      	cmp	r3, #15
    77c8:	ddde      	ble.n	7788 <cb_le_promisc+0xf8>
	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    77ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    77cc:	3301      	adds	r3, #1
    77ce:	67bb      	str	r3, [r7, #120]	; 0x78
    77d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    77d2:	2b03      	cmp	r3, #3
    77d4:	ddd5      	ble.n	7782 <cb_le_promisc+0xf2>
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    77d6:	2300      	movs	r3, #0
    77d8:	67bb      	str	r3, [r7, #120]	; 0x78
    77da:	e00e      	b.n	77fa <cb_le_promisc+0x16a>
			if (ok[j]) {
    77dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    77de:	009b      	lsls	r3, r3, #2
    77e0:	f107 0280 	add.w	r2, r7, #128	; 0x80
    77e4:	4413      	add	r3, r2
    77e6:	f853 3c74 	ldr.w	r3, [r3, #-116]
    77ea:	2b00      	cmp	r3, #0
    77ec:	d002      	beq.n	77f4 <cb_le_promisc+0x164>
				matching = j;
    77ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    77f0:	66fb      	str	r3, [r7, #108]	; 0x6c
				break;
    77f2:	e005      	b.n	7800 <cb_le_promisc+0x170>
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    77f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    77f6:	3301      	adds	r3, #1
    77f8:	67bb      	str	r3, [r7, #120]	; 0x78
    77fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    77fc:	2b03      	cmp	r3, #3
    77fe:	dded      	ble.n	77dc <cb_le_promisc+0x14c>
				break;
			}
		}

		// skip if no match
		if (matching < 0)
    7800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    7802:	2b00      	cmp	r3, #0
    7804:	db7f      	blt.n	7906 <cb_le_promisc+0x276>
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
    7806:	4b5a      	ldr	r3, [pc, #360]	; (7970 <cb_le_promisc+0x2e0>)
    7808:	881b      	ldrh	r3, [r3, #0]
    780a:	b29b      	uxth	r3, r3
    780c:	b2db      	uxtb	r3, r3
    780e:	3b62      	subs	r3, #98	; 0x62
    7810:	b2db      	uxtb	r3, r3
    7812:	4618      	mov	r0, r3
    7814:	f000 feae 	bl	8574 <btle_channel_index>
    7818:	4603      	mov	r3, r0
    781a:	461a      	mov	r2, r3
    781c:	4b55      	ldr	r3, [pc, #340]	; (7974 <cb_le_promisc+0x2e4>)
    781e:	5c9b      	ldrb	r3, [r3, r2]
    7820:	673b      	str	r3, [r7, #112]	; 0x70
		for (j = 0; j < 4+3+3; ++j) {
    7822:	2300      	movs	r3, #0
    7824:	67bb      	str	r3, [r7, #120]	; 0x78
    7826:	e04c      	b.n	78c2 <cb_le_promisc+0x232>
			u8 byte = 0;
    7828:	2300      	movs	r3, #0
    782a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			for (k = 0; k < 8; k++) {
    782e:	2300      	movs	r3, #0
    7830:	677b      	str	r3, [r7, #116]	; 0x74
    7832:	e039      	b.n	78a8 <cb_le_promisc+0x218>
				int offset = k + (j * 8) + i - 32;
    7834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7836:	00da      	lsls	r2, r3, #3
    7838:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    783a:	441a      	add	r2, r3
    783c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    783e:	4413      	add	r3, r2
    7840:	3b20      	subs	r3, #32
    7842:	663b      	str	r3, [r7, #96]	; 0x60
				if (offset >= DMA_SIZE*8*2) break;
    7844:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    7846:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
    784a:	db00      	blt.n	784e <cb_le_promisc+0x1be>
    784c:	e02f      	b.n	78ae <cb_le_promisc+0x21e>
				int bit = unpacked[offset];
    784e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    7850:	687a      	ldr	r2, [r7, #4]
    7852:	4413      	add	r3, r2
    7854:	781b      	ldrb	r3, [r3, #0]
    7856:	667b      	str	r3, [r7, #100]	; 0x64
				if (j >= 4) { // unwhiten data bytes
    7858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    785a:	2b03      	cmp	r3, #3
    785c:	dd16      	ble.n	788c <cb_le_promisc+0x1fc>
					bit ^= whitening[idx];
    785e:	4a46      	ldr	r2, [pc, #280]	; (7978 <cb_le_promisc+0x2e8>)
    7860:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    7862:	4413      	add	r3, r2
    7864:	781b      	ldrb	r3, [r3, #0]
    7866:	461a      	mov	r2, r3
    7868:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    786a:	4053      	eors	r3, r2
    786c:	667b      	str	r3, [r7, #100]	; 0x64
					idx = (idx + 1) % sizeof(whitening);
    786e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    7870:	3301      	adds	r3, #1
    7872:	4619      	mov	r1, r3
    7874:	4b41      	ldr	r3, [pc, #260]	; (797c <cb_le_promisc+0x2ec>)
    7876:	fba1 2303 	umull	r2, r3, r1, r3
    787a:	1ac8      	subs	r0, r1, r3
    787c:	0840      	lsrs	r0, r0, #1
    787e:	4403      	add	r3, r0
    7880:	099a      	lsrs	r2, r3, #6
    7882:	4613      	mov	r3, r2
    7884:	01db      	lsls	r3, r3, #7
    7886:	1a9b      	subs	r3, r3, r2
    7888:	1aca      	subs	r2, r1, r3
    788a:	673a      	str	r2, [r7, #112]	; 0x70
				}
				byte |= bit << k;
    788c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    788e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7890:	fa02 f303 	lsl.w	r3, r2, r3
    7894:	b2da      	uxtb	r2, r3
    7896:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
    789a:	4313      	orrs	r3, r2
    789c:	b2db      	uxtb	r3, r3
    789e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    78a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    78a4:	3301      	adds	r3, #1
    78a6:	677b      	str	r3, [r7, #116]	; 0x74
    78a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    78aa:	2b07      	cmp	r3, #7
    78ac:	ddc2      	ble.n	7834 <cb_le_promisc+0x1a4>
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
    78ae:	4b35      	ldr	r3, [pc, #212]	; (7984 <cb_le_promisc+0x2f4>)
    78b0:	681a      	ldr	r2, [r3, #0]
    78b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    78b4:	4413      	add	r3, r2
    78b6:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
    78ba:	701a      	strb	r2, [r3, #0]
		if (matching < 0)
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
    78bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    78be:	3301      	adds	r3, #1
    78c0:	67bb      	str	r3, [r7, #120]	; 0x78
    78c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    78c4:	2b09      	cmp	r3, #9
    78c6:	ddaf      	ble.n	7828 <cb_le_promisc+0x198>
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    78c8:	4b2e      	ldr	r3, [pc, #184]	; (7984 <cb_le_promisc+0x2f4>)
    78ca:	681b      	ldr	r3, [r3, #0]
    78cc:	3303      	adds	r3, #3
    78ce:	781b      	ldrb	r3, [r3, #0]
    78d0:	061a      	lsls	r2, r3, #24
				 (idle_rxbuf[2] << 16) |
    78d2:	4b2c      	ldr	r3, [pc, #176]	; (7984 <cb_le_promisc+0x2f4>)
    78d4:	681b      	ldr	r3, [r3, #0]
    78d6:	3302      	adds	r3, #2
    78d8:	781b      	ldrb	r3, [r3, #0]
    78da:	041b      	lsls	r3, r3, #16
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    78dc:	431a      	orrs	r2, r3
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
    78de:	4b29      	ldr	r3, [pc, #164]	; (7984 <cb_le_promisc+0x2f4>)
    78e0:	681b      	ldr	r3, [r3, #0]
    78e2:	3301      	adds	r3, #1
    78e4:	781b      	ldrb	r3, [r3, #0]
    78e6:	021b      	lsls	r3, r3, #8
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
    78e8:	4313      	orrs	r3, r2
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
    78ea:	4a26      	ldr	r2, [pc, #152]	; (7984 <cb_le_promisc+0x2f4>)
    78ec:	6812      	ldr	r2, [r2, #0]
    78ee:	7812      	ldrb	r2, [r2, #0]
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
    78f0:	4313      	orrs	r3, r2
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    78f2:	65fb      	str	r3, [r7, #92]	; 0x5c
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
		see_aa(aa);
    78f4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    78f6:	f7ff fe77 	bl	75e8 <see_aa>

		enqueue(LE_PACKET, idle_rxbuf);
    78fa:	4b22      	ldr	r3, [pc, #136]	; (7984 <cb_le_promisc+0x2f4>)
    78fc:	681b      	ldr	r3, [r3, #0]
    78fe:	2001      	movs	r0, #1
    7900:	4619      	mov	r1, r3
    7902:	f7fc fe05 	bl	4510 <enqueue>
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    7906:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7908:	3301      	adds	r3, #1
    790a:	67fb      	str	r3, [r7, #124]	; 0x7c
    790c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    790e:	f5b3 7f3c 	cmp.w	r3, #752	; 0x2f0
    7912:	f6ff af2a 	blt.w	776a <cb_le_promisc+0xda>
		enqueue(LE_PACKET, idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    7916:	2300      	movs	r3, #0
    7918:	67fb      	str	r3, [r7, #124]	; 0x7c
    791a:	e020      	b.n	795e <cb_le_promisc+0x2ce>
		if (le_promisc.active_aa[i].count > 3) {
    791c:	4a1a      	ldr	r2, [pc, #104]	; (7988 <cb_le_promisc+0x2f8>)
    791e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7920:	00db      	lsls	r3, r3, #3
    7922:	4413      	add	r3, r2
    7924:	685b      	ldr	r3, [r3, #4]
    7926:	2b03      	cmp	r3, #3
    7928:	dd16      	ble.n	7958 <cb_le_promisc+0x2c8>
			le_set_access_address(le_promisc.active_aa[i].aa);
    792a:	4a17      	ldr	r2, [pc, #92]	; (7988 <cb_le_promisc+0x2f8>)
    792c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    792e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    7932:	4618      	mov	r0, r3
    7934:	f7fe fd80 	bl	6438 <le_set_access_address>
			data_cb = cb_follow_le;
    7938:	4b14      	ldr	r3, [pc, #80]	; (798c <cb_le_promisc+0x2fc>)
    793a:	4a15      	ldr	r2, [pc, #84]	; (7990 <cb_le_promisc+0x300>)
    793c:	601a      	str	r2, [r3, #0]
			packet_cb = promisc_follow_cb;
    793e:	4b15      	ldr	r3, [pc, #84]	; (7994 <cb_le_promisc+0x304>)
    7940:	4a15      	ldr	r2, [pc, #84]	; (7998 <cb_le_promisc+0x308>)
    7942:	601a      	str	r2, [r3, #0]
			le.crc_verify = 0;
    7944:	4b15      	ldr	r3, [pc, #84]	; (799c <cb_le_promisc+0x30c>)
    7946:	2200      	movs	r2, #0
    7948:	611a      	str	r2, [r3, #16]
			le_promisc_state(0, &le.access_address, 4);
    794a:	2000      	movs	r0, #0
    794c:	4913      	ldr	r1, [pc, #76]	; (799c <cb_le_promisc+0x30c>)
    794e:	2204      	movs	r2, #4
    7950:	f7ff fc50 	bl	71f4 <le_promisc_state>
			// quit using the old stuff and switch to sync mode
			return 0;
    7954:	2300      	movs	r3, #0
    7956:	e006      	b.n	7966 <cb_le_promisc+0x2d6>
		enqueue(LE_PACKET, idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    7958:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    795a:	3301      	adds	r3, #1
    795c:	67fb      	str	r3, [r7, #124]	; 0x7c
    795e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7960:	2b1f      	cmp	r3, #31
    7962:	dddb      	ble.n	791c <cb_le_promisc+0x28c>
			// quit using the old stuff and switch to sync mode
			return 0;
		}
	}

	return 1;
    7964:	2301      	movs	r3, #1
}
    7966:	4618      	mov	r0, r3
    7968:	3784      	adds	r7, #132	; 0x84
    796a:	46bd      	mov	sp, r7
    796c:	bd90      	pop	{r4, r7, pc}
    796e:	bf00      	nop
    7970:	1000049c 	.word	0x1000049c
    7974:	0000b338 	.word	0x0000b338
    7978:	0000b2b8 	.word	0x0000b2b8
    797c:	02040811 	.word	0x02040811
    7980:	0000bb54 	.word	0x0000bb54
    7984:	10000454 	.word	0x10000454
    7988:	10000bec 	.word	0x10000bec
    798c:	10000998 	.word	0x10000998
    7990:	00006d79 	.word	0x00006d79
    7994:	1000099c 	.word	0x1000099c
    7998:	0000752d 	.word	0x0000752d
    799c:	10000458 	.word	0x10000458

000079a0 <bt_promisc_le>:

void bt_promisc_le() {
    79a0:	b580      	push	{r7, lr}
    79a2:	af00      	add	r7, sp, #0
	while (requested_mode == MODE_BT_PROMISC_LE) {
    79a4:	e02c      	b.n	7a00 <bt_promisc_le+0x60>
		reset_le_promisc();
    79a6:	f7fe fdad 	bl	6504 <reset_le_promisc>

		// jump to a random data channel and turn up the squelch
		if ((channel & 1) == 1)
    79aa:	4b18      	ldr	r3, [pc, #96]	; (7a0c <bt_promisc_le+0x6c>)
    79ac:	881b      	ldrh	r3, [r3, #0]
    79ae:	b29b      	uxth	r3, r3
    79b0:	f003 0301 	and.w	r3, r3, #1
    79b4:	2b00      	cmp	r3, #0
    79b6:	d003      	beq.n	79c0 <bt_promisc_le+0x20>
			channel = 2440;
    79b8:	4b14      	ldr	r3, [pc, #80]	; (7a0c <bt_promisc_le+0x6c>)
    79ba:	f640 1288 	movw	r2, #2440	; 0x988
    79be:	801a      	strh	r2, [r3, #0]

		// if the PC hasn't given us AA, determine by listening
		if (!le.target_set) {
    79c0:	4b13      	ldr	r3, [pc, #76]	; (7a10 <bt_promisc_le+0x70>)
    79c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    79c4:	2b00      	cmp	r3, #0
    79c6:	d107      	bne.n	79d8 <bt_promisc_le+0x38>
			// cs_threshold_req = -80;
			cs_threshold_calc_and_set();
    79c8:	f7fc ff10 	bl	47ec <cs_threshold_calc_and_set>
			data_cb = cb_le_promisc;
    79cc:	4b11      	ldr	r3, [pc, #68]	; (7a14 <bt_promisc_le+0x74>)
    79ce:	4a12      	ldr	r2, [pc, #72]	; (7a18 <bt_promisc_le+0x78>)
    79d0:	601a      	str	r2, [r3, #0]
			bt_generic_le(MODE_BT_PROMISC_LE);
    79d2:	200a      	movs	r0, #10
    79d4:	f7fe fda6 	bl	6524 <bt_generic_le>
		}

		// could have got mode change in middle of above
		if (requested_mode != MODE_BT_PROMISC_LE)
    79d8:	4b10      	ldr	r3, [pc, #64]	; (7a1c <bt_promisc_le+0x7c>)
    79da:	781b      	ldrb	r3, [r3, #0]
    79dc:	b2db      	uxtb	r3, r3
    79de:	2b0a      	cmp	r3, #10
    79e0:	d000      	beq.n	79e4 <bt_promisc_le+0x44>
			break;
    79e2:	e012      	b.n	7a0a <bt_promisc_le+0x6a>

		le_promisc_state(0, &le.access_address, 4);
    79e4:	2000      	movs	r0, #0
    79e6:	490a      	ldr	r1, [pc, #40]	; (7a10 <bt_promisc_le+0x70>)
    79e8:	2204      	movs	r2, #4
    79ea:	f7ff fc03 	bl	71f4 <le_promisc_state>
		packet_cb = promisc_follow_cb;
    79ee:	4b0c      	ldr	r3, [pc, #48]	; (7a20 <bt_promisc_le+0x80>)
    79f0:	4a0c      	ldr	r2, [pc, #48]	; (7a24 <bt_promisc_le+0x84>)
    79f2:	601a      	str	r2, [r3, #0]
		le.crc_verify = 0;
    79f4:	4b06      	ldr	r3, [pc, #24]	; (7a10 <bt_promisc_le+0x70>)
    79f6:	2200      	movs	r2, #0
    79f8:	611a      	str	r2, [r3, #16]
		bt_le_sync(MODE_BT_PROMISC_LE);
    79fa:	200a      	movs	r0, #10
    79fc:	f7fe ff0e 	bl	681c <bt_le_sync>

	return 1;
}

void bt_promisc_le() {
	while (requested_mode == MODE_BT_PROMISC_LE) {
    7a00:	4b06      	ldr	r3, [pc, #24]	; (7a1c <bt_promisc_le+0x7c>)
    7a02:	781b      	ldrb	r3, [r3, #0]
    7a04:	b2db      	uxtb	r3, r3
    7a06:	2b0a      	cmp	r3, #10
    7a08:	d0cd      	beq.n	79a6 <bt_promisc_le+0x6>
		le_promisc_state(0, &le.access_address, 4);
		packet_cb = promisc_follow_cb;
		le.crc_verify = 0;
		bt_le_sync(MODE_BT_PROMISC_LE);
	}
}
    7a0a:	bd80      	pop	{r7, pc}
    7a0c:	1000049c 	.word	0x1000049c
    7a10:	10000458 	.word	0x10000458
    7a14:	10000998 	.word	0x10000998
    7a18:	00007691 	.word	0x00007691
    7a1c:	10000a3f 	.word	0x10000a3f
    7a20:	1000099c 	.word	0x1000099c
    7a24:	0000752d 	.word	0x0000752d

00007a28 <bt_slave_le>:

void bt_slave_le() {
    7a28:	b590      	push	{r4, r7, lr}
    7a2a:	b089      	sub	sp, #36	; 0x24
    7a2c:	af00      	add	r7, sp, #0
	u32 calc_crc;
	int i;

	u8 adv_ind[] = {
    7a2e:	4a35      	ldr	r2, [pc, #212]	; (7b04 <bt_slave_le+0xdc>)
    7a30:	1d3b      	adds	r3, r7, #4
    7a32:	4614      	mov	r4, r2
    7a34:	6820      	ldr	r0, [r4, #0]
    7a36:	6861      	ldr	r1, [r4, #4]
    7a38:	68a2      	ldr	r2, [r4, #8]
    7a3a:	c307      	stmia	r3!, {r0, r1, r2}
    7a3c:	89a2      	ldrh	r2, [r4, #12]
    7a3e:	801a      	strh	r2, [r3, #0]

		// CRC (calc)
		0xff, 0xff, 0xff,
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;
    7a40:	230b      	movs	r3, #11
    7a42:	76fb      	strb	r3, [r7, #27]

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    7a44:	2300      	movs	r3, #0
    7a46:	61fb      	str	r3, [r7, #28]
    7a48:	e00e      	b.n	7a68 <bt_slave_le+0x40>
		adv_ind[i+2] = slave_mac_address[5-i];
    7a4a:	69fb      	ldr	r3, [r7, #28]
    7a4c:	3302      	adds	r3, #2
    7a4e:	69fa      	ldr	r2, [r7, #28]
    7a50:	f1c2 0205 	rsb	r2, r2, #5
    7a54:	492c      	ldr	r1, [pc, #176]	; (7b08 <bt_slave_le+0xe0>)
    7a56:	5c8a      	ldrb	r2, [r1, r2]
    7a58:	f107 0120 	add.w	r1, r7, #32
    7a5c:	440b      	add	r3, r1
    7a5e:	f803 2c1c 	strb.w	r2, [r3, #-28]
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    7a62:	69fb      	ldr	r3, [r7, #28]
    7a64:	3301      	adds	r3, #1
    7a66:	61fb      	str	r3, [r7, #28]
    7a68:	69fb      	ldr	r3, [r7, #28]
    7a6a:	2b05      	cmp	r3, #5
    7a6c:	dded      	ble.n	7a4a <bt_slave_le+0x22>
		adv_ind[i+2] = slave_mac_address[5-i];

	calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind, adv_ind_len);
    7a6e:	4b27      	ldr	r3, [pc, #156]	; (7b0c <bt_slave_le+0xe4>)
    7a70:	68d9      	ldr	r1, [r3, #12]
    7a72:	7efb      	ldrb	r3, [r7, #27]
    7a74:	1d3a      	adds	r2, r7, #4
    7a76:	4608      	mov	r0, r1
    7a78:	4611      	mov	r1, r2
    7a7a:	461a      	mov	r2, r3
    7a7c:	f000 fdd8 	bl	8630 <btle_calc_crc>
    7a80:	6178      	str	r0, [r7, #20]
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
    7a82:	7efb      	ldrb	r3, [r7, #27]
    7a84:	697a      	ldr	r2, [r7, #20]
    7a86:	b2d2      	uxtb	r2, r2
    7a88:	f107 0120 	add.w	r1, r7, #32
    7a8c:	440b      	add	r3, r1
    7a8e:	f803 2c1c 	strb.w	r2, [r3, #-28]
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
    7a92:	7efb      	ldrb	r3, [r7, #27]
    7a94:	3301      	adds	r3, #1
    7a96:	697a      	ldr	r2, [r7, #20]
    7a98:	0a12      	lsrs	r2, r2, #8
    7a9a:	b2d2      	uxtb	r2, r2
    7a9c:	f107 0120 	add.w	r1, r7, #32
    7aa0:	440b      	add	r3, r1
    7aa2:	f803 2c1c 	strb.w	r2, [r3, #-28]
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;
    7aa6:	7efb      	ldrb	r3, [r7, #27]
    7aa8:	3302      	adds	r3, #2
    7aaa:	697a      	ldr	r2, [r7, #20]
    7aac:	0c12      	lsrs	r2, r2, #16
    7aae:	b2d2      	uxtb	r2, r2
    7ab0:	f107 0120 	add.w	r1, r7, #32
    7ab4:	440b      	add	r3, r1
    7ab6:	f803 2c1c 	strb.w	r2, [r3, #-28]

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
    7aba:	e01b      	b.n	7af4 <bt_slave_le+0xcc>
		ICER0 = ICER0_ICE_USB;
    7abc:	4b14      	ldr	r3, [pc, #80]	; (7b10 <bt_slave_le+0xe8>)
    7abe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7ac2:	601a      	str	r2, [r3, #0]
		ICER0 = ICER0_ICE_DMA;
    7ac4:	4b12      	ldr	r3, [pc, #72]	; (7b10 <bt_slave_le+0xe8>)
    7ac6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    7aca:	601a      	str	r2, [r3, #0]
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
    7acc:	7efb      	ldrb	r3, [r7, #27]
    7ace:	3303      	adds	r3, #3
    7ad0:	b2da      	uxtb	r2, r3
    7ad2:	1d3b      	adds	r3, r7, #4
    7ad4:	480f      	ldr	r0, [pc, #60]	; (7b14 <bt_slave_le+0xec>)
    7ad6:	4611      	mov	r1, r2
    7ad8:	461a      	mov	r2, r3
    7ada:	f7fe f923 	bl	5d24 <le_transmit>
		ISER0 = ISER0_ISE_USB;
    7ade:	4b0e      	ldr	r3, [pc, #56]	; (7b18 <bt_slave_le+0xf0>)
    7ae0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7ae4:	601a      	str	r2, [r3, #0]
		ISER0 = ISER0_ISE_DMA;
    7ae6:	4b0c      	ldr	r3, [pc, #48]	; (7b18 <bt_slave_le+0xf0>)
    7ae8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    7aec:	601a      	str	r2, [r3, #0]
		msleep(100);
    7aee:	2064      	movs	r0, #100	; 0x64
    7af0:	f7fd fd42 	bl	5578 <msleep>
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
    7af4:	4b09      	ldr	r3, [pc, #36]	; (7b1c <bt_slave_le+0xf4>)
    7af6:	781b      	ldrb	r3, [r3, #0]
    7af8:	b2db      	uxtb	r3, r3
    7afa:	2b0c      	cmp	r3, #12
    7afc:	d0de      	beq.n	7abc <bt_slave_le+0x94>
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
		ISER0 = ISER0_ISE_USB;
		ISER0 = ISER0_ISE_DMA;
		msleep(100);
	}
}
    7afe:	3724      	adds	r7, #36	; 0x24
    7b00:	46bd      	mov	sp, r7
    7b02:	bd90      	pop	{r4, r7, pc}
    7b04:	0000bb64 	.word	0x0000bb64
    7b08:	1000098c 	.word	0x1000098c
    7b0c:	10000458 	.word	0x10000458
    7b10:	e000e180 	.word	0xe000e180
    7b14:	8e89bed6 	.word	0x8e89bed6
    7b18:	e000e100 	.word	0xe000e100
    7b1c:	10000a3f 	.word	0x10000a3f

00007b20 <specan>:

/* spectrum analysis */
void specan()
{
    7b20:	b590      	push	{r4, r7, lr}
    7b22:	b091      	sub	sp, #68	; 0x44
    7b24:	af00      	add	r7, sp, #0
	u8 epstat;
	u16 f;
	u8 i = 0;
    7b26:	2300      	movs	r3, #0
    7b28:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	u8 buf[DMA_SIZE];

	RXLED_SET;
    7b2c:	4b5a      	ldr	r3, [pc, #360]	; (7c98 <specan+0x178>)
    7b2e:	2210      	movs	r2, #16
    7b30:	601a      	str	r2, [r3, #0]

	queue_init();
    7b32:	f000 fe9f 	bl	8874 <queue_init>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7b36:	4b59      	ldr	r3, [pc, #356]	; (7c9c <specan+0x17c>)
    7b38:	2280      	movs	r2, #128	; 0x80
    7b3a:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    7b3c:	2012      	movs	r0, #18
    7b3e:	f642 3122 	movw	r1, #11042	; 0x2b22
    7b42:	f002 f911 	bl	9d68 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    7b46:	2014      	movs	r0, #20
    7b48:	f241 314b 	movw	r1, #4939	; 0x134b
    7b4c:	f002 f90c 	bl	9d68 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    7b50:	2020      	movs	r0, #32
    7b52:	f240 1101 	movw	r1, #257	; 0x101
    7b56:	f002 f907 	bl	9d68 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    7b5a:	2003      	movs	r0, #3
    7b5c:	2129      	movs	r1, #41	; 0x29
    7b5e:	f002 f903 	bl	9d68 <cc2400_set>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
    7b62:	bf00      	nop
    7b64:	f002 f9b8 	bl	9ed8 <cc2400_status>
    7b68:	4603      	mov	r3, r0
    7b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7b6e:	2b00      	cmp	r3, #0
    7b70:	d0f8      	beq.n	7b64 <specan+0x44>
	while ((cc2400_status() & FS_LOCK));
    7b72:	bf00      	nop
    7b74:	f002 f9b0 	bl	9ed8 <cc2400_status>
    7b78:	4603      	mov	r3, r0
    7b7a:	f003 0304 	and.w	r3, r3, #4
    7b7e:	2b00      	cmp	r3, #0
    7b80:	d1f8      	bne.n	7b74 <specan+0x54>

	while (requested_mode == MODE_SPECAN) {
    7b82:	e07a      	b.n	7c7a <specan+0x15a>
		for (f = low_freq; f < high_freq + 1; f++) {
    7b84:	4b46      	ldr	r3, [pc, #280]	; (7ca0 <specan+0x180>)
    7b86:	881b      	ldrh	r3, [r3, #0]
    7b88:	87fb      	strh	r3, [r7, #62]	; 0x3e
    7b8a:	e06f      	b.n	7c6c <specan+0x14c>
			cc2400_set(FSDIV, f - 1);
    7b8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    7b8e:	3b01      	subs	r3, #1
    7b90:	b29b      	uxth	r3, r3
    7b92:	2002      	movs	r0, #2
    7b94:	4619      	mov	r1, r3
    7b96:	f002 f8e7 	bl	9d68 <cc2400_set>
			cc2400_strobe(SFSON);
    7b9a:	2061      	movs	r0, #97	; 0x61
    7b9c:	f002 f9a6 	bl	9eec <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    7ba0:	bf00      	nop
    7ba2:	f002 f999 	bl	9ed8 <cc2400_status>
    7ba6:	4603      	mov	r3, r0
    7ba8:	f003 0304 	and.w	r3, r3, #4
    7bac:	2b00      	cmp	r3, #0
    7bae:	d0f8      	beq.n	7ba2 <specan+0x82>
			cc2400_strobe(SRX);
    7bb0:	2062      	movs	r0, #98	; 0x62
    7bb2:	f002 f99b 	bl	9eec <cc2400_strobe>

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
    7bb6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    7bba:	607b      	str	r3, [r7, #4]
    7bbc:	bf00      	nop
    7bbe:	687b      	ldr	r3, [r7, #4]
    7bc0:	3b01      	subs	r3, #1
    7bc2:	607b      	str	r3, [r7, #4]
    7bc4:	2b00      	cmp	r3, #0
    7bc6:	d1fa      	bne.n	7bbe <specan+0x9e>
			buf[3 * i] = (f >> 8) & 0xFF;
    7bc8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    7bcc:	4613      	mov	r3, r2
    7bce:	005b      	lsls	r3, r3, #1
    7bd0:	4413      	add	r3, r2
    7bd2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    7bd4:	0a12      	lsrs	r2, r2, #8
    7bd6:	b292      	uxth	r2, r2
    7bd8:	b2d2      	uxtb	r2, r2
    7bda:	f107 0140 	add.w	r1, r7, #64	; 0x40
    7bde:	440b      	add	r3, r1
    7be0:	f803 2c38 	strb.w	r2, [r3, #-56]
			buf[(3 * i) + 1] = f  & 0xFF;
    7be4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    7be8:	4613      	mov	r3, r2
    7bea:	005b      	lsls	r3, r3, #1
    7bec:	4413      	add	r3, r2
    7bee:	3301      	adds	r3, #1
    7bf0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    7bf2:	b2d2      	uxtb	r2, r2
    7bf4:	f107 0140 	add.w	r1, r7, #64	; 0x40
    7bf8:	440b      	add	r3, r1
    7bfa:	f803 2c38 	strb.w	r2, [r3, #-56]
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    7bfe:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    7c02:	4613      	mov	r3, r2
    7c04:	005b      	lsls	r3, r3, #1
    7c06:	4413      	add	r3, r2
    7c08:	1c9c      	adds	r4, r3, #2
    7c0a:	2006      	movs	r0, #6
    7c0c:	f002 f896 	bl	9d3c <cc2400_get>
    7c10:	4603      	mov	r3, r0
    7c12:	0a1b      	lsrs	r3, r3, #8
    7c14:	b29b      	uxth	r3, r3
    7c16:	b2da      	uxtb	r2, r3
    7c18:	f107 0340 	add.w	r3, r7, #64	; 0x40
    7c1c:	4423      	add	r3, r4
    7c1e:	f803 2c38 	strb.w	r2, [r3, #-56]
			i++;
    7c22:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    7c26:	3301      	adds	r3, #1
    7c28:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			if (i == 16) {
    7c2c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    7c30:	2b10      	cmp	r3, #16
    7c32:	d10d      	bne.n	7c50 <specan+0x130>
				enqueue(SPECAN, buf);
    7c34:	f107 0308 	add.w	r3, r7, #8
    7c38:	2004      	movs	r0, #4
    7c3a:	4619      	mov	r1, r3
    7c3c:	f7fc fc68 	bl	4510 <enqueue>
				i = 0;
    7c40:	2300      	movs	r3, #0
    7c42:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

				handle_usb(clkn);
    7c46:	4b17      	ldr	r3, [pc, #92]	; (7ca4 <specan+0x184>)
    7c48:	681b      	ldr	r3, [r3, #0]
    7c4a:	4618      	mov	r0, r3
    7c4c:	f000 feb2 	bl	89b4 <handle_usb>
			}

			cc2400_strobe(SRFOFF);
    7c50:	2064      	movs	r0, #100	; 0x64
    7c52:	f002 f94b 	bl	9eec <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    7c56:	bf00      	nop
    7c58:	f002 f93e 	bl	9ed8 <cc2400_status>
    7c5c:	4603      	mov	r3, r0
    7c5e:	f003 0304 	and.w	r3, r3, #4
    7c62:	2b00      	cmp	r3, #0
    7c64:	d1f8      	bne.n	7c58 <specan+0x138>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
		for (f = low_freq; f < high_freq + 1; f++) {
    7c66:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    7c68:	3301      	adds	r3, #1
    7c6a:	87fb      	strh	r3, [r7, #62]	; 0x3e
    7c6c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    7c6e:	4b0e      	ldr	r3, [pc, #56]	; (7ca8 <specan+0x188>)
    7c70:	881b      	ldrh	r3, [r3, #0]
    7c72:	b29b      	uxth	r3, r3
    7c74:	3301      	adds	r3, #1
    7c76:	429a      	cmp	r2, r3
    7c78:	db88      	blt.n	7b8c <specan+0x6c>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
    7c7a:	4b0c      	ldr	r3, [pc, #48]	; (7cac <specan+0x18c>)
    7c7c:	781b      	ldrb	r3, [r3, #0]
    7c7e:	b2db      	uxtb	r3, r3
    7c80:	2b04      	cmp	r3, #4
    7c82:	f43f af7f 	beq.w	7b84 <specan+0x64>

			cc2400_strobe(SRFOFF);
			while ((cc2400_status() & FS_LOCK));
		}
	}
	mode = MODE_IDLE;
    7c86:	4b0a      	ldr	r3, [pc, #40]	; (7cb0 <specan+0x190>)
    7c88:	2200      	movs	r2, #0
    7c8a:	701a      	strb	r2, [r3, #0]
	RXLED_CLR;
    7c8c:	4b09      	ldr	r3, [pc, #36]	; (7cb4 <specan+0x194>)
    7c8e:	2210      	movs	r2, #16
    7c90:	601a      	str	r2, [r3, #0]
}
    7c92:	3744      	adds	r7, #68	; 0x44
    7c94:	46bd      	mov	sp, r7
    7c96:	bd90      	pop	{r4, r7, pc}
    7c98:	2009c038 	.word	0x2009c038
    7c9c:	2009c058 	.word	0x2009c058
    7ca0:	1000049e 	.word	0x1000049e
    7ca4:	10000be4 	.word	0x10000be4
    7ca8:	100004a0 	.word	0x100004a0
    7cac:	10000a3f 	.word	0x10000a3f
    7cb0:	10000a3e 	.word	0x10000a3e
    7cb4:	2009c03c 	.word	0x2009c03c

00007cb8 <led_specan>:

/* LED based spectrum analysis */
void led_specan()
{
    7cb8:	b580      	push	{r7, lr}
    7cba:	b084      	sub	sp, #16
    7cbc:	af00      	add	r7, sp, #0
	int8_t lvl;
	u8 i = 0;
    7cbe:	2300      	movs	r3, #0
    7cc0:	73fb      	strb	r3, [r7, #15]
	u16 channels[3] = {2412, 2437, 2462};
    7cc2:	4a5b      	ldr	r2, [pc, #364]	; (7e30 <led_specan+0x178>)
    7cc4:	f107 0308 	add.w	r3, r7, #8
    7cc8:	6810      	ldr	r0, [r2, #0]
    7cca:	6018      	str	r0, [r3, #0]
    7ccc:	8892      	ldrh	r2, [r2, #4]
    7cce:	809a      	strh	r2, [r3, #4]
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7cd0:	4b58      	ldr	r3, [pc, #352]	; (7e34 <led_specan+0x17c>)
    7cd2:	2280      	movs	r2, #128	; 0x80
    7cd4:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    7cd6:	2012      	movs	r0, #18
    7cd8:	f642 3122 	movw	r1, #11042	; 0x2b22
    7cdc:	f002 f844 	bl	9d68 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    7ce0:	2014      	movs	r0, #20
    7ce2:	f241 314b 	movw	r1, #4939	; 0x134b
    7ce6:	f002 f83f 	bl	9d68 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    7cea:	2020      	movs	r0, #32
    7cec:	f240 1101 	movw	r1, #257	; 0x101
    7cf0:	f002 f83a 	bl	9d68 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    7cf4:	2003      	movs	r0, #3
    7cf6:	2129      	movs	r1, #41	; 0x29
    7cf8:	f002 f836 	bl	9d68 <cc2400_set>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols
    7cfc:	2006      	movs	r0, #6
    7cfe:	21f1      	movs	r1, #241	; 0xf1
    7d00:	f002 f832 	bl	9d68 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    7d04:	bf00      	nop
    7d06:	f002 f8e7 	bl	9ed8 <cc2400_status>
    7d0a:	4603      	mov	r3, r0
    7d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7d10:	2b00      	cmp	r3, #0
    7d12:	d0f8      	beq.n	7d06 <led_specan+0x4e>
	while ((cc2400_status() & FS_LOCK));
    7d14:	bf00      	nop
    7d16:	f002 f8df 	bl	9ed8 <cc2400_status>
    7d1a:	4603      	mov	r3, r0
    7d1c:	f003 0304 	and.w	r3, r3, #4
    7d20:	2b00      	cmp	r3, #0
    7d22:	d1f8      	bne.n	7d16 <led_specan+0x5e>

	while (requested_mode == MODE_LED_SPECAN) {
    7d24:	e079      	b.n	7e1a <led_specan+0x162>
		cc2400_set(FSDIV, channels[i] - 1);
    7d26:	7bfb      	ldrb	r3, [r7, #15]
    7d28:	005b      	lsls	r3, r3, #1
    7d2a:	f107 0210 	add.w	r2, r7, #16
    7d2e:	4413      	add	r3, r2
    7d30:	f833 3c08 	ldrh.w	r3, [r3, #-8]
    7d34:	3b01      	subs	r3, #1
    7d36:	b29b      	uxth	r3, r3
    7d38:	2002      	movs	r0, #2
    7d3a:	4619      	mov	r1, r3
    7d3c:	f002 f814 	bl	9d68 <cc2400_set>
		cc2400_strobe(SFSON);
    7d40:	2061      	movs	r0, #97	; 0x61
    7d42:	f002 f8d3 	bl	9eec <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    7d46:	bf00      	nop
    7d48:	f002 f8c6 	bl	9ed8 <cc2400_status>
    7d4c:	4603      	mov	r3, r0
    7d4e:	f003 0304 	and.w	r3, r3, #4
    7d52:	2b00      	cmp	r3, #0
    7d54:	d0f8      	beq.n	7d48 <led_specan+0x90>
		cc2400_strobe(SRX);
    7d56:	2062      	movs	r0, #98	; 0x62
    7d58:	f002 f8c8 	bl	9eec <cc2400_strobe>

		/* give the CC2400 time to acquire RSSI reading */
		volatile u32 j = 500; while (--j); //FIXME crude delay
    7d5c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    7d60:	607b      	str	r3, [r7, #4]
    7d62:	bf00      	nop
    7d64:	687b      	ldr	r3, [r7, #4]
    7d66:	3b01      	subs	r3, #1
    7d68:	607b      	str	r3, [r7, #4]
    7d6a:	2b00      	cmp	r3, #0
    7d6c:	d1fa      	bne.n	7d64 <led_specan+0xac>
		lvl = cc2400_get(RSSI) >> 8;
    7d6e:	2006      	movs	r0, #6
    7d70:	f001 ffe4 	bl	9d3c <cc2400_get>
    7d74:	4603      	mov	r3, r0
    7d76:	0a1b      	lsrs	r3, r3, #8
    7d78:	b29b      	uxth	r3, r3
    7d7a:	73bb      	strb	r3, [r7, #14]
        if (lvl > rssi_threshold) {
    7d7c:	4b2e      	ldr	r3, [pc, #184]	; (7e38 <led_specan+0x180>)
    7d7e:	781b      	ldrb	r3, [r3, #0]
    7d80:	b2db      	uxtb	r3, r3
    7d82:	f997 200e 	ldrsb.w	r2, [r7, #14]
    7d86:	b25b      	sxtb	r3, r3
    7d88:	429a      	cmp	r2, r3
    7d8a:	dd15      	ble.n	7db8 <led_specan+0x100>
            switch (i) {
    7d8c:	7bfb      	ldrb	r3, [r7, #15]
    7d8e:	2b01      	cmp	r3, #1
    7d90:	d009      	beq.n	7da6 <led_specan+0xee>
    7d92:	2b02      	cmp	r3, #2
    7d94:	d00b      	beq.n	7dae <led_specan+0xf6>
    7d96:	2b00      	cmp	r3, #0
    7d98:	d000      	beq.n	7d9c <led_specan+0xe4>
    7d9a:	e021      	b.n	7de0 <led_specan+0x128>
                case 0:
                    TXLED_SET;
    7d9c:	4b27      	ldr	r3, [pc, #156]	; (7e3c <led_specan+0x184>)
    7d9e:	f44f 7280 	mov.w	r2, #256	; 0x100
    7da2:	601a      	str	r2, [r3, #0]
                    break;
    7da4:	e007      	b.n	7db6 <led_specan+0xfe>
                case 1:
                    RXLED_SET;
    7da6:	4b25      	ldr	r3, [pc, #148]	; (7e3c <led_specan+0x184>)
    7da8:	2210      	movs	r2, #16
    7daa:	601a      	str	r2, [r3, #0]
                    break;
    7dac:	e003      	b.n	7db6 <led_specan+0xfe>
                case 2:
                    USRLED_SET;
    7dae:	4b23      	ldr	r3, [pc, #140]	; (7e3c <led_specan+0x184>)
    7db0:	2202      	movs	r2, #2
    7db2:	601a      	str	r2, [r3, #0]
                    break;
    7db4:	bf00      	nop
    7db6:	e013      	b.n	7de0 <led_specan+0x128>
            }
        }
        else {
            switch (i) {
    7db8:	7bfb      	ldrb	r3, [r7, #15]
    7dba:	2b01      	cmp	r3, #1
    7dbc:	d008      	beq.n	7dd0 <led_specan+0x118>
    7dbe:	2b02      	cmp	r3, #2
    7dc0:	d00a      	beq.n	7dd8 <led_specan+0x120>
    7dc2:	2b00      	cmp	r3, #0
    7dc4:	d10c      	bne.n	7de0 <led_specan+0x128>
                case 0:
                    TXLED_CLR;
    7dc6:	4b1e      	ldr	r3, [pc, #120]	; (7e40 <led_specan+0x188>)
    7dc8:	f44f 7280 	mov.w	r2, #256	; 0x100
    7dcc:	601a      	str	r2, [r3, #0]
                    break;
    7dce:	e007      	b.n	7de0 <led_specan+0x128>
                case 1:
                    RXLED_CLR;
    7dd0:	4b1b      	ldr	r3, [pc, #108]	; (7e40 <led_specan+0x188>)
    7dd2:	2210      	movs	r2, #16
    7dd4:	601a      	str	r2, [r3, #0]
                    break;
    7dd6:	e003      	b.n	7de0 <led_specan+0x128>
                case 2:
                    USRLED_CLR;
    7dd8:	4b19      	ldr	r3, [pc, #100]	; (7e40 <led_specan+0x188>)
    7dda:	2202      	movs	r2, #2
    7ddc:	601a      	str	r2, [r3, #0]
                    break;
    7dde:	bf00      	nop
            }
        }

		i = (i+1) % 3;
    7de0:	7bfb      	ldrb	r3, [r7, #15]
    7de2:	1c5a      	adds	r2, r3, #1
    7de4:	4b17      	ldr	r3, [pc, #92]	; (7e44 <led_specan+0x18c>)
    7de6:	fb83 3102 	smull	r3, r1, r3, r2
    7dea:	17d3      	asrs	r3, r2, #31
    7dec:	1ac9      	subs	r1, r1, r3
    7dee:	460b      	mov	r3, r1
    7df0:	005b      	lsls	r3, r3, #1
    7df2:	440b      	add	r3, r1
    7df4:	1ad1      	subs	r1, r2, r3
    7df6:	460b      	mov	r3, r1
    7df8:	73fb      	strb	r3, [r7, #15]

		handle_usb(clkn);
    7dfa:	4b13      	ldr	r3, [pc, #76]	; (7e48 <led_specan+0x190>)
    7dfc:	681b      	ldr	r3, [r3, #0]
    7dfe:	4618      	mov	r0, r3
    7e00:	f000 fdd8 	bl	89b4 <handle_usb>
        //wait(1);
		cc2400_strobe(SRFOFF);
    7e04:	2064      	movs	r0, #100	; 0x64
    7e06:	f002 f871 	bl	9eec <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    7e0a:	bf00      	nop
    7e0c:	f002 f864 	bl	9ed8 <cc2400_status>
    7e10:	4603      	mov	r3, r0
    7e12:	f003 0304 	and.w	r3, r3, #4
    7e16:	2b00      	cmp	r3, #0
    7e18:	d1f8      	bne.n	7e0c <led_specan+0x154>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols

	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_LED_SPECAN) {
    7e1a:	4b0c      	ldr	r3, [pc, #48]	; (7e4c <led_specan+0x194>)
    7e1c:	781b      	ldrb	r3, [r3, #0]
    7e1e:	b2db      	uxtb	r3, r3
    7e20:	2b07      	cmp	r3, #7
    7e22:	d080      	beq.n	7d26 <led_specan+0x6e>
		handle_usb(clkn);
        //wait(1);
		cc2400_strobe(SRFOFF);
		while ((cc2400_status() & FS_LOCK));
	}
	mode = MODE_IDLE;
    7e24:	4b0a      	ldr	r3, [pc, #40]	; (7e50 <led_specan+0x198>)
    7e26:	2200      	movs	r2, #0
    7e28:	701a      	strb	r2, [r3, #0]
}
    7e2a:	3710      	adds	r7, #16
    7e2c:	46bd      	mov	sp, r7
    7e2e:	bd80      	pop	{r7, pc}
    7e30:	0000bb74 	.word	0x0000bb74
    7e34:	2009c058 	.word	0x2009c058
    7e38:	100004a2 	.word	0x100004a2
    7e3c:	2009c038 	.word	0x2009c038
    7e40:	2009c03c 	.word	0x2009c03c
    7e44:	55555556 	.word	0x55555556
    7e48:	10000be4 	.word	0x10000be4
    7e4c:	10000a3f 	.word	0x10000a3f
    7e50:	10000a3e 	.word	0x10000a3e

00007e54 <main>:

int main()
{
    7e54:	b580      	push	{r7, lr}
    7e56:	af00      	add	r7, sp, #0
	
	ubertooth_init();
    7e58:	f001 feaa 	bl	9bb0 <ubertooth_init>
	clkn_init();
    7e5c:	f7fd fab2 	bl	53c4 <clkn_init>
	ubertooth_usb_init(vendor_request_handler);
    7e60:	4842      	ldr	r0, [pc, #264]	; (7f6c <main+0x118>)
    7e62:	f000 fcdf 	bl	8824 <ubertooth_usb_init>
//		wait(10);
//		USRLED_CLR;
//	}	

	while (1) {
		handle_usb(clkn);
    7e66:	4b42      	ldr	r3, [pc, #264]	; (7f70 <main+0x11c>)
    7e68:	681b      	ldr	r3, [r3, #0]
    7e6a:	4618      	mov	r0, r3
    7e6c:	f000 fda2 	bl	89b4 <handle_usb>
		if(requested_mode != mode)
    7e70:	4b40      	ldr	r3, [pc, #256]	; (7f74 <main+0x120>)
    7e72:	781b      	ldrb	r3, [r3, #0]
    7e74:	b2da      	uxtb	r2, r3
    7e76:	4b40      	ldr	r3, [pc, #256]	; (7f78 <main+0x124>)
    7e78:	781b      	ldrb	r3, [r3, #0]
    7e7a:	b2db      	uxtb	r3, r3
    7e7c:	429a      	cmp	r2, r3
    7e7e:	d074      	beq.n	7f6a <main+0x116>
			switch (requested_mode) {
    7e80:	4b3c      	ldr	r3, [pc, #240]	; (7f74 <main+0x120>)
    7e82:	781b      	ldrb	r3, [r3, #0]
    7e84:	b2db      	uxtb	r3, r3
    7e86:	2b0d      	cmp	r3, #13
    7e88:	d86e      	bhi.n	7f68 <main+0x114>
    7e8a:	a201      	add	r2, pc, #4	; (adr r2, 7e90 <main+0x3c>)
    7e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7e90:	00007f63 	.word	0x00007f63
    7e94:	00007ed5 	.word	0x00007ed5
    7e98:	00007f69 	.word	0x00007f69
    7e9c:	00007eff 	.word	0x00007eff
    7ea0:	00007f43 	.word	0x00007f43
    7ea4:	00007f0f 	.word	0x00007f0f
    7ea8:	00007f35 	.word	0x00007f35
    7eac:	00007f49 	.word	0x00007f49
    7eb0:	00007ee1 	.word	0x00007ee1
    7eb4:	00007eed 	.word	0x00007eed
    7eb8:	00007ef3 	.word	0x00007ef3
    7ebc:	00007ec9 	.word	0x00007ec9
    7ec0:	00007ef9 	.word	0x00007ef9
    7ec4:	00007f4f 	.word	0x00007f4f
				 case MODE_RESET:
					/* Allow time for the USB command to return correctly */
					wait(1);
    7ec8:	2001      	movs	r0, #1
    7eca:	f001 fd69 	bl	99a0 <wait>
					reset();
    7ece:	f002 f917 	bl	a100 <reset>
					break;
    7ed2:	e04a      	b.n	7f6a <main+0x116>
				case MODE_RX_SYMBOLS:
					mode = MODE_RX_SYMBOLS;
    7ed4:	4b28      	ldr	r3, [pc, #160]	; (7f78 <main+0x124>)
    7ed6:	2201      	movs	r2, #1
    7ed8:	701a      	strb	r2, [r3, #0]
					bt_stream_rx();
    7eda:	f7fe f97d 	bl	61d8 <bt_stream_rx>
					break;
    7ede:	e044      	b.n	7f6a <main+0x116>
				case MODE_BT_FOLLOW:
					mode = MODE_BT_FOLLOW;
    7ee0:	4b25      	ldr	r3, [pc, #148]	; (7f78 <main+0x124>)
    7ee2:	2208      	movs	r2, #8
    7ee4:	701a      	strb	r2, [r3, #0]
					bt_stream_rx();
    7ee6:	f7fe f977 	bl	61d8 <bt_stream_rx>
					break;
    7eea:	e03e      	b.n	7f6a <main+0x116>
				case MODE_BT_FOLLOW_LE:
					bt_follow_le();
    7eec:	f7ff f96e 	bl	71cc <bt_follow_le>
					break;
    7ef0:	e03b      	b.n	7f6a <main+0x116>
				case MODE_BT_PROMISC_LE:
					bt_promisc_le();
    7ef2:	f7ff fd55 	bl	79a0 <bt_promisc_le>
					break;
    7ef6:	e038      	b.n	7f6a <main+0x116>
				case MODE_BT_SLAVE_LE:
					bt_slave_le();
    7ef8:	f7ff fd96 	bl	7a28 <bt_slave_le>
					break;
    7efc:	e035      	b.n	7f6a <main+0x116>
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    7efe:	4b1e      	ldr	r3, [pc, #120]	; (7f78 <main+0x124>)
    7f00:	2203      	movs	r2, #3
    7f02:	701a      	strb	r2, [r3, #0]
					cc2400_txtest(&modulation, &channel);
    7f04:	481d      	ldr	r0, [pc, #116]	; (7f7c <main+0x128>)
    7f06:	491e      	ldr	r1, [pc, #120]	; (7f80 <main+0x12c>)
    7f08:	f001 f8c8 	bl	909c <cc2400_txtest>
					break;
    7f0c:	e02d      	b.n	7f6a <main+0x116>
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    7f0e:	4b1a      	ldr	r3, [pc, #104]	; (7f78 <main+0x124>)
    7f10:	2205      	movs	r2, #5
    7f12:	701a      	strb	r2, [r3, #0]
					cc2400_rangetest(&channel);
    7f14:	481a      	ldr	r0, [pc, #104]	; (7f80 <main+0x12c>)
    7f16:	f000 fd6b 	bl	89f0 <cc2400_rangetest>
					mode = MODE_IDLE;
    7f1a:	4b17      	ldr	r3, [pc, #92]	; (7f78 <main+0x124>)
    7f1c:	2200      	movs	r2, #0
    7f1e:	701a      	strb	r2, [r3, #0]
					if (requested_mode == MODE_RANGE_TEST)
    7f20:	4b14      	ldr	r3, [pc, #80]	; (7f74 <main+0x120>)
    7f22:	781b      	ldrb	r3, [r3, #0]
    7f24:	b2db      	uxtb	r3, r3
    7f26:	2b05      	cmp	r3, #5
    7f28:	d103      	bne.n	7f32 <main+0xde>
						requested_mode = MODE_IDLE;
    7f2a:	4b12      	ldr	r3, [pc, #72]	; (7f74 <main+0x120>)
    7f2c:	2200      	movs	r2, #0
    7f2e:	701a      	strb	r2, [r3, #0]
					break;
    7f30:	e01b      	b.n	7f6a <main+0x116>
    7f32:	e01a      	b.n	7f6a <main+0x116>
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    7f34:	4b10      	ldr	r3, [pc, #64]	; (7f78 <main+0x124>)
    7f36:	2206      	movs	r2, #6
    7f38:	701a      	strb	r2, [r3, #0]
					cc2400_repeater(&channel);
    7f3a:	4811      	ldr	r0, [pc, #68]	; (7f80 <main+0x12c>)
    7f3c:	f000 ff76 	bl	8e2c <cc2400_repeater>
					break;
    7f40:	e013      	b.n	7f6a <main+0x116>
				case MODE_SPECAN:
					specan();
    7f42:	f7ff fded 	bl	7b20 <specan>
					break;
    7f46:	e010      	b.n	7f6a <main+0x116>
				case MODE_LED_SPECAN:
					led_specan();
    7f48:	f7ff feb6 	bl	7cb8 <led_specan>
					break;
    7f4c:	e00d      	b.n	7f6a <main+0x116>
				case MODE_EGO:
					mode = MODE_EGO;
    7f4e:	4b0a      	ldr	r3, [pc, #40]	; (7f78 <main+0x124>)
    7f50:	220d      	movs	r2, #13
    7f52:	701a      	strb	r2, [r3, #0]
					ego_main(ego_mode);
    7f54:	4b0b      	ldr	r3, [pc, #44]	; (7f84 <main+0x130>)
    7f56:	781b      	ldrb	r3, [r3, #0]
    7f58:	b2db      	uxtb	r3, r3
    7f5a:	4618      	mov	r0, r3
    7f5c:	f001 fc6e 	bl	983c <ego_main>
					break;
    7f60:	e003      	b.n	7f6a <main+0x116>
				case MODE_IDLE:
					cc2400_idle();
    7f62:	f7fd fde7 	bl	5b34 <cc2400_idle>
					break;
    7f66:	e000      	b.n	7f6a <main+0x116>
				default:
					/* This is really an error state, but what can you do? */
					break;
    7f68:	bf00      	nop
			}
	}
    7f6a:	e77c      	b.n	7e66 <main+0x12>
    7f6c:	000048d9 	.word	0x000048d9
    7f70:	10000be4 	.word	0x10000be4
    7f74:	10000a3f 	.word	0x10000a3f
    7f78:	10000a3e 	.word	0x10000a3e
    7f7c:	10000a42 	.word	0x10000a42
    7f80:	1000049c 	.word	0x1000049c
    7f84:	10000a41 	.word	0x10000a41

00007f88 <count_bits>:
u8 afh_bank[CHANNELS];
u8 used_channels;

/* count the number of 1 bits in a uint64_t */
uint8_t count_bits(uint64_t n)
{
    7f88:	b480      	push	{r7}
    7f8a:	b085      	sub	sp, #20
    7f8c:	af00      	add	r7, sp, #0
    7f8e:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t i = 0;
    7f92:	2300      	movs	r3, #0
    7f94:	73fb      	strb	r3, [r7, #15]
	for (i = 0; n != 0; i++)
    7f96:	2300      	movs	r3, #0
    7f98:	73fb      	strb	r3, [r7, #15]
    7f9a:	e010      	b.n	7fbe <count_bits+0x36>
		n &= n - 1;
    7f9c:	e9d7 2300 	ldrd	r2, r3, [r7]
    7fa0:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    7fa4:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
    7fa8:	e9d7 0100 	ldrd	r0, r1, [r7]
    7fac:	ea02 0200 	and.w	r2, r2, r0
    7fb0:	ea03 0301 	and.w	r3, r3, r1
    7fb4:	e9c7 2300 	strd	r2, r3, [r7]

/* count the number of 1 bits in a uint64_t */
uint8_t count_bits(uint64_t n)
{
	uint8_t i = 0;
	for (i = 0; n != 0; i++)
    7fb8:	7bfb      	ldrb	r3, [r7, #15]
    7fba:	3301      	adds	r3, #1
    7fbc:	73fb      	strb	r3, [r7, #15]
    7fbe:	e9d7 2300 	ldrd	r2, r3, [r7]
    7fc2:	4313      	orrs	r3, r2
    7fc4:	d1ea      	bne.n	7f9c <count_bits+0x14>
		n &= n - 1;
	return i;
    7fc6:	7bfb      	ldrb	r3, [r7, #15]
}
    7fc8:	4618      	mov	r0, r3
    7fca:	3714      	adds	r7, #20
    7fcc:	46bd      	mov	sp, r7
    7fce:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fd2:	4770      	bx	lr

00007fd4 <precalc>:

/* do all of the one time precalculation */
void precalc(void)
{
    7fd4:	b580      	push	{r7, lr}
    7fd6:	b084      	sub	sp, #16
    7fd8:	af00      	add	r7, sp, #0
	u8 i, j, chan;
	u32 address;
	address = target.address & 0xffffffff;
    7fda:	4b7a      	ldr	r3, [pc, #488]	; (81c4 <precalc+0x1f0>)
    7fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
    7fe0:	4613      	mov	r3, r2
    7fe2:	60bb      	str	r3, [r7, #8]
	syncword = 0;
    7fe4:	4978      	ldr	r1, [pc, #480]	; (81c8 <precalc+0x1f4>)
    7fe6:	f04f 0200 	mov.w	r2, #0
    7fea:	f04f 0300 	mov.w	r3, #0
    7fee:	e9c1 2300 	strd	r2, r3, [r1]

	/* populate frequency register bank*/
	for (i = 0; i < CHANNELS; i++)
    7ff2:	2300      	movs	r3, #0
    7ff4:	73fb      	strb	r3, [r7, #15]
    7ff6:	e014      	b.n	8022 <precalc+0x4e>
		bank[i] = ((i * 2) % CHANNELS);
    7ff8:	7bf8      	ldrb	r0, [r7, #15]
    7ffa:	7bfb      	ldrb	r3, [r7, #15]
    7ffc:	0059      	lsls	r1, r3, #1
    7ffe:	4b73      	ldr	r3, [pc, #460]	; (81cc <precalc+0x1f8>)
    8000:	fb83 2301 	smull	r2, r3, r3, r1
    8004:	115a      	asrs	r2, r3, #5
    8006:	17cb      	asrs	r3, r1, #31
    8008:	1ad2      	subs	r2, r2, r3
    800a:	4613      	mov	r3, r2
    800c:	009b      	lsls	r3, r3, #2
    800e:	4413      	add	r3, r2
    8010:	011b      	lsls	r3, r3, #4
    8012:	1a9b      	subs	r3, r3, r2
    8014:	1aca      	subs	r2, r1, r3
    8016:	b2d2      	uxtb	r2, r2
    8018:	4b6d      	ldr	r3, [pc, #436]	; (81d0 <precalc+0x1fc>)
    801a:	541a      	strb	r2, [r3, r0]
	u32 address;
	address = target.address & 0xffffffff;
	syncword = 0;

	/* populate frequency register bank*/
	for (i = 0; i < CHANNELS; i++)
    801c:	7bfb      	ldrb	r3, [r7, #15]
    801e:	3301      	adds	r3, #1
    8020:	73fb      	strb	r3, [r7, #15]
    8022:	7bfb      	ldrb	r3, [r7, #15]
    8024:	2b4e      	cmp	r3, #78	; 0x4e
    8026:	d9e7      	bls.n	7ff8 <precalc+0x24>
		bank[i] = ((i * 2) % CHANNELS);
		/* actual frequency is 2402 + bank[i] MHz */


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
    8028:	68bb      	ldr	r3, [r7, #8]
    802a:	0ddb      	lsrs	r3, r3, #23
    802c:	b2db      	uxtb	r3, r3
    802e:	f003 031f 	and.w	r3, r3, #31
    8032:	b2da      	uxtb	r2, r3
    8034:	4b67      	ldr	r3, [pc, #412]	; (81d4 <precalc+0x200>)
    8036:	701a      	strb	r2, [r3, #0]
	b = (address >> 19) & 0x0f;
    8038:	68bb      	ldr	r3, [r7, #8]
    803a:	0cdb      	lsrs	r3, r3, #19
    803c:	b2db      	uxtb	r3, r3
    803e:	f003 030f 	and.w	r3, r3, #15
    8042:	b2da      	uxtb	r2, r3
    8044:	4b64      	ldr	r3, [pc, #400]	; (81d8 <precalc+0x204>)
    8046:	701a      	strb	r2, [r3, #0]
	c1 = ((address >> 4) & 0x10) +
    8048:	68bb      	ldr	r3, [r7, #8]
    804a:	091b      	lsrs	r3, r3, #4
    804c:	b2db      	uxtb	r3, r3
    804e:	f003 0310 	and.w	r3, r3, #16
    8052:	b2da      	uxtb	r2, r3
		((address >> 3) & 0x08) +
    8054:	68bb      	ldr	r3, [r7, #8]
    8056:	08db      	lsrs	r3, r3, #3


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
	c1 = ((address >> 4) & 0x10) +
    8058:	b2db      	uxtb	r3, r3
    805a:	f003 0308 	and.w	r3, r3, #8
    805e:	b2db      	uxtb	r3, r3
    8060:	4413      	add	r3, r2
    8062:	b2da      	uxtb	r2, r3
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
    8064:	68bb      	ldr	r3, [r7, #8]
    8066:	089b      	lsrs	r3, r3, #2


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
	c1 = ((address >> 4) & 0x10) +
    8068:	b2db      	uxtb	r3, r3
    806a:	f003 0304 	and.w	r3, r3, #4
    806e:	b2db      	uxtb	r3, r3
    8070:	4413      	add	r3, r2
    8072:	b2da      	uxtb	r2, r3
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
    8074:	68bb      	ldr	r3, [r7, #8]
    8076:	085b      	lsrs	r3, r3, #1


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
	c1 = ((address >> 4) & 0x10) +
    8078:	b2db      	uxtb	r3, r3
    807a:	f003 0302 	and.w	r3, r3, #2
    807e:	b2db      	uxtb	r3, r3
    8080:	4413      	add	r3, r2
    8082:	b2da      	uxtb	r2, r3
    8084:	68bb      	ldr	r3, [r7, #8]
    8086:	b2db      	uxtb	r3, r3
    8088:	f003 0301 	and.w	r3, r3, #1
    808c:	b2db      	uxtb	r3, r3
    808e:	4413      	add	r3, r2
    8090:	b2da      	uxtb	r2, r3
    8092:	4b52      	ldr	r3, [pc, #328]	; (81dc <precalc+0x208>)
    8094:	701a      	strb	r2, [r3, #0]
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
    8096:	68bb      	ldr	r3, [r7, #8]
    8098:	0a9b      	lsrs	r3, r3, #10
    809a:	b29b      	uxth	r3, r3
    809c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    80a0:	b29a      	uxth	r2, r3
    80a2:	4b4f      	ldr	r3, [pc, #316]	; (81e0 <precalc+0x20c>)
    80a4:	801a      	strh	r2, [r3, #0]
	e = ((address >> 7) & 0x40) +
    80a6:	68bb      	ldr	r3, [r7, #8]
    80a8:	09db      	lsrs	r3, r3, #7
    80aa:	b2db      	uxtb	r3, r3
    80ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
    80b0:	b2da      	uxtb	r2, r3
		((address >> 6) & 0x20) +
    80b2:	68bb      	ldr	r3, [r7, #8]
    80b4:	099b      	lsrs	r3, r3, #6
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    80b6:	b2db      	uxtb	r3, r3
    80b8:	f003 0320 	and.w	r3, r3, #32
    80bc:	b2db      	uxtb	r3, r3
    80be:	4413      	add	r3, r2
    80c0:	b2da      	uxtb	r2, r3
		((address >> 6) & 0x20) +
		((address >> 5) & 0x10) +
    80c2:	68bb      	ldr	r3, [r7, #8]
    80c4:	095b      	lsrs	r3, r3, #5
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    80c6:	b2db      	uxtb	r3, r3
    80c8:	f003 0310 	and.w	r3, r3, #16
    80cc:	b2db      	uxtb	r3, r3
    80ce:	4413      	add	r3, r2
    80d0:	b2da      	uxtb	r2, r3
		((address >> 6) & 0x20) +
		((address >> 5) & 0x10) +
		((address >> 4) & 0x08) +
    80d2:	68bb      	ldr	r3, [r7, #8]
    80d4:	091b      	lsrs	r3, r3, #4
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    80d6:	b2db      	uxtb	r3, r3
    80d8:	f003 0308 	and.w	r3, r3, #8
    80dc:	b2db      	uxtb	r3, r3
    80de:	4413      	add	r3, r2
    80e0:	b2da      	uxtb	r2, r3
		((address >> 6) & 0x20) +
		((address >> 5) & 0x10) +
		((address >> 4) & 0x08) +
		((address >> 3) & 0x04) +
    80e2:	68bb      	ldr	r3, [r7, #8]
    80e4:	08db      	lsrs	r3, r3, #3
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    80e6:	b2db      	uxtb	r3, r3
    80e8:	f003 0304 	and.w	r3, r3, #4
    80ec:	b2db      	uxtb	r3, r3
    80ee:	4413      	add	r3, r2
    80f0:	b2da      	uxtb	r2, r3
		((address >> 6) & 0x20) +
		((address >> 5) & 0x10) +
		((address >> 4) & 0x08) +
		((address >> 3) & 0x04) +
		((address >> 2) & 0x02) +
    80f2:	68bb      	ldr	r3, [r7, #8]
    80f4:	089b      	lsrs	r3, r3, #2
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    80f6:	b2db      	uxtb	r3, r3
    80f8:	f003 0302 	and.w	r3, r3, #2
    80fc:	b2db      	uxtb	r3, r3
    80fe:	4413      	add	r3, r2
    8100:	b2da      	uxtb	r2, r3
		((address >> 6) & 0x20) +
		((address >> 5) & 0x10) +
		((address >> 4) & 0x08) +
		((address >> 3) & 0x04) +
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);
    8102:	68bb      	ldr	r3, [r7, #8]
    8104:	085b      	lsrs	r3, r3, #1
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    8106:	b2db      	uxtb	r3, r3
    8108:	f003 0301 	and.w	r3, r3, #1
    810c:	b2db      	uxtb	r3, r3
    810e:	4413      	add	r3, r2
    8110:	b2da      	uxtb	r2, r3
    8112:	4b34      	ldr	r3, [pc, #208]	; (81e4 <precalc+0x210>)
    8114:	701a      	strb	r2, [r3, #0]
		((address >> 4) & 0x08) +
		((address >> 3) & 0x04) +
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
    8116:	4b34      	ldr	r3, [pc, #208]	; (81e8 <precalc+0x214>)
    8118:	781b      	ldrb	r3, [r3, #0]
    811a:	2b00      	cmp	r3, #0
    811c:	d04f      	beq.n	81be <precalc+0x1ea>
		used_channels = 0;
    811e:	4b33      	ldr	r3, [pc, #204]	; (81ec <precalc+0x218>)
    8120:	2200      	movs	r2, #0
    8122:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < 10; i++)
    8124:	2300      	movs	r3, #0
    8126:	73fb      	strb	r3, [r7, #15]
    8128:	e014      	b.n	8154 <precalc+0x180>
			used_channels += count_bits((uint64_t) afh_map[i]);
    812a:	7bfb      	ldrb	r3, [r7, #15]
    812c:	4a30      	ldr	r2, [pc, #192]	; (81f0 <precalc+0x21c>)
    812e:	5cd3      	ldrb	r3, [r2, r3]
    8130:	b2da      	uxtb	r2, r3
    8132:	f04f 0300 	mov.w	r3, #0
    8136:	4610      	mov	r0, r2
    8138:	4619      	mov	r1, r3
    813a:	f7ff ff25 	bl	7f88 <count_bits>
    813e:	4603      	mov	r3, r0
    8140:	461a      	mov	r2, r3
    8142:	4b2a      	ldr	r3, [pc, #168]	; (81ec <precalc+0x218>)
    8144:	781b      	ldrb	r3, [r3, #0]
    8146:	4413      	add	r3, r2
    8148:	b2da      	uxtb	r2, r3
    814a:	4b28      	ldr	r3, [pc, #160]	; (81ec <precalc+0x218>)
    814c:	701a      	strb	r2, [r3, #0]
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
    814e:	7bfb      	ldrb	r3, [r7, #15]
    8150:	3301      	adds	r3, #1
    8152:	73fb      	strb	r3, [r7, #15]
    8154:	7bfb      	ldrb	r3, [r7, #15]
    8156:	2b09      	cmp	r3, #9
    8158:	d9e7      	bls.n	812a <precalc+0x156>
			used_channels += count_bits((uint64_t) afh_map[i]);
		j = 0;
    815a:	2300      	movs	r3, #0
    815c:	71fb      	strb	r3, [r7, #7]
		for (i = 0; i < CHANNELS; i++)
    815e:	2300      	movs	r3, #0
    8160:	73fb      	strb	r3, [r7, #15]
    8162:	e012      	b.n	818a <precalc+0x1b6>
			chan = (i * 2) % CHANNELS;
    8164:	7bfb      	ldrb	r3, [r7, #15]
    8166:	0059      	lsls	r1, r3, #1
    8168:	4b18      	ldr	r3, [pc, #96]	; (81cc <precalc+0x1f8>)
    816a:	fb83 2301 	smull	r2, r3, r3, r1
    816e:	115a      	asrs	r2, r3, #5
    8170:	17cb      	asrs	r3, r1, #31
    8172:	1ad2      	subs	r2, r2, r3
    8174:	4613      	mov	r3, r2
    8176:	009b      	lsls	r3, r3, #2
    8178:	4413      	add	r3, r2
    817a:	011b      	lsls	r3, r3, #4
    817c:	1a9b      	subs	r3, r3, r2
    817e:	1aca      	subs	r2, r1, r3
    8180:	4613      	mov	r3, r2
    8182:	73bb      	strb	r3, [r7, #14]
	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
			used_channels += count_bits((uint64_t) afh_map[i]);
		j = 0;
		for (i = 0; i < CHANNELS; i++)
    8184:	7bfb      	ldrb	r3, [r7, #15]
    8186:	3301      	adds	r3, #1
    8188:	73fb      	strb	r3, [r7, #15]
    818a:	7bfb      	ldrb	r3, [r7, #15]
    818c:	2b4e      	cmp	r3, #78	; 0x4e
    818e:	d9e9      	bls.n	8164 <precalc+0x190>
			chan = (i * 2) % CHANNELS;
			if(afh_map[chan/8] & (0x1 << (chan % 8)))
    8190:	7bbb      	ldrb	r3, [r7, #14]
    8192:	08db      	lsrs	r3, r3, #3
    8194:	b2db      	uxtb	r3, r3
    8196:	461a      	mov	r2, r3
    8198:	4b15      	ldr	r3, [pc, #84]	; (81f0 <precalc+0x21c>)
    819a:	5c9b      	ldrb	r3, [r3, r2]
    819c:	461a      	mov	r2, r3
    819e:	7bbb      	ldrb	r3, [r7, #14]
    81a0:	f003 0307 	and.w	r3, r3, #7
    81a4:	fa42 f303 	asr.w	r3, r2, r3
    81a8:	f003 0301 	and.w	r3, r3, #1
    81ac:	2b00      	cmp	r3, #0
    81ae:	d006      	beq.n	81be <precalc+0x1ea>
				bank[j++] = chan;
    81b0:	79fb      	ldrb	r3, [r7, #7]
    81b2:	1c5a      	adds	r2, r3, #1
    81b4:	71fa      	strb	r2, [r7, #7]
    81b6:	4619      	mov	r1, r3
    81b8:	4a05      	ldr	r2, [pc, #20]	; (81d0 <precalc+0x1fc>)
    81ba:	7bbb      	ldrb	r3, [r7, #14]
    81bc:	5453      	strb	r3, [r2, r1]
	}
}
    81be:	3710      	adds	r7, #16
    81c0:	46bd      	mov	sp, r7
    81c2:	bd80      	pop	{r7, pc}
    81c4:	100010b8 	.word	0x100010b8
    81c8:	10000cf8 	.word	0x10000cf8
    81cc:	67b23a55 	.word	0x67b23a55
    81d0:	10001120 	.word	0x10001120
    81d4:	1000111b 	.word	0x1000111b
    81d8:	100010c8 	.word	0x100010c8
    81dc:	1000111c 	.word	0x1000111c
    81e0:	100010ca 	.word	0x100010ca
    81e4:	1000116f 	.word	0x1000116f
    81e8:	10001024 	.word	0x10001024
    81ec:	100010c9 	.word	0x100010c9
    81f0:	10000bbc 	.word	0x10000bbc

000081f4 <perm5>:

/* 5 bit permutation */
u8 perm5(u8 z, u8 p_high, u16 p_low)
{
    81f4:	b490      	push	{r4, r7}
    81f6:	b092      	sub	sp, #72	; 0x48
    81f8:	af00      	add	r7, sp, #0
    81fa:	4603      	mov	r3, r0
    81fc:	71fb      	strb	r3, [r7, #7]
    81fe:	460b      	mov	r3, r1
    8200:	71bb      	strb	r3, [r7, #6]
    8202:	4613      	mov	r3, r2
    8204:	80bb      	strh	r3, [r7, #4]
	/* z is constrained to 5 bits, p_high to 5 bits, p_low to 9 bits */
	z &= 0x1f;
    8206:	79fb      	ldrb	r3, [r7, #7]
    8208:	f003 031f 	and.w	r3, r3, #31
    820c:	71fb      	strb	r3, [r7, #7]
	p_high &= 0x1f;
    820e:	79bb      	ldrb	r3, [r7, #6]
    8210:	f003 031f 	and.w	r3, r3, #31
    8214:	71bb      	strb	r3, [r7, #6]
	p_low &= 0x1ff;
    8216:	88bb      	ldrh	r3, [r7, #4]
    8218:	f3c3 0308 	ubfx	r3, r3, #0, #9
    821c:	80bb      	strh	r3, [r7, #4]

	int i;
	u8 tmp, output, z_bit[5], p[14];
	u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
    821e:	4a5c      	ldr	r2, [pc, #368]	; (8390 <perm5+0x19c>)
    8220:	f107 031c 	add.w	r3, r7, #28
    8224:	4614      	mov	r4, r2
    8226:	6820      	ldr	r0, [r4, #0]
    8228:	6861      	ldr	r1, [r4, #4]
    822a:	68a2      	ldr	r2, [r4, #8]
    822c:	c307      	stmia	r3!, {r0, r1, r2}
    822e:	89a2      	ldrh	r2, [r4, #12]
    8230:	801a      	strh	r2, [r3, #0]
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};
    8232:	4a58      	ldr	r2, [pc, #352]	; (8394 <perm5+0x1a0>)
    8234:	f107 030c 	add.w	r3, r7, #12
    8238:	4614      	mov	r4, r2
    823a:	6820      	ldr	r0, [r4, #0]
    823c:	6861      	ldr	r1, [r4, #4]
    823e:	68a2      	ldr	r2, [r4, #8]
    8240:	c307      	stmia	r3!, {r0, r1, r2}
    8242:	89a2      	ldrh	r2, [r4, #12]
    8244:	801a      	strh	r2, [r3, #0]

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    8246:	2300      	movs	r3, #0
    8248:	647b      	str	r3, [r7, #68]	; 0x44
    824a:	e010      	b.n	826e <perm5+0x7a>
		p[i] = (p_low >> i) & 0x01;
    824c:	88ba      	ldrh	r2, [r7, #4]
    824e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8250:	fa42 f303 	asr.w	r3, r2, r3
    8254:	b2db      	uxtb	r3, r3
    8256:	f003 0301 	and.w	r3, r3, #1
    825a:	b2d9      	uxtb	r1, r3
    825c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    8260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8262:	4413      	add	r3, r2
    8264:	460a      	mov	r2, r1
    8266:	701a      	strb	r2, [r3, #0]
	u8 tmp, output, z_bit[5], p[14];
	u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    8268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    826a:	3301      	adds	r3, #1
    826c:	647b      	str	r3, [r7, #68]	; 0x44
    826e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8270:	2b08      	cmp	r3, #8
    8272:	ddeb      	ble.n	824c <perm5+0x58>
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    8274:	2300      	movs	r3, #0
    8276:	647b      	str	r3, [r7, #68]	; 0x44
    8278:	e011      	b.n	829e <perm5+0xaa>
		p[i+9] = (p_high >> i) & 0x01;
    827a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    827c:	3309      	adds	r3, #9
    827e:	79b9      	ldrb	r1, [r7, #6]
    8280:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    8282:	fa41 f202 	asr.w	r2, r1, r2
    8286:	b2d2      	uxtb	r2, r2
    8288:	f002 0201 	and.w	r2, r2, #1
    828c:	b2d2      	uxtb	r2, r2
    828e:	f107 0148 	add.w	r1, r7, #72	; 0x48
    8292:	440b      	add	r3, r1
    8294:	f803 2c1c 	strb.w	r2, [r3, #-28]
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    8298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    829a:	3301      	adds	r3, #1
    829c:	647b      	str	r3, [r7, #68]	; 0x44
    829e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    82a0:	2b04      	cmp	r3, #4
    82a2:	ddea      	ble.n	827a <perm5+0x86>
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
    82a4:	2300      	movs	r3, #0
    82a6:	647b      	str	r3, [r7, #68]	; 0x44
    82a8:	e010      	b.n	82cc <perm5+0xd8>
		z_bit[i] = (z >> i) & 0x01;
    82aa:	79fa      	ldrb	r2, [r7, #7]
    82ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    82ae:	fa42 f303 	asr.w	r3, r2, r3
    82b2:	b2db      	uxtb	r3, r3
    82b4:	f003 0301 	and.w	r3, r3, #1
    82b8:	b2d9      	uxtb	r1, r3
    82ba:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    82be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    82c0:	4413      	add	r3, r2
    82c2:	460a      	mov	r2, r1
    82c4:	701a      	strb	r2, [r3, #0]
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
    82c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    82c8:	3301      	adds	r3, #1
    82ca:	647b      	str	r3, [r7, #68]	; 0x44
    82cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    82ce:	2b04      	cmp	r3, #4
    82d0:	ddeb      	ble.n	82aa <perm5+0xb6>
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
    82d2:	230d      	movs	r3, #13
    82d4:	647b      	str	r3, [r7, #68]	; 0x44
    82d6:	e036      	b.n	8346 <perm5+0x152>
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
    82d8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    82dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    82de:	4413      	add	r3, r2
    82e0:	781b      	ldrb	r3, [r3, #0]
    82e2:	2b00      	cmp	r3, #0
    82e4:	d02c      	beq.n	8340 <perm5+0x14c>
			tmp = z_bit[index1[i]];
    82e6:	f107 021c 	add.w	r2, r7, #28
    82ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    82ec:	4413      	add	r3, r2
    82ee:	781b      	ldrb	r3, [r3, #0]
    82f0:	f107 0248 	add.w	r2, r7, #72	; 0x48
    82f4:	4413      	add	r3, r2
    82f6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    82fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			z_bit[index1[i]] = z_bit[index2[i]];
    82fe:	f107 021c 	add.w	r2, r7, #28
    8302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8304:	4413      	add	r3, r2
    8306:	781b      	ldrb	r3, [r3, #0]
    8308:	4619      	mov	r1, r3
    830a:	f107 020c 	add.w	r2, r7, #12
    830e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8310:	4413      	add	r3, r2
    8312:	781b      	ldrb	r3, [r3, #0]
    8314:	f107 0248 	add.w	r2, r7, #72	; 0x48
    8318:	4413      	add	r3, r2
    831a:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
    831e:	f107 0348 	add.w	r3, r7, #72	; 0x48
    8322:	440b      	add	r3, r1
    8324:	f803 2c0c 	strb.w	r2, [r3, #-12]
			z_bit[index2[i]] = tmp;
    8328:	f107 020c 	add.w	r2, r7, #12
    832c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    832e:	4413      	add	r3, r2
    8330:	781b      	ldrb	r3, [r3, #0]
    8332:	f107 0248 	add.w	r2, r7, #72	; 0x48
    8336:	4413      	add	r3, r2
    8338:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
    833c:	f803 2c0c 	strb.w	r2, [r3, #-12]
	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
    8340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8342:	3b01      	subs	r3, #1
    8344:	647b      	str	r3, [r7, #68]	; 0x44
    8346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8348:	2b00      	cmp	r3, #0
    834a:	dac5      	bge.n	82d8 <perm5+0xe4>
			z_bit[index2[i]] = tmp;
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
    834c:	2300      	movs	r3, #0
    834e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	for (i = 0; i < 5; i++)
    8352:	2300      	movs	r3, #0
    8354:	647b      	str	r3, [r7, #68]	; 0x44
    8356:	e011      	b.n	837c <perm5+0x188>
		output += z_bit[i] << i;
    8358:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    835c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    835e:	4413      	add	r3, r2
    8360:	781b      	ldrb	r3, [r3, #0]
    8362:	461a      	mov	r2, r3
    8364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8366:	fa02 f303 	lsl.w	r3, r2, r3
    836a:	b2da      	uxtb	r2, r3
    836c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    8370:	4413      	add	r3, r2
    8372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    8376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8378:	3301      	adds	r3, #1
    837a:	647b      	str	r3, [r7, #68]	; 0x44
    837c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    837e:	2b04      	cmp	r3, #4
    8380:	ddea      	ble.n	8358 <perm5+0x164>
		output += z_bit[i] << i;

	return output;
    8382:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
}
    8386:	4618      	mov	r0, r3
    8388:	3748      	adds	r7, #72	; 0x48
    838a:	46bd      	mov	sp, r7
    838c:	bc90      	pop	{r4, r7}
    838e:	4770      	bx	lr
    8390:	0000bb7c 	.word	0x0000bb7c
    8394:	0000bb8c 	.word	0x0000bb8c

00008398 <next_hop>:

u16 next_hop(u32 clock)
{
    8398:	b580      	push	{r7, lr}
    839a:	b08a      	sub	sp, #40	; 0x28
    839c:	af00      	add	r7, sp, #0
    839e:	6078      	str	r0, [r7, #4]
	u16 d, y2;
	u32 base_f, f, f_dash;

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
    83a0:	687b      	ldr	r3, [r7, #4]
    83a2:	089b      	lsrs	r3, r3, #2
    83a4:	b2db      	uxtb	r3, r3
    83a6:	f003 031f 	and.w	r3, r3, #31
    83aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	y1 = (clock >> 1) & 0x01;
    83ae:	687b      	ldr	r3, [r7, #4]
    83b0:	085b      	lsrs	r3, r3, #1
    83b2:	b2db      	uxtb	r3, r3
    83b4:	f003 0301 	and.w	r3, r3, #1
    83b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	y2 = y1 << 5;
    83bc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
    83c0:	b29b      	uxth	r3, r3
    83c2:	015b      	lsls	r3, r3, #5
    83c4:	847b      	strh	r3, [r7, #34]	; 0x22
	a = (a1 ^ (clock >> 21)) & 0x1f;
    83c6:	687b      	ldr	r3, [r7, #4]
    83c8:	0d5b      	lsrs	r3, r3, #21
    83ca:	b2da      	uxtb	r2, r3
    83cc:	4b4b      	ldr	r3, [pc, #300]	; (84fc <next_hop+0x164>)
    83ce:	781b      	ldrb	r3, [r3, #0]
    83d0:	4053      	eors	r3, r2
    83d2:	b2db      	uxtb	r3, r3
    83d4:	f003 031f 	and.w	r3, r3, #31
    83d8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    83dc:	687b      	ldr	r3, [r7, #4]
    83de:	0c1b      	lsrs	r3, r3, #16
    83e0:	b2da      	uxtb	r2, r3
    83e2:	4b47      	ldr	r3, [pc, #284]	; (8500 <next_hop+0x168>)
    83e4:	781b      	ldrb	r3, [r3, #0]
    83e6:	4053      	eors	r3, r2
    83e8:	b2db      	uxtb	r3, r3
    83ea:	f003 031f 	and.w	r3, r3, #31
    83ee:	f887 3020 	strb.w	r3, [r7, #32]
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    83f2:	687b      	ldr	r3, [r7, #4]
    83f4:	09db      	lsrs	r3, r3, #7
    83f6:	b29a      	uxth	r2, r3
    83f8:	4b42      	ldr	r3, [pc, #264]	; (8504 <next_hop+0x16c>)
    83fa:	881b      	ldrh	r3, [r3, #0]
    83fc:	4053      	eors	r3, r2
    83fe:	b29b      	uxth	r3, r3
    8400:	f3c3 0308 	ubfx	r3, r3, #0, #9
    8404:	83fb      	strh	r3, [r7, #30]
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
    8406:	687b      	ldr	r3, [r7, #4]
    8408:	08db      	lsrs	r3, r3, #3
    840a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    840e:	f023 030f 	bic.w	r3, r3, #15
    8412:	61bb      	str	r3, [r7, #24]
	f = base_f % 79;
    8414:	69b9      	ldr	r1, [r7, #24]
    8416:	4b3c      	ldr	r3, [pc, #240]	; (8508 <next_hop+0x170>)
    8418:	fba3 2301 	umull	r2, r3, r3, r1
    841c:	099a      	lsrs	r2, r3, #6
    841e:	4613      	mov	r3, r2
    8420:	009b      	lsls	r3, r3, #2
    8422:	4413      	add	r3, r2
    8424:	011b      	lsls	r3, r3, #4
    8426:	1a9b      	subs	r3, r3, r2
    8428:	1acb      	subs	r3, r1, r3
    842a:	617b      	str	r3, [r7, #20]

	perm = perm5(
    842c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
    8430:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
    8434:	4413      	add	r3, r2
    8436:	b2db      	uxtb	r3, r3
    8438:	b2db      	uxtb	r3, r3
    843a:	f003 031f 	and.w	r3, r3, #31
    843e:	b2da      	uxtb	r2, r3
    8440:	4b32      	ldr	r3, [pc, #200]	; (850c <next_hop+0x174>)
    8442:	781b      	ldrb	r3, [r3, #0]
    8444:	b2db      	uxtb	r3, r3
    8446:	4053      	eors	r3, r2
    8448:	b2db      	uxtb	r3, r3
    844a:	b2d9      	uxtb	r1, r3
    844c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
    8450:	461a      	mov	r2, r3
    8452:	0152      	lsls	r2, r2, #5
    8454:	1ad3      	subs	r3, r2, r3
    8456:	b2db      	uxtb	r3, r3
    8458:	b2da      	uxtb	r2, r3
    845a:	f897 3020 	ldrb.w	r3, [r7, #32]
    845e:	4053      	eors	r3, r2
    8460:	b2db      	uxtb	r3, r3
    8462:	b2da      	uxtb	r2, r3
    8464:	8bfb      	ldrh	r3, [r7, #30]
    8466:	4608      	mov	r0, r1
    8468:	4611      	mov	r1, r2
    846a:	461a      	mov	r2, r3
    846c:	f7ff fec2 	bl	81f4 <perm5>
    8470:	4603      	mov	r3, r0
    8472:	74fb      	strb	r3, [r7, #19]
		((x + a) % 32) ^ b,
		(y1 * 0x1f) ^ c,
		d);
	/* hop selection */
	next_channel = bank[(perm + e + f + y2) % CHANNELS];
    8474:	7cfb      	ldrb	r3, [r7, #19]
    8476:	4a26      	ldr	r2, [pc, #152]	; (8510 <next_hop+0x178>)
    8478:	7812      	ldrb	r2, [r2, #0]
    847a:	4413      	add	r3, r2
    847c:	461a      	mov	r2, r3
    847e:	697b      	ldr	r3, [r7, #20]
    8480:	441a      	add	r2, r3
    8482:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    8484:	18d1      	adds	r1, r2, r3
    8486:	4b20      	ldr	r3, [pc, #128]	; (8508 <next_hop+0x170>)
    8488:	fba3 2301 	umull	r2, r3, r3, r1
    848c:	099a      	lsrs	r2, r3, #6
    848e:	4613      	mov	r3, r2
    8490:	009b      	lsls	r3, r3, #2
    8492:	4413      	add	r3, r2
    8494:	011b      	lsls	r3, r3, #4
    8496:	1a9b      	subs	r3, r3, r2
    8498:	1aca      	subs	r2, r1, r3
    849a:	4b1e      	ldr	r3, [pc, #120]	; (8514 <next_hop+0x17c>)
    849c:	5c9b      	ldrb	r3, [r3, r2]
    849e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(afh_enabled) {
    84a2:	4b1d      	ldr	r3, [pc, #116]	; (8518 <next_hop+0x180>)
    84a4:	781b      	ldrb	r3, [r3, #0]
    84a6:	2b00      	cmp	r3, #0
    84a8:	d01d      	beq.n	84e6 <next_hop+0x14e>
		f_dash = base_f % used_channels;
    84aa:	4b1c      	ldr	r3, [pc, #112]	; (851c <next_hop+0x184>)
    84ac:	781b      	ldrb	r3, [r3, #0]
    84ae:	461a      	mov	r2, r3
    84b0:	69bb      	ldr	r3, [r7, #24]
    84b2:	fbb3 f1f2 	udiv	r1, r3, r2
    84b6:	fb02 f201 	mul.w	r2, r2, r1
    84ba:	1a9b      	subs	r3, r3, r2
    84bc:	60fb      	str	r3, [r7, #12]
		next_channel = afh_bank[(perm + e + f_dash + y2) % used_channels];
    84be:	7cfb      	ldrb	r3, [r7, #19]
    84c0:	4a13      	ldr	r2, [pc, #76]	; (8510 <next_hop+0x178>)
    84c2:	7812      	ldrb	r2, [r2, #0]
    84c4:	4413      	add	r3, r2
    84c6:	461a      	mov	r2, r3
    84c8:	68fb      	ldr	r3, [r7, #12]
    84ca:	441a      	add	r2, r3
    84cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    84ce:	4413      	add	r3, r2
    84d0:	4a12      	ldr	r2, [pc, #72]	; (851c <next_hop+0x184>)
    84d2:	7812      	ldrb	r2, [r2, #0]
    84d4:	fbb3 f1f2 	udiv	r1, r3, r2
    84d8:	fb02 f201 	mul.w	r2, r2, r1
    84dc:	1a9b      	subs	r3, r3, r2
    84de:	4a10      	ldr	r2, [pc, #64]	; (8520 <next_hop+0x188>)
    84e0:	5cd3      	ldrb	r3, [r2, r3]
    84e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return (2402 + next_channel);
    84e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    84ea:	b29b      	uxth	r3, r3
    84ec:	f603 1362 	addw	r3, r3, #2402	; 0x962
    84f0:	b29b      	uxth	r3, r3

}
    84f2:	4618      	mov	r0, r3
    84f4:	3728      	adds	r7, #40	; 0x28
    84f6:	46bd      	mov	sp, r7
    84f8:	bd80      	pop	{r7, pc}
    84fa:	bf00      	nop
    84fc:	1000111b 	.word	0x1000111b
    8500:	1000111c 	.word	0x1000111c
    8504:	100010ca 	.word	0x100010ca
    8508:	cf6474a9 	.word	0xcf6474a9
    850c:	100010c8 	.word	0x100010c8
    8510:	1000116f 	.word	0x1000116f
    8514:	10001120 	.word	0x10001120
    8518:	10001024 	.word	0x10001024
    851c:	100010c9 	.word	0x100010c9
    8520:	100010cc 	.word	0x100010cc

00008524 <btle_next_hop>:

extern u8 le_channel_idx;
extern u8 le_hop_amount;

u16 btle_next_hop(le_state_t *le)
{
    8524:	b580      	push	{r7, lr}
    8526:	b084      	sub	sp, #16
    8528:	af00      	add	r7, sp, #0
    852a:	6078      	str	r0, [r7, #4]
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    852c:	687b      	ldr	r3, [r7, #4]
    852e:	7d5b      	ldrb	r3, [r3, #21]
    8530:	4618      	mov	r0, r3
    8532:	f000 f84b 	bl	85cc <btle_channel_index_to_phys>
    8536:	4603      	mov	r3, r0
    8538:	81fb      	strh	r3, [r7, #14]
	le->channel_idx = (le->channel_idx + le->channel_increment) % 37;
    853a:	687b      	ldr	r3, [r7, #4]
    853c:	7d5b      	ldrb	r3, [r3, #21]
    853e:	461a      	mov	r2, r3
    8540:	687b      	ldr	r3, [r7, #4]
    8542:	7d9b      	ldrb	r3, [r3, #22]
    8544:	441a      	add	r2, r3
    8546:	4b0a      	ldr	r3, [pc, #40]	; (8570 <btle_next_hop+0x4c>)
    8548:	fb82 0103 	smull	r0, r1, r2, r3
    854c:	1853      	adds	r3, r2, r1
    854e:	1159      	asrs	r1, r3, #5
    8550:	17d3      	asrs	r3, r2, #31
    8552:	1ac9      	subs	r1, r1, r3
    8554:	460b      	mov	r3, r1
    8556:	00db      	lsls	r3, r3, #3
    8558:	440b      	add	r3, r1
    855a:	009b      	lsls	r3, r3, #2
    855c:	440b      	add	r3, r1
    855e:	1ad1      	subs	r1, r2, r3
    8560:	b2ca      	uxtb	r2, r1
    8562:	687b      	ldr	r3, [r7, #4]
    8564:	755a      	strb	r2, [r3, #21]
	return phys;
    8566:	89fb      	ldrh	r3, [r7, #14]
}
    8568:	4618      	mov	r0, r3
    856a:	3710      	adds	r7, #16
    856c:	46bd      	mov	sp, r7
    856e:	bd80      	pop	{r7, pc}
    8570:	dd67c8a7 	.word	0xdd67c8a7

00008574 <btle_channel_index>:

u32 received_data = 0;

u8 btle_channel_index(u8 channel) {
    8574:	b480      	push	{r7}
    8576:	b085      	sub	sp, #20
    8578:	af00      	add	r7, sp, #0
    857a:	4603      	mov	r3, r0
    857c:	71fb      	strb	r3, [r7, #7]
	u8 idx;
	channel /= 2;
    857e:	79fb      	ldrb	r3, [r7, #7]
    8580:	085b      	lsrs	r3, r3, #1
    8582:	71fb      	strb	r3, [r7, #7]
	if (channel == 0)
    8584:	79fb      	ldrb	r3, [r7, #7]
    8586:	2b00      	cmp	r3, #0
    8588:	d102      	bne.n	8590 <btle_channel_index+0x1c>
		idx = 37;
    858a:	2325      	movs	r3, #37	; 0x25
    858c:	73fb      	strb	r3, [r7, #15]
    858e:	e015      	b.n	85bc <btle_channel_index+0x48>
	else if (channel < 12)
    8590:	79fb      	ldrb	r3, [r7, #7]
    8592:	2b0b      	cmp	r3, #11
    8594:	d803      	bhi.n	859e <btle_channel_index+0x2a>
		idx = channel - 1;
    8596:	79fb      	ldrb	r3, [r7, #7]
    8598:	3b01      	subs	r3, #1
    859a:	73fb      	strb	r3, [r7, #15]
    859c:	e00e      	b.n	85bc <btle_channel_index+0x48>
	else if (channel == 12)
    859e:	79fb      	ldrb	r3, [r7, #7]
    85a0:	2b0c      	cmp	r3, #12
    85a2:	d102      	bne.n	85aa <btle_channel_index+0x36>
		idx = 38;
    85a4:	2326      	movs	r3, #38	; 0x26
    85a6:	73fb      	strb	r3, [r7, #15]
    85a8:	e008      	b.n	85bc <btle_channel_index+0x48>
	else if (channel < 39)
    85aa:	79fb      	ldrb	r3, [r7, #7]
    85ac:	2b26      	cmp	r3, #38	; 0x26
    85ae:	d803      	bhi.n	85b8 <btle_channel_index+0x44>
		idx = channel - 2;
    85b0:	79fb      	ldrb	r3, [r7, #7]
    85b2:	3b02      	subs	r3, #2
    85b4:	73fb      	strb	r3, [r7, #15]
    85b6:	e001      	b.n	85bc <btle_channel_index+0x48>
	else
		idx = 39;
    85b8:	2327      	movs	r3, #39	; 0x27
    85ba:	73fb      	strb	r3, [r7, #15]
	return idx;
    85bc:	7bfb      	ldrb	r3, [r7, #15]
}
    85be:	4618      	mov	r0, r3
    85c0:	3714      	adds	r7, #20
    85c2:	46bd      	mov	sp, r7
    85c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    85c8:	4770      	bx	lr
    85ca:	bf00      	nop

000085cc <btle_channel_index_to_phys>:

u16 btle_channel_index_to_phys(u8 idx) {
    85cc:	b480      	push	{r7}
    85ce:	b085      	sub	sp, #20
    85d0:	af00      	add	r7, sp, #0
    85d2:	4603      	mov	r3, r0
    85d4:	71fb      	strb	r3, [r7, #7]
	u16 phys;
	if (idx < 11)
    85d6:	79fb      	ldrb	r3, [r7, #7]
    85d8:	2b0a      	cmp	r3, #10
    85da:	d806      	bhi.n	85ea <btle_channel_index_to_phys+0x1e>
		phys = 2404 + 2 * idx;
    85dc:	79fb      	ldrb	r3, [r7, #7]
    85de:	f203 43b2 	addw	r3, r3, #1202	; 0x4b2
    85e2:	b29b      	uxth	r3, r3
    85e4:	005b      	lsls	r3, r3, #1
    85e6:	81fb      	strh	r3, [r7, #14]
    85e8:	e01a      	b.n	8620 <btle_channel_index_to_phys+0x54>
	else if (idx < 37)
    85ea:	79fb      	ldrb	r3, [r7, #7]
    85ec:	2b24      	cmp	r3, #36	; 0x24
    85ee:	d806      	bhi.n	85fe <btle_channel_index_to_phys+0x32>
		phys = 2428 + 2 * (idx - 11);
    85f0:	79fb      	ldrb	r3, [r7, #7]
    85f2:	f203 43b3 	addw	r3, r3, #1203	; 0x4b3
    85f6:	b29b      	uxth	r3, r3
    85f8:	005b      	lsls	r3, r3, #1
    85fa:	81fb      	strh	r3, [r7, #14]
    85fc:	e010      	b.n	8620 <btle_channel_index_to_phys+0x54>
	else if (idx == 37)
    85fe:	79fb      	ldrb	r3, [r7, #7]
    8600:	2b25      	cmp	r3, #37	; 0x25
    8602:	d103      	bne.n	860c <btle_channel_index_to_phys+0x40>
		phys = 2402;
    8604:	f640 1362 	movw	r3, #2402	; 0x962
    8608:	81fb      	strh	r3, [r7, #14]
    860a:	e009      	b.n	8620 <btle_channel_index_to_phys+0x54>
	else if (idx == 38)
    860c:	79fb      	ldrb	r3, [r7, #7]
    860e:	2b26      	cmp	r3, #38	; 0x26
    8610:	d103      	bne.n	861a <btle_channel_index_to_phys+0x4e>
		phys = 2426;
    8612:	f640 137a 	movw	r3, #2426	; 0x97a
    8616:	81fb      	strh	r3, [r7, #14]
    8618:	e002      	b.n	8620 <btle_channel_index_to_phys+0x54>
	else
		phys = 2480;
    861a:	f44f 631b 	mov.w	r3, #2480	; 0x9b0
    861e:	81fb      	strh	r3, [r7, #14]
	return phys;
    8620:	89fb      	ldrh	r3, [r7, #14]
}
    8622:	4618      	mov	r0, r3
    8624:	3714      	adds	r7, #20
    8626:	46bd      	mov	sp, r7
    8628:	f85d 7b04 	ldr.w	r7, [sp], #4
    862c:	4770      	bx	lr
    862e:	bf00      	nop

00008630 <btle_calc_crc>:
//			0x6ff46e
//
//		bytes in packet will be:
//		  { 0x6e, 0xf4, 0x6f }
//
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
    8630:	b480      	push	{r7}
    8632:	b08b      	sub	sp, #44	; 0x2c
    8634:	af00      	add	r7, sp, #0
    8636:	60f8      	str	r0, [r7, #12]
    8638:	60b9      	str	r1, [r7, #8]
    863a:	607a      	str	r2, [r7, #4]
	u32 state = crc_init & 0xffffff;
    863c:	68fb      	ldr	r3, [r7, #12]
    863e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    8642:	627b      	str	r3, [r7, #36]	; 0x24
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
    8644:	4b1b      	ldr	r3, [pc, #108]	; (86b4 <btle_calc_crc+0x84>)
    8646:	617b      	str	r3, [r7, #20]
	int i, j;

	for (i = 0; i < len; ++i) {
    8648:	2300      	movs	r3, #0
    864a:	623b      	str	r3, [r7, #32]
    864c:	e027      	b.n	869e <btle_calc_crc+0x6e>
		u8 cur = data[i];
    864e:	6a3b      	ldr	r3, [r7, #32]
    8650:	68ba      	ldr	r2, [r7, #8]
    8652:	4413      	add	r3, r2
    8654:	781b      	ldrb	r3, [r3, #0]
    8656:	76fb      	strb	r3, [r7, #27]
		for (j = 0; j < 8; ++j) {
    8658:	2300      	movs	r3, #0
    865a:	61fb      	str	r3, [r7, #28]
    865c:	e019      	b.n	8692 <btle_calc_crc+0x62>
			int next_bit = (state ^ cur) & 1;
    865e:	7efa      	ldrb	r2, [r7, #27]
    8660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8662:	4053      	eors	r3, r2
    8664:	f003 0301 	and.w	r3, r3, #1
    8668:	613b      	str	r3, [r7, #16]
			cur >>= 1;
    866a:	7efb      	ldrb	r3, [r7, #27]
    866c:	085b      	lsrs	r3, r3, #1
    866e:	76fb      	strb	r3, [r7, #27]
			state >>= 1;
    8670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8672:	085b      	lsrs	r3, r3, #1
    8674:	627b      	str	r3, [r7, #36]	; 0x24
			if (next_bit) {
    8676:	693b      	ldr	r3, [r7, #16]
    8678:	2b00      	cmp	r3, #0
    867a:	d007      	beq.n	868c <btle_calc_crc+0x5c>
				state |= 1 << 23;
    867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    867e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    8682:	627b      	str	r3, [r7, #36]	; 0x24
				state ^= lfsr_mask;
    8684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    8686:	697b      	ldr	r3, [r7, #20]
    8688:	4053      	eors	r3, r2
    868a:	627b      	str	r3, [r7, #36]	; 0x24
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    868c:	69fb      	ldr	r3, [r7, #28]
    868e:	3301      	adds	r3, #1
    8690:	61fb      	str	r3, [r7, #28]
    8692:	69fb      	ldr	r3, [r7, #28]
    8694:	2b07      	cmp	r3, #7
    8696:	dde2      	ble.n	865e <btle_calc_crc+0x2e>
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
	u32 state = crc_init & 0xffffff;
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    8698:	6a3b      	ldr	r3, [r7, #32]
    869a:	3301      	adds	r3, #1
    869c:	623b      	str	r3, [r7, #32]
    869e:	6a3a      	ldr	r2, [r7, #32]
    86a0:	687b      	ldr	r3, [r7, #4]
    86a2:	429a      	cmp	r2, r3
    86a4:	dbd3      	blt.n	864e <btle_calc_crc+0x1e>
				state ^= lfsr_mask;
			}
		}
	}

	return state;
    86a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    86a8:	4618      	mov	r0, r3
    86aa:	372c      	adds	r7, #44	; 0x2c
    86ac:	46bd      	mov	sp, r7
    86ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    86b2:	4770      	bx	lr
    86b4:	005a6000 	.word	0x005a6000

000086b8 <btle_reverse_crc>:
// runs the CRC in reverse to generate a CRCInit
//
//	crc should be big endian
//	the return will be big endian
//
u32 btle_reverse_crc(u32 crc, u8 *data, int len) {
    86b8:	b480      	push	{r7}
    86ba:	b08d      	sub	sp, #52	; 0x34
    86bc:	af00      	add	r7, sp, #0
    86be:	60f8      	str	r0, [r7, #12]
    86c0:	60b9      	str	r1, [r7, #8]
    86c2:	607a      	str	r2, [r7, #4]
	u32 state = crc;
    86c4:	68fb      	ldr	r3, [r7, #12]
    86c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
    86c8:	4b2b      	ldr	r3, [pc, #172]	; (8778 <btle_reverse_crc+0xc0>)
    86ca:	61fb      	str	r3, [r7, #28]
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    86cc:	687b      	ldr	r3, [r7, #4]
    86ce:	3b01      	subs	r3, #1
    86d0:	627b      	str	r3, [r7, #36]	; 0x24
    86d2:	e02d      	b.n	8730 <btle_reverse_crc+0x78>
		u8 cur = data[i];
    86d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    86d6:	68ba      	ldr	r2, [r7, #8]
    86d8:	4413      	add	r3, r2
    86da:	781b      	ldrb	r3, [r3, #0]
    86dc:	76fb      	strb	r3, [r7, #27]
		for (j = 0; j < 8; ++j) {
    86de:	2300      	movs	r3, #0
    86e0:	623b      	str	r3, [r7, #32]
    86e2:	e01f      	b.n	8724 <btle_reverse_crc+0x6c>
			int top_bit = state >> 23;
    86e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    86e6:	0ddb      	lsrs	r3, r3, #23
    86e8:	617b      	str	r3, [r7, #20]
			state = (state << 1) & 0xffffff;
    86ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    86ec:	005b      	lsls	r3, r3, #1
    86ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    86f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
    86f4:	7efa      	ldrb	r2, [r7, #27]
    86f6:	6a3b      	ldr	r3, [r7, #32]
    86f8:	f1c3 0307 	rsb	r3, r3, #7
    86fc:	fa42 f303 	asr.w	r3, r2, r3
    8700:	f003 0201 	and.w	r2, r3, #1
    8704:	697b      	ldr	r3, [r7, #20]
    8706:	4053      	eors	r3, r2
    8708:	461a      	mov	r2, r3
    870a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    870c:	4313      	orrs	r3, r2
    870e:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (top_bit)
    8710:	697b      	ldr	r3, [r7, #20]
    8712:	2b00      	cmp	r3, #0
    8714:	d003      	beq.n	871e <btle_reverse_crc+0x66>
				state ^= lfsr_mask;
    8716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    8718:	69fb      	ldr	r3, [r7, #28]
    871a:	4053      	eors	r3, r2
    871c:	62fb      	str	r3, [r7, #44]	; 0x2c
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    871e:	6a3b      	ldr	r3, [r7, #32]
    8720:	3301      	adds	r3, #1
    8722:	623b      	str	r3, [r7, #32]
    8724:	6a3b      	ldr	r3, [r7, #32]
    8726:	2b07      	cmp	r3, #7
    8728:	dddc      	ble.n	86e4 <btle_reverse_crc+0x2c>
	u32 state = crc;
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    872a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    872c:	3b01      	subs	r3, #1
    872e:	627b      	str	r3, [r7, #36]	; 0x24
    8730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8732:	2b00      	cmp	r3, #0
    8734:	dace      	bge.n	86d4 <btle_reverse_crc+0x1c>
			if (top_bit)
				state ^= lfsr_mask;
		}
	}

	ret = 0;
    8736:	2300      	movs	r3, #0
    8738:	62bb      	str	r3, [r7, #40]	; 0x28
	for (i = 0; i < 24; ++i)
    873a:	2300      	movs	r3, #0
    873c:	627b      	str	r3, [r7, #36]	; 0x24
    873e:	e010      	b.n	8762 <btle_reverse_crc+0xaa>
		ret |= ((state >> i) & 1) << (23 - i);
    8740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    8742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8744:	fa22 f303 	lsr.w	r3, r2, r3
    8748:	f003 0201 	and.w	r2, r3, #1
    874c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    874e:	f1c3 0317 	rsb	r3, r3, #23
    8752:	fa02 f303 	lsl.w	r3, r2, r3
    8756:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8758:	4313      	orrs	r3, r2
    875a:	62bb      	str	r3, [r7, #40]	; 0x28
				state ^= lfsr_mask;
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    875c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    875e:	3301      	adds	r3, #1
    8760:	627b      	str	r3, [r7, #36]	; 0x24
    8762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8764:	2b17      	cmp	r3, #23
    8766:	ddeb      	ble.n	8740 <btle_reverse_crc+0x88>
		ret |= ((state >> i) & 1) << (23 - i);

	return ret;
    8768:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    876a:	4618      	mov	r0, r3
    876c:	3734      	adds	r7, #52	; 0x34
    876e:	46bd      	mov	sp, r7
    8770:	f85d 7b04 	ldr.w	r7, [sp], #4
    8774:	4770      	bx	lr
    8776:	bf00      	nop
    8778:	00b4c000 	.word	0x00b4c000

0000877c <btle_crcgen_lut>:
 * Michael Ossmann for writing and optimizing this.
 *
 * Arguments: CRCInit, pointer to start of packet, length of packet in
 * bytes
 * */
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
    877c:	b480      	push	{r7}
    877e:	b089      	sub	sp, #36	; 0x24
    8780:	af00      	add	r7, sp, #0
    8782:	60f8      	str	r0, [r7, #12]
    8784:	60b9      	str	r1, [r7, #8]
    8786:	607a      	str	r2, [r7, #4]
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
    8788:	68fb      	ldr	r3, [r7, #12]
    878a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    878e:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < len; ++i) {
    8790:	2300      	movs	r3, #0
    8792:	61bb      	str	r3, [r7, #24]
    8794:	e012      	b.n	87bc <btle_crcgen_lut+0x40>
		key = data[i] ^ (state & 0xff);
    8796:	69bb      	ldr	r3, [r7, #24]
    8798:	68ba      	ldr	r2, [r7, #8]
    879a:	4413      	add	r3, r2
    879c:	781a      	ldrb	r2, [r3, #0]
    879e:	69fb      	ldr	r3, [r7, #28]
    87a0:	b2db      	uxtb	r3, r3
    87a2:	4053      	eors	r3, r2
    87a4:	75fb      	strb	r3, [r7, #23]
		state = (state >> 8) ^ btle_crc_lut[key];
    87a6:	69fb      	ldr	r3, [r7, #28]
    87a8:	0a1a      	lsrs	r2, r3, #8
    87aa:	7dfb      	ldrb	r3, [r7, #23]
    87ac:	4909      	ldr	r1, [pc, #36]	; (87d4 <btle_crcgen_lut+0x58>)
    87ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    87b2:	4053      	eors	r3, r2
    87b4:	61fb      	str	r3, [r7, #28]
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
    87b6:	69bb      	ldr	r3, [r7, #24]
    87b8:	3301      	adds	r3, #1
    87ba:	61bb      	str	r3, [r7, #24]
    87bc:	69ba      	ldr	r2, [r7, #24]
    87be:	687b      	ldr	r3, [r7, #4]
    87c0:	429a      	cmp	r2, r3
    87c2:	dbe8      	blt.n	8796 <btle_crcgen_lut+0x1a>
		key = data[i] ^ (state & 0xff);
		state = (state >> 8) ^ btle_crc_lut[key];
	}
	return state;
    87c4:	69fb      	ldr	r3, [r7, #28]
}
    87c6:	4618      	mov	r0, r3
    87c8:	3724      	adds	r7, #36	; 0x24
    87ca:	46bd      	mov	sp, r7
    87cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    87d0:	4770      	bx	lr
    87d2:	bf00      	nop
    87d4:	100004a8 	.word	0x100004a8

000087d8 <usb_vendor_request_handler>:
*/

VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
    87d8:	b590      	push	{r4, r7, lr}
    87da:	b087      	sub	sp, #28
    87dc:	af00      	add	r7, sp, #0
    87de:	60f8      	str	r0, [r7, #12]
    87e0:	60b9      	str	r1, [r7, #8]
    87e2:	607a      	str	r2, [r7, #4]
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    87e4:	68fb      	ldr	r3, [r7, #12]
    87e6:	885b      	ldrh	r3, [r3, #2]
    87e8:	823b      	strh	r3, [r7, #16]
    87ea:	68fb      	ldr	r3, [r7, #12]
    87ec:	889b      	ldrh	r3, [r3, #4]
    87ee:	827b      	strh	r3, [r7, #18]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    87f0:	4b0b      	ldr	r3, [pc, #44]	; (8820 <usb_vendor_request_handler+0x48>)
    87f2:	681c      	ldr	r4, [r3, #0]
    87f4:	68fb      	ldr	r3, [r7, #12]
    87f6:	7859      	ldrb	r1, [r3, #1]
    87f8:	687b      	ldr	r3, [r7, #4]
    87fa:	681b      	ldr	r3, [r3, #0]
    87fc:	f107 0210 	add.w	r2, r7, #16
    8800:	4608      	mov	r0, r1
    8802:	4611      	mov	r1, r2
    8804:	461a      	mov	r2, r3
    8806:	68bb      	ldr	r3, [r7, #8]
    8808:	47a0      	blx	r4
    880a:	6178      	str	r0, [r7, #20]
	return (BOOL) (rv==1);
    880c:	697b      	ldr	r3, [r7, #20]
    880e:	2b01      	cmp	r3, #1
    8810:	bf0c      	ite	eq
    8812:	2301      	moveq	r3, #1
    8814:	2300      	movne	r3, #0
    8816:	b2db      	uxtb	r3, r3
}
    8818:	4618      	mov	r0, r3
    881a:	371c      	adds	r7, #28
    881c:	46bd      	mov	sp, r7
    881e:	bd90      	pop	{r4, r7, pc}
    8820:	10003274 	.word	0x10003274

00008824 <ubertooth_usb_init>:

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
    8824:	b580      	push	{r7, lr}
    8826:	b082      	sub	sp, #8
    8828:	af00      	add	r7, sp, #0
    882a:	6078      	str	r0, [r7, #4]
	// initialise stack
	USBInit();
    882c:	f001 fdce 	bl	a3cc <USBInit>
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);
    8830:	480b      	ldr	r0, [pc, #44]	; (8860 <ubertooth_usb_init+0x3c>)
    8832:	f002 fa2d 	bl	ac90 <USBRegisterDescriptors>

	// Request handler 
	v_req_handler = vendor_req_handler;
    8836:	4a0b      	ldr	r2, [pc, #44]	; (8864 <ubertooth_usb_init+0x40>)
    8838:	687b      	ldr	r3, [r7, #4]
    883a:	6013      	str	r3, [r2, #0]

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    883c:	2002      	movs	r0, #2
    883e:	490a      	ldr	r1, [pc, #40]	; (8868 <ubertooth_usb_init+0x44>)
    8840:	4a0a      	ldr	r2, [pc, #40]	; (886c <ubertooth_usb_init+0x48>)
    8842:	f001 fd9f 	bl	a384 <USBRegisterRequestHandler>

	// enable USB interrupts
	//ISER0 = ISER0_ISE_USB;

	// Enable WCID / driverless setup on Windows - Consumes Vendor Request 0xFF
	USBRegisterWinusbInterface(0xFF, "{8ac47a88-cc26-4aa9-887b-42ca8cf07a63}");
    8846:	20ff      	movs	r0, #255	; 0xff
    8848:	4909      	ldr	r1, [pc, #36]	; (8870 <ubertooth_usb_init+0x4c>)
    884a:	f002 f9cb 	bl	abe4 <USBRegisterWinusbInterface>

	// connect to bus
	USBHwConnect(TRUE);
    884e:	2001      	movs	r0, #1
    8850:	f001 fefe 	bl	a650 <USBHwConnect>

	return 0;
    8854:	2300      	movs	r3, #0
}
    8856:	4618      	mov	r0, r3
    8858:	3708      	adds	r7, #8
    885a:	46bd      	mov	sp, r7
    885c:	bd80      	pop	{r7, pc}
    885e:	bf00      	nop
    8860:	0000bb9c 	.word	0x0000bb9c
    8864:	10003274 	.word	0x10003274
    8868:	000087d9 	.word	0x000087d9
    886c:	10003170 	.word	0x10003170
    8870:	0000bc60 	.word	0x0000bc60

00008874 <queue_init>:

volatile u32 head = 0;
volatile u32 tail = 0;

void queue_init()
{
    8874:	b480      	push	{r7}
    8876:	af00      	add	r7, sp, #0
	head = 0;
    8878:	4b04      	ldr	r3, [pc, #16]	; (888c <queue_init+0x18>)
    887a:	2200      	movs	r2, #0
    887c:	601a      	str	r2, [r3, #0]
	tail = 0;
    887e:	4b04      	ldr	r3, [pc, #16]	; (8890 <queue_init+0x1c>)
    8880:	2200      	movs	r2, #0
    8882:	601a      	str	r2, [r3, #0]
}
    8884:	46bd      	mov	sp, r7
    8886:	f85d 7b04 	ldr.w	r7, [sp], #4
    888a:	4770      	bx	lr
    888c:	10000a5c 	.word	0x10000a5c
    8890:	10000a60 	.word	0x10000a60

00008894 <usb_enqueue>:

usb_pkt_rx *usb_enqueue()
{
    8894:	b480      	push	{r7}
    8896:	b083      	sub	sp, #12
    8898:	af00      	add	r7, sp, #0
	u8 h = head & 0x7F;
    889a:	4b13      	ldr	r3, [pc, #76]	; (88e8 <usb_enqueue+0x54>)
    889c:	681b      	ldr	r3, [r3, #0]
    889e:	b2db      	uxtb	r3, r3
    88a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    88a4:	71fb      	strb	r3, [r7, #7]
	u8 t = tail & 0x7F;
    88a6:	4b11      	ldr	r3, [pc, #68]	; (88ec <usb_enqueue+0x58>)
    88a8:	681b      	ldr	r3, [r3, #0]
    88aa:	b2db      	uxtb	r3, r3
    88ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    88b0:	71bb      	strb	r3, [r7, #6]
	u8 n = (t + 1) & 0x7F;
    88b2:	79bb      	ldrb	r3, [r7, #6]
    88b4:	3301      	adds	r3, #1
    88b6:	b2db      	uxtb	r3, r3
    88b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    88bc:	717b      	strb	r3, [r7, #5]

	/* fail if queue is full */
	if (h == n) {
    88be:	79fa      	ldrb	r2, [r7, #7]
    88c0:	797b      	ldrb	r3, [r7, #5]
    88c2:	429a      	cmp	r2, r3
    88c4:	d101      	bne.n	88ca <usb_enqueue+0x36>
		return NULL;
    88c6:	2300      	movs	r3, #0
    88c8:	e008      	b.n	88dc <usb_enqueue+0x48>
	}

	++tail;
    88ca:	4b08      	ldr	r3, [pc, #32]	; (88ec <usb_enqueue+0x58>)
    88cc:	681b      	ldr	r3, [r3, #0]
    88ce:	3301      	adds	r3, #1
    88d0:	4a06      	ldr	r2, [pc, #24]	; (88ec <usb_enqueue+0x58>)
    88d2:	6013      	str	r3, [r2, #0]
	return &fifo[t];
    88d4:	79bb      	ldrb	r3, [r7, #6]
    88d6:	019b      	lsls	r3, r3, #6
    88d8:	4a05      	ldr	r2, [pc, #20]	; (88f0 <usb_enqueue+0x5c>)
    88da:	4413      	add	r3, r2
	
}
    88dc:	4618      	mov	r0, r3
    88de:	370c      	adds	r7, #12
    88e0:	46bd      	mov	sp, r7
    88e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    88e6:	4770      	bx	lr
    88e8:	10000a5c 	.word	0x10000a5c
    88ec:	10000a60 	.word	0x10000a60
    88f0:	10001170 	.word	0x10001170

000088f4 <dequeue>:

usb_pkt_rx *dequeue()
{
    88f4:	b480      	push	{r7}
    88f6:	b083      	sub	sp, #12
    88f8:	af00      	add	r7, sp, #0
	u8 h = head & 0x7F;
    88fa:	4b10      	ldr	r3, [pc, #64]	; (893c <dequeue+0x48>)
    88fc:	681b      	ldr	r3, [r3, #0]
    88fe:	b2db      	uxtb	r3, r3
    8900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8904:	71fb      	strb	r3, [r7, #7]
	u8 t = tail & 0x7F;
    8906:	4b0e      	ldr	r3, [pc, #56]	; (8940 <dequeue+0x4c>)
    8908:	681b      	ldr	r3, [r3, #0]
    890a:	b2db      	uxtb	r3, r3
    890c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8910:	71bb      	strb	r3, [r7, #6]

	/* fail if queue is empty */
	if (h == t) {
    8912:	79fa      	ldrb	r2, [r7, #7]
    8914:	79bb      	ldrb	r3, [r7, #6]
    8916:	429a      	cmp	r2, r3
    8918:	d101      	bne.n	891e <dequeue+0x2a>
		return NULL;
    891a:	2300      	movs	r3, #0
    891c:	e008      	b.n	8930 <dequeue+0x3c>
	}

	++head;
    891e:	4b07      	ldr	r3, [pc, #28]	; (893c <dequeue+0x48>)
    8920:	681b      	ldr	r3, [r3, #0]
    8922:	3301      	adds	r3, #1
    8924:	4a05      	ldr	r2, [pc, #20]	; (893c <dequeue+0x48>)
    8926:	6013      	str	r3, [r2, #0]
	return &fifo[h];
    8928:	79fb      	ldrb	r3, [r7, #7]
    892a:	019b      	lsls	r3, r3, #6
    892c:	4a05      	ldr	r2, [pc, #20]	; (8944 <dequeue+0x50>)
    892e:	4413      	add	r3, r2
}
    8930:	4618      	mov	r0, r3
    8932:	370c      	adds	r7, #12
    8934:	46bd      	mov	sp, r7
    8936:	f85d 7b04 	ldr.w	r7, [sp], #4
    893a:	4770      	bx	lr
    893c:	10000a5c 	.word	0x10000a5c
    8940:	10000a60 	.word	0x10000a60
    8944:	10001170 	.word	0x10001170

00008948 <dequeue_send>:

#define USB_KEEP_ALIVE 400000
u32 last_usb_pkt = 0;  // for keep alive packets

int dequeue_send(u32 clkn)
{
    8948:	b580      	push	{r7, lr}
    894a:	b084      	sub	sp, #16
    894c:	af00      	add	r7, sp, #0
    894e:	6078      	str	r0, [r7, #4]
	usb_pkt_rx *pkt = dequeue(&pkt);
    8950:	f107 030c 	add.w	r3, r7, #12
    8954:	4618      	mov	r0, r3
    8956:	f7ff ffcd 	bl	88f4 <dequeue>
    895a:	4603      	mov	r3, r0
    895c:	60fb      	str	r3, [r7, #12]
	if (pkt != NULL) {
    895e:	68fb      	ldr	r3, [r7, #12]
    8960:	2b00      	cmp	r3, #0
    8962:	d00a      	beq.n	897a <dequeue_send+0x32>
		last_usb_pkt = clkn;
    8964:	4a11      	ldr	r2, [pc, #68]	; (89ac <dequeue_send+0x64>)
    8966:	687b      	ldr	r3, [r7, #4]
    8968:	6013      	str	r3, [r2, #0]
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    896a:	68fb      	ldr	r3, [r7, #12]
    896c:	2082      	movs	r0, #130	; 0x82
    896e:	4619      	mov	r1, r3
    8970:	2240      	movs	r2, #64	; 0x40
    8972:	f001 fec9 	bl	a708 <USBHwEPWrite>
		return 1;
    8976:	2301      	movs	r3, #1
    8978:	e013      	b.n	89a2 <dequeue_send+0x5a>
	} else {
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
    897a:	4b0c      	ldr	r3, [pc, #48]	; (89ac <dequeue_send+0x64>)
    897c:	681b      	ldr	r3, [r3, #0]
    897e:	687a      	ldr	r2, [r7, #4]
    8980:	1ad3      	subs	r3, r2, r3
    8982:	4a0b      	ldr	r2, [pc, #44]	; (89b0 <dequeue_send+0x68>)
    8984:	4293      	cmp	r3, r2
    8986:	d90b      	bls.n	89a0 <dequeue_send+0x58>
			u8 pkt_type = KEEP_ALIVE;
    8988:	2303      	movs	r3, #3
    898a:	72fb      	strb	r3, [r7, #11]
			last_usb_pkt = clkn;
    898c:	4a07      	ldr	r2, [pc, #28]	; (89ac <dequeue_send+0x64>)
    898e:	687b      	ldr	r3, [r7, #4]
    8990:	6013      	str	r3, [r2, #0]
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    8992:	f107 030b 	add.w	r3, r7, #11
    8996:	2082      	movs	r0, #130	; 0x82
    8998:	4619      	mov	r1, r3
    899a:	2201      	movs	r2, #1
    899c:	f001 feb4 	bl	a708 <USBHwEPWrite>
		}
		return 0;
    89a0:	2300      	movs	r3, #0
	}
}
    89a2:	4618      	mov	r0, r3
    89a4:	3710      	adds	r7, #16
    89a6:	46bd      	mov	sp, r7
    89a8:	bd80      	pop	{r7, pc}
    89aa:	bf00      	nop
    89ac:	10000a64 	.word	0x10000a64
    89b0:	00061a80 	.word	0x00061a80

000089b4 <handle_usb>:

void handle_usb(u32 clkn)
{
    89b4:	b580      	push	{r7, lr}
    89b6:	b084      	sub	sp, #16
    89b8:	af00      	add	r7, sp, #0
    89ba:	6078      	str	r0, [r7, #4]
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    89bc:	2082      	movs	r0, #130	; 0x82
    89be:	f001 fe67 	bl	a690 <USBHwEPGetStatus>
    89c2:	4603      	mov	r3, r0
    89c4:	73fb      	strb	r3, [r7, #15]
	if (!(epstat & EPSTAT_B1FULL)) {
    89c6:	7bfb      	ldrb	r3, [r7, #15]
    89c8:	f003 0320 	and.w	r3, r3, #32
    89cc:	2b00      	cmp	r3, #0
    89ce:	d102      	bne.n	89d6 <handle_usb+0x22>
		dequeue_send(clkn);
    89d0:	6878      	ldr	r0, [r7, #4]
    89d2:	f7ff ffb9 	bl	8948 <dequeue_send>
	}
	if (!(epstat & EPSTAT_B2FULL)) {
    89d6:	7bfb      	ldrb	r3, [r7, #15]
    89d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    89dc:	2b00      	cmp	r3, #0
    89de:	d102      	bne.n	89e6 <handle_usb+0x32>
		dequeue_send(clkn);
    89e0:	6878      	ldr	r0, [r7, #4]
    89e2:	f7ff ffb1 	bl	8948 <dequeue_send>
	}

	/* polled "interrupt" */
	USBHwISR();
    89e6:	f001 ff55 	bl	a894 <USBHwISR>
}
    89ea:	3710      	adds	r7, #16
    89ec:	46bd      	mov	sp, r7
    89ee:	bd80      	pop	{r7, pc}

000089f0 <cc2400_rangetest>:
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest(volatile u16 *chan_ptr)
{
    89f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    89f4:	b095      	sub	sp, #84	; 0x54
    89f6:	af00      	add	r7, sp, #0
    89f8:	6078      	str	r0, [r7, #4]
    89fa:	4669      	mov	r1, sp
    89fc:	6039      	str	r1, [r7, #0]
#ifdef TX_ENABLE
	u32 command[5];
	u32 result[5];
	int i;
	int j;
	u8 len = 22;
    89fe:	2116      	movs	r1, #22
    8a00:	f887 1046 	strb.w	r1, [r7, #70]	; 0x46
	u8 pa = 0;
    8a04:	2100      	movs	r1, #0
    8a06:	f887 1047 	strb.w	r1, [r7, #71]	; 0x47
	u8 txbuf[len];
    8a0a:	f897 6046 	ldrb.w	r6, [r7, #70]	; 0x46
    8a0e:	4631      	mov	r1, r6
    8a10:	3901      	subs	r1, #1
    8a12:	6439      	str	r1, [r7, #64]	; 0x40
    8a14:	b2f0      	uxtb	r0, r6
    8a16:	f04f 0100 	mov.w	r1, #0
    8a1a:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
    8a1e:	ea4b 7b50 	orr.w	fp, fp, r0, lsr #29
    8a22:	ea4f 0ac0 	mov.w	sl, r0, lsl #3
    8a26:	b2f0      	uxtb	r0, r6
    8a28:	f04f 0100 	mov.w	r1, #0
    8a2c:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    8a30:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
    8a34:	ea4f 08c0 	mov.w	r8, r0, lsl #3
    8a38:	4631      	mov	r1, r6
    8a3a:	3107      	adds	r1, #7
    8a3c:	08c9      	lsrs	r1, r1, #3
    8a3e:	00c9      	lsls	r1, r1, #3
    8a40:	ebad 0d01 	sub.w	sp, sp, r1
    8a44:	4669      	mov	r1, sp
    8a46:	3100      	adds	r1, #0
    8a48:	63f9      	str	r1, [r7, #60]	; 0x3c
	u8 rxbuf[len];
    8a4a:	f897 6046 	ldrb.w	r6, [r7, #70]	; 0x46
    8a4e:	4631      	mov	r1, r6
    8a50:	3901      	subs	r1, #1
    8a52:	63b9      	str	r1, [r7, #56]	; 0x38
    8a54:	b2f0      	uxtb	r0, r6
    8a56:	f04f 0100 	mov.w	r1, #0
    8a5a:	00cd      	lsls	r5, r1, #3
    8a5c:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
    8a60:	00c4      	lsls	r4, r0, #3
    8a62:	b2f0      	uxtb	r0, r6
    8a64:	f04f 0100 	mov.w	r1, #0
    8a68:	00cb      	lsls	r3, r1, #3
    8a6a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    8a6e:	00c2      	lsls	r2, r0, #3
    8a70:	4633      	mov	r3, r6
    8a72:	3307      	adds	r3, #7
    8a74:	08db      	lsrs	r3, r3, #3
    8a76:	00db      	lsls	r3, r3, #3
    8a78:	ebad 0d03 	sub.w	sp, sp, r3
    8a7c:	466b      	mov	r3, sp
    8a7e:	3300      	adds	r3, #0
    8a80:	637b      	str	r3, [r7, #52]	; 0x34

	txbuf[0] = len - 1; // length of data (rest of payload)
    8a82:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
    8a86:	3b01      	subs	r3, #1
    8a88:	b2da      	uxtb	r2, r3
    8a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8a8c:	701a      	strb	r2, [r3, #0]
	txbuf[1] = 0; // request
    8a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8a90:	2200      	movs	r2, #0
    8a92:	705a      	strb	r2, [r3, #1]

	// read device serial number
	command[0] = 58;
    8a94:	233a      	movs	r3, #58	; 0x3a
    8a96:	623b      	str	r3, [r7, #32]
	iap_entry(command, result);
    8a98:	4bb3      	ldr	r3, [pc, #716]	; (8d68 <cc2400_rangetest+0x378>)
    8a9a:	681b      	ldr	r3, [r3, #0]
    8a9c:	f107 0120 	add.w	r1, r7, #32
    8aa0:	f107 020c 	add.w	r2, r7, #12
    8aa4:	4608      	mov	r0, r1
    8aa6:	4611      	mov	r1, r2
    8aa8:	4798      	blx	r3
	if ((result[0] & 0xFF) != 0) //status check
    8aaa:	68fb      	ldr	r3, [r7, #12]
    8aac:	b2db      	uxtb	r3, r3
    8aae:	2b00      	cmp	r3, #0
    8ab0:	d001      	beq.n	8ab6 <cc2400_rangetest+0xc6>
    8ab2:	2300      	movs	r3, #0
		return;
    8ab4:	e1ac      	b.n	8e10 <cc2400_rangetest+0x420>
	txbuf[2] = (result[1] >> 24) & 0xFF;
    8ab6:	693b      	ldr	r3, [r7, #16]
    8ab8:	0e1b      	lsrs	r3, r3, #24
    8aba:	b2da      	uxtb	r2, r3
    8abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8abe:	709a      	strb	r2, [r3, #2]
	txbuf[3] = (result[1] >> 16) & 0xFF;
    8ac0:	693b      	ldr	r3, [r7, #16]
    8ac2:	0c1b      	lsrs	r3, r3, #16
    8ac4:	b2da      	uxtb	r2, r3
    8ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8ac8:	70da      	strb	r2, [r3, #3]
	txbuf[4] = (result[1] >> 8) & 0xFF;
    8aca:	693b      	ldr	r3, [r7, #16]
    8acc:	0a1b      	lsrs	r3, r3, #8
    8ace:	b2da      	uxtb	r2, r3
    8ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8ad2:	711a      	strb	r2, [r3, #4]
	txbuf[5] = result[1] & 0xFF;
    8ad4:	693b      	ldr	r3, [r7, #16]
    8ad6:	b2da      	uxtb	r2, r3
    8ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8ada:	715a      	strb	r2, [r3, #5]
	txbuf[6] = (result[2] >> 24) & 0xFF;
    8adc:	697b      	ldr	r3, [r7, #20]
    8ade:	0e1b      	lsrs	r3, r3, #24
    8ae0:	b2da      	uxtb	r2, r3
    8ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8ae4:	719a      	strb	r2, [r3, #6]
	txbuf[7] = (result[2] >> 16) & 0xFF;
    8ae6:	697b      	ldr	r3, [r7, #20]
    8ae8:	0c1b      	lsrs	r3, r3, #16
    8aea:	b2da      	uxtb	r2, r3
    8aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8aee:	71da      	strb	r2, [r3, #7]
	txbuf[8] = (result[2] >> 8) & 0xFF;
    8af0:	697b      	ldr	r3, [r7, #20]
    8af2:	0a1b      	lsrs	r3, r3, #8
    8af4:	b2da      	uxtb	r2, r3
    8af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8af8:	721a      	strb	r2, [r3, #8]
	txbuf[9] = result[2] & 0xFF;
    8afa:	697b      	ldr	r3, [r7, #20]
    8afc:	b2da      	uxtb	r2, r3
    8afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8b00:	725a      	strb	r2, [r3, #9]
	txbuf[10] = (result[3] >> 24) & 0xFF;
    8b02:	69bb      	ldr	r3, [r7, #24]
    8b04:	0e1b      	lsrs	r3, r3, #24
    8b06:	b2da      	uxtb	r2, r3
    8b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8b0a:	729a      	strb	r2, [r3, #10]
	txbuf[11] = (result[3] >> 16) & 0xFF;
    8b0c:	69bb      	ldr	r3, [r7, #24]
    8b0e:	0c1b      	lsrs	r3, r3, #16
    8b10:	b2da      	uxtb	r2, r3
    8b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8b14:	72da      	strb	r2, [r3, #11]
	txbuf[12] = (result[3] >> 8) & 0xFF;
    8b16:	69bb      	ldr	r3, [r7, #24]
    8b18:	0a1b      	lsrs	r3, r3, #8
    8b1a:	b2da      	uxtb	r2, r3
    8b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8b1e:	731a      	strb	r2, [r3, #12]
	txbuf[13] = result[3] & 0xFF;
    8b20:	69bb      	ldr	r3, [r7, #24]
    8b22:	b2da      	uxtb	r2, r3
    8b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8b26:	735a      	strb	r2, [r3, #13]
	txbuf[14] = (result[4] >> 24) & 0xFF;
    8b28:	69fb      	ldr	r3, [r7, #28]
    8b2a:	0e1b      	lsrs	r3, r3, #24
    8b2c:	b2da      	uxtb	r2, r3
    8b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8b30:	739a      	strb	r2, [r3, #14]
	txbuf[15] = (result[4] >> 16) & 0xFF;
    8b32:	69fb      	ldr	r3, [r7, #28]
    8b34:	0c1b      	lsrs	r3, r3, #16
    8b36:	b2da      	uxtb	r2, r3
    8b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8b3a:	73da      	strb	r2, [r3, #15]
	txbuf[16] = (result[4] >> 8) & 0xFF;
    8b3c:	69fb      	ldr	r3, [r7, #28]
    8b3e:	0a1b      	lsrs	r3, r3, #8
    8b40:	b2da      	uxtb	r2, r3
    8b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8b44:	741a      	strb	r2, [r3, #16]
	txbuf[17] = result[4] & 0xFF;
    8b46:	69fb      	ldr	r3, [r7, #28]
    8b48:	b2da      	uxtb	r2, r3
    8b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8b4c:	745a      	strb	r2, [r3, #17]

	txbuf[18] = pa; // request pa
    8b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8b50:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    8b54:	749a      	strb	r2, [r3, #18]
	txbuf[19] = 0; // request number
    8b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8b58:	2200      	movs	r2, #0
    8b5a:	74da      	strb	r2, [r3, #19]
	txbuf[20] = 0xff; // reply pa
    8b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8b5e:	22ff      	movs	r2, #255	; 0xff
    8b60:	751a      	strb	r2, [r3, #20]
	txbuf[21] = 0xff; // reply number
    8b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8b64:	22ff      	movs	r2, #255	; 0xff
    8b66:	755a      	strb	r2, [r3, #21]

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    8b68:	2012      	movs	r0, #18
    8b6a:	f642 3122 	movw	r1, #11042	; 0x2b22
    8b6e:	f001 f8fb 	bl	9d68 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    8b72:	2014      	movs	r0, #20
    8b74:	f241 314b 	movw	r1, #4939	; 0x134b
    8b78:	f001 f8f6 	bl	9d68 <cc2400_set>
	cc2400_set(GRMDM,   0x0df1);  // default value
    8b7c:	2020      	movs	r0, #32
    8b7e:	f640 51f1 	movw	r1, #3569	; 0xdf1
    8b82:	f001 f8f1 	bl	9d68 <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    8b86:	687b      	ldr	r3, [r7, #4]
    8b88:	881b      	ldrh	r3, [r3, #0]
    8b8a:	b29b      	uxth	r3, r3
    8b8c:	2002      	movs	r0, #2
    8b8e:	4619      	mov	r1, r3
    8b90:	f001 f8ea 	bl	9d68 <cc2400_set>
	cc2400_set(SYNCH,   0xf9ae);
    8b94:	202d      	movs	r0, #45	; 0x2d
    8b96:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    8b9a:	f001 f8e5 	bl	9d68 <cc2400_set>
	cc2400_set(SYNCL,   0x1584);
    8b9e:	202c      	movs	r0, #44	; 0x2c
    8ba0:	f241 5184 	movw	r1, #5508	; 0x1584
    8ba4:	f001 f8e0 	bl	9d68 <cc2400_set>
	cc2400_set(FREND,   8 | pa);
    8ba8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    8bac:	f043 0308 	orr.w	r3, r3, #8
    8bb0:	b2db      	uxtb	r3, r3
    8bb2:	b29b      	uxth	r3, r3
    8bb4:	2005      	movs	r0, #5
    8bb6:	4619      	mov	r1, r3
    8bb8:	f001 f8d6 	bl	9d68 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029);
    8bbc:	2003      	movs	r0, #3
    8bbe:	2129      	movs	r1, #41	; 0x29
    8bc0:	f001 f8d2 	bl	9d68 <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    8bc4:	bf00      	nop
    8bc6:	f001 f987 	bl	9ed8 <cc2400_status>
    8bca:	4603      	mov	r3, r0
    8bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8bd0:	2b00      	cmp	r3, #0
    8bd2:	d0f8      	beq.n	8bc6 <cc2400_rangetest+0x1d6>
	cc2400_strobe(SFSON);
    8bd4:	2061      	movs	r0, #97	; 0x61
    8bd6:	f001 f989 	bl	9eec <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8bda:	bf00      	nop
    8bdc:	f001 f97c 	bl	9ed8 <cc2400_status>
    8be0:	4603      	mov	r3, r0
    8be2:	f003 0304 	and.w	r3, r3, #4
    8be6:	2b00      	cmp	r3, #0
    8be8:	d0f8      	beq.n	8bdc <cc2400_rangetest+0x1ec>
	TXLED_SET;
    8bea:	4b60      	ldr	r3, [pc, #384]	; (8d6c <cc2400_rangetest+0x37c>)
    8bec:	f44f 7280 	mov.w	r2, #256	; 0x100
    8bf0:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    8bf2:	4b5f      	ldr	r3, [pc, #380]	; (8d70 <cc2400_rangetest+0x380>)
    8bf4:	2280      	movs	r2, #128	; 0x80
    8bf6:	601a      	str	r2, [r3, #0]
#endif
	for (pa = 0; pa < 8; pa++) {
    8bf8:	2300      	movs	r3, #0
    8bfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    8bfe:	e03e      	b.n	8c7e <cc2400_rangetest+0x28e>
		cc2400_set(FREND, 8 | pa);
    8c00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    8c04:	f043 0308 	orr.w	r3, r3, #8
    8c08:	b2db      	uxtb	r3, r3
    8c0a:	b29b      	uxth	r3, r3
    8c0c:	2005      	movs	r0, #5
    8c0e:	4619      	mov	r1, r3
    8c10:	f001 f8aa 	bl	9d68 <cc2400_set>
		txbuf[18] = pa;
    8c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8c16:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    8c1a:	749a      	strb	r2, [r3, #18]
		for (i = 0; i < 16; i++) {
    8c1c:	2300      	movs	r3, #0
    8c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
    8c20:	e025      	b.n	8c6e <cc2400_rangetest+0x27e>
			txbuf[19] = i;
    8c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8c24:	b2da      	uxtb	r2, r3
    8c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8c28:	74da      	strb	r2, [r3, #19]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8c2a:	bf00      	nop
    8c2c:	200e      	movs	r0, #14
    8c2e:	f001 f885 	bl	9d3c <cc2400_get>
    8c32:	4603      	mov	r3, r0
    8c34:	f003 031f 	and.w	r3, r3, #31
    8c38:	2b0f      	cmp	r3, #15
    8c3a:	d1f7      	bne.n	8c2c <cc2400_rangetest+0x23c>
			// transmit a packet
			for (j = 0; j < len; j++)
    8c3c:	2300      	movs	r3, #0
    8c3e:	64bb      	str	r3, [r7, #72]	; 0x48
    8c40:	e00a      	b.n	8c58 <cc2400_rangetest+0x268>
				cc2400_set8(FIFOREG, txbuf[j]);
    8c42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    8c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8c46:	4413      	add	r3, r2
    8c48:	781b      	ldrb	r3, [r3, #0]
    8c4a:	2070      	movs	r0, #112	; 0x70
    8c4c:	4619      	mov	r1, r3
    8c4e:	f001 f8b9 	bl	9dc4 <cc2400_set8>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
    8c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8c54:	3301      	adds	r3, #1
    8c56:	64bb      	str	r3, [r7, #72]	; 0x48
    8c58:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
    8c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8c5e:	429a      	cmp	r2, r3
    8c60:	dcef      	bgt.n	8c42 <cc2400_rangetest+0x252>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
    8c62:	2063      	movs	r0, #99	; 0x63
    8c64:	f001 f942 	bl	9eec <cc2400_strobe>
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    8c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8c6a:	3301      	adds	r3, #1
    8c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
    8c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8c70:	2b0f      	cmp	r3, #15
    8c72:	ddd6      	ble.n	8c22 <cc2400_rangetest+0x232>
	while (!(cc2400_status() & FS_LOCK));
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
    8c74:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    8c78:	3301      	adds	r3, #1
    8c7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    8c7e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    8c82:	2b07      	cmp	r3, #7
    8c84:	d9bc      	bls.n	8c00 <cc2400_rangetest+0x210>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
		}
	}
	// sent packet, now look for repeated packet
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8c86:	bf00      	nop
    8c88:	200e      	movs	r0, #14
    8c8a:	f001 f857 	bl	9d3c <cc2400_get>
    8c8e:	4603      	mov	r3, r0
    8c90:	f003 031f 	and.w	r3, r3, #31
    8c94:	2b0f      	cmp	r3, #15
    8c96:	d1f7      	bne.n	8c88 <cc2400_rangetest+0x298>
	TXLED_CLR;
    8c98:	4b36      	ldr	r3, [pc, #216]	; (8d74 <cc2400_rangetest+0x384>)
    8c9a:	f44f 7280 	mov.w	r2, #256	; 0x100
    8c9e:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SRFOFF);
    8ca0:	2064      	movs	r0, #100	; 0x64
    8ca2:	f001 f923 	bl	9eec <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    8ca6:	bf00      	nop
    8ca8:	f001 f916 	bl	9ed8 <cc2400_status>
    8cac:	4603      	mov	r3, r0
    8cae:	f003 0304 	and.w	r3, r3, #4
    8cb2:	2b00      	cmp	r3, #0
    8cb4:	d1f8      	bne.n	8ca8 <cc2400_rangetest+0x2b8>
	cc2400_set(FSDIV, *chan_ptr - 1);
    8cb6:	687b      	ldr	r3, [r7, #4]
    8cb8:	881b      	ldrh	r3, [r3, #0]
    8cba:	b29b      	uxth	r3, r3
    8cbc:	3b01      	subs	r3, #1
    8cbe:	b29b      	uxth	r3, r3
    8cc0:	2002      	movs	r0, #2
    8cc2:	4619      	mov	r1, r3
    8cc4:	f001 f850 	bl	9d68 <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    8cc8:	bf00      	nop
    8cca:	f001 f905 	bl	9ed8 <cc2400_status>
    8cce:	4603      	mov	r3, r0
    8cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8cd4:	2b00      	cmp	r3, #0
    8cd6:	d0f8      	beq.n	8cca <cc2400_rangetest+0x2da>
	cc2400_strobe(SFSON);
    8cd8:	2061      	movs	r0, #97	; 0x61
    8cda:	f001 f907 	bl	9eec <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8cde:	bf00      	nop
    8ce0:	f001 f8fa 	bl	9ed8 <cc2400_status>
    8ce4:	4603      	mov	r3, r0
    8ce6:	f003 0304 	and.w	r3, r3, #4
    8cea:	2b00      	cmp	r3, #0
    8cec:	d0f8      	beq.n	8ce0 <cc2400_rangetest+0x2f0>
	RXLED_SET;
    8cee:	4b1f      	ldr	r3, [pc, #124]	; (8d6c <cc2400_rangetest+0x37c>)
    8cf0:	2210      	movs	r2, #16
    8cf2:	601a      	str	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8cf4:	bf00      	nop
    8cf6:	200e      	movs	r0, #14
    8cf8:	f001 f820 	bl	9d3c <cc2400_get>
    8cfc:	4603      	mov	r3, r0
    8cfe:	f003 031f 	and.w	r3, r3, #31
    8d02:	2b0f      	cmp	r3, #15
    8d04:	d1f7      	bne.n	8cf6 <cc2400_rangetest+0x306>
		cc2400_strobe(SRX);
    8d06:	2062      	movs	r0, #98	; 0x62
    8d08:	f001 f8f0 	bl	9eec <cc2400_strobe>
		while (!(cc2400_status() & SYNC_RECEIVED));
    8d0c:	bf00      	nop
    8d0e:	f001 f8e3 	bl	9ed8 <cc2400_status>
    8d12:	4603      	mov	r3, r0
    8d14:	f003 0310 	and.w	r3, r3, #16
    8d18:	2b00      	cmp	r3, #0
    8d1a:	d0f8      	beq.n	8d0e <cc2400_rangetest+0x31e>
		USRLED_SET;
    8d1c:	4b13      	ldr	r3, [pc, #76]	; (8d6c <cc2400_rangetest+0x37c>)
    8d1e:	2202      	movs	r2, #2
    8d20:	601a      	str	r2, [r3, #0]
		for (j = 0; j < len; j++)
    8d22:	2300      	movs	r3, #0
    8d24:	64bb      	str	r3, [r7, #72]	; 0x48
    8d26:	e00c      	b.n	8d42 <cc2400_rangetest+0x352>
			rxbuf[j] = cc2400_get8(FIFOREG);
    8d28:	2070      	movs	r0, #112	; 0x70
    8d2a:	f001 f831 	bl	9d90 <cc2400_get8>
    8d2e:	4603      	mov	r3, r0
    8d30:	4619      	mov	r1, r3
    8d32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8d36:	4413      	add	r3, r2
    8d38:	460a      	mov	r2, r1
    8d3a:	701a      	strb	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;
		for (j = 0; j < len; j++)
    8d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8d3e:	3301      	adds	r3, #1
    8d40:	64bb      	str	r3, [r7, #72]	; 0x48
    8d42:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
    8d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8d48:	429a      	cmp	r2, r3
    8d4a:	dced      	bgt.n	8d28 <cc2400_rangetest+0x338>
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
    8d4c:	f001 f8c4 	bl	9ed8 <cc2400_status>
    8d50:	4603      	mov	r3, r0
    8d52:	f003 0308 	and.w	r3, r3, #8
    8d56:	2b00      	cmp	r3, #0
    8d58:	d001      	beq.n	8d5e <cc2400_rangetest+0x36e>
			break;
    8d5a:	bf00      	nop
		USRLED_CLR;
	}

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8d5c:	e00c      	b.n	8d78 <cc2400_rangetest+0x388>
		USRLED_SET;
		for (j = 0; j < len; j++)
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
			break;
		USRLED_CLR;
    8d5e:	4b05      	ldr	r3, [pc, #20]	; (8d74 <cc2400_rangetest+0x384>)
    8d60:	2202      	movs	r2, #2
    8d62:	601a      	str	r2, [r3, #0]
	}
    8d64:	e7c6      	b.n	8cf4 <cc2400_rangetest+0x304>
    8d66:	bf00      	nop
    8d68:	100008a8 	.word	0x100008a8
    8d6c:	2009c038 	.word	0x2009c038
    8d70:	2009c058 	.word	0x2009c058
    8d74:	2009c03c 	.word	0x2009c03c

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8d78:	200e      	movs	r0, #14
    8d7a:	f000 ffdf 	bl	9d3c <cc2400_get>
    8d7e:	4603      	mov	r3, r0
    8d80:	f003 031f 	and.w	r3, r3, #31
    8d84:	2b0f      	cmp	r3, #15
    8d86:	d1f7      	bne.n	8d78 <cc2400_rangetest+0x388>
	cc2400_strobe(SRFOFF);
    8d88:	2064      	movs	r0, #100	; 0x64
    8d8a:	f001 f8af 	bl	9eec <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    8d8e:	bf00      	nop
    8d90:	f001 f8a2 	bl	9ed8 <cc2400_status>
    8d94:	4603      	mov	r3, r0
    8d96:	f003 0304 	and.w	r3, r3, #4
    8d9a:	2b00      	cmp	r3, #0
    8d9c:	d1f8      	bne.n	8d90 <cc2400_rangetest+0x3a0>
#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    8d9e:	4b20      	ldr	r3, [pc, #128]	; (8e20 <cc2400_rangetest+0x430>)
    8da0:	2280      	movs	r2, #128	; 0x80
    8da2:	601a      	str	r2, [r3, #0]
#endif
	RXLED_CLR;
    8da4:	4b1f      	ldr	r3, [pc, #124]	; (8e24 <cc2400_rangetest+0x434>)
    8da6:	2210      	movs	r2, #16
    8da8:	601a      	str	r2, [r3, #0]

	// get test result
	rr.valid       = 1;
    8daa:	4b1f      	ldr	r3, [pc, #124]	; (8e28 <cc2400_rangetest+0x438>)
    8dac:	2201      	movs	r2, #1
    8dae:	701a      	strb	r2, [r3, #0]
	rr.request_pa  = rxbuf[18];
    8db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8db2:	7c9a      	ldrb	r2, [r3, #18]
    8db4:	4b1c      	ldr	r3, [pc, #112]	; (8e28 <cc2400_rangetest+0x438>)
    8db6:	705a      	strb	r2, [r3, #1]
	rr.request_num = rxbuf[19];
    8db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8dba:	7cda      	ldrb	r2, [r3, #19]
    8dbc:	4b1a      	ldr	r3, [pc, #104]	; (8e28 <cc2400_rangetest+0x438>)
    8dbe:	709a      	strb	r2, [r3, #2]
	rr.reply_pa    = rxbuf[20];
    8dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8dc2:	7d1a      	ldrb	r2, [r3, #20]
    8dc4:	4b18      	ldr	r3, [pc, #96]	; (8e28 <cc2400_rangetest+0x438>)
    8dc6:	70da      	strb	r2, [r3, #3]
	rr.reply_num   = rxbuf[21];
    8dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8dca:	7d5a      	ldrb	r2, [r3, #21]
    8dcc:	4b16      	ldr	r3, [pc, #88]	; (8e28 <cc2400_rangetest+0x438>)
    8dce:	711a      	strb	r2, [r3, #4]

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
    8dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8dd2:	2201      	movs	r2, #1
    8dd4:	705a      	strb	r2, [r3, #1]
	for (i = 0; i < 18; i++)
    8dd6:	2300      	movs	r3, #0
    8dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
    8dda:	e012      	b.n	8e02 <cc2400_rangetest+0x412>
		if (rxbuf[i] != txbuf[i])
    8ddc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8de0:	4413      	add	r3, r2
    8de2:	781a      	ldrb	r2, [r3, #0]
    8de4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    8de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8de8:	440b      	add	r3, r1
    8dea:	781b      	ldrb	r3, [r3, #0]
    8dec:	429a      	cmp	r2, r3
    8dee:	d005      	beq.n	8dfc <cc2400_rangetest+0x40c>
			rr.valid = 2 + i;
    8df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8df2:	b2db      	uxtb	r3, r3
    8df4:	3302      	adds	r3, #2
    8df6:	b2da      	uxtb	r2, r3
    8df8:	4b0b      	ldr	r3, [pc, #44]	; (8e28 <cc2400_rangetest+0x438>)
    8dfa:	701a      	strb	r2, [r3, #0]
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
    8dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8dfe:	3301      	adds	r3, #1
    8e00:	64fb      	str	r3, [r7, #76]	; 0x4c
    8e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8e04:	2b11      	cmp	r3, #17
    8e06:	dde9      	ble.n	8ddc <cc2400_rangetest+0x3ec>
		if (rxbuf[i] != txbuf[i])
			rr.valid = 2 + i;

	USRLED_CLR;
    8e08:	4b06      	ldr	r3, [pc, #24]	; (8e24 <cc2400_rangetest+0x434>)
    8e0a:	2202      	movs	r2, #2
    8e0c:	601a      	str	r2, [r3, #0]
    8e0e:	2301      	movs	r3, #1
    8e10:	f8d7 d000 	ldr.w	sp, [r7]
    8e14:	2b01      	cmp	r3, #1
#endif
}
    8e16:	3754      	adds	r7, #84	; 0x54
    8e18:	46bd      	mov	sp, r7
    8e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8e1e:	bf00      	nop
    8e20:	2009c05c 	.word	0x2009c05c
    8e24:	2009c03c 	.word	0x2009c03c
    8e28:	10001070 	.word	0x10001070

00008e2c <cc2400_repeater>:

/* This is the repeater implementation to be used with cc2400_rangetest(). */
void cc2400_repeater(volatile u16 *chan_ptr)
{
    8e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e2e:	b089      	sub	sp, #36	; 0x24
    8e30:	af00      	add	r7, sp, #0
    8e32:	6078      	str	r0, [r7, #4]
#ifdef TX_ENABLE
	int i;
	int j;
	u8 len = 22;
    8e34:	2116      	movs	r1, #22
    8e36:	75b9      	strb	r1, [r7, #22]
	u8 pa = 0;
    8e38:	2100      	movs	r1, #0
    8e3a:	75f9      	strb	r1, [r7, #23]
	u8 buf[len];
    8e3c:	7dbe      	ldrb	r6, [r7, #22]
    8e3e:	4631      	mov	r1, r6
    8e40:	3901      	subs	r1, #1
    8e42:	6139      	str	r1, [r7, #16]
    8e44:	b2f0      	uxtb	r0, r6
    8e46:	f04f 0100 	mov.w	r1, #0
    8e4a:	00cd      	lsls	r5, r1, #3
    8e4c:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
    8e50:	00c4      	lsls	r4, r0, #3
    8e52:	b2f0      	uxtb	r0, r6
    8e54:	f04f 0100 	mov.w	r1, #0
    8e58:	00cb      	lsls	r3, r1, #3
    8e5a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    8e5e:	00c2      	lsls	r2, r0, #3
    8e60:	4633      	mov	r3, r6
    8e62:	3307      	adds	r3, #7
    8e64:	08db      	lsrs	r3, r3, #3
    8e66:	00db      	lsls	r3, r3, #3
    8e68:	ebad 0d03 	sub.w	sp, sp, r3
    8e6c:	466b      	mov	r3, sp
    8e6e:	3300      	adds	r3, #0
    8e70:	60fb      	str	r3, [r7, #12]

	//FIXME allow to be turned off
	while (1) {
		cc2400_set(LMTST,   0x2b22);
    8e72:	2012      	movs	r0, #18
    8e74:	f642 3122 	movw	r1, #11042	; 0x2b22
    8e78:	f000 ff76 	bl	9d68 <cc2400_set>
		cc2400_set(MDMTST0, 0x134b);
    8e7c:	2014      	movs	r0, #20
    8e7e:	f241 314b 	movw	r1, #4939	; 0x134b
    8e82:	f000 ff71 	bl	9d68 <cc2400_set>
		cc2400_set(FSDIV,   *chan_ptr - 1);
    8e86:	687b      	ldr	r3, [r7, #4]
    8e88:	881b      	ldrh	r3, [r3, #0]
    8e8a:	b29b      	uxth	r3, r3
    8e8c:	3b01      	subs	r3, #1
    8e8e:	b29b      	uxth	r3, r3
    8e90:	2002      	movs	r0, #2
    8e92:	4619      	mov	r1, r3
    8e94:	f000 ff68 	bl	9d68 <cc2400_set>
		cc2400_set(SYNCH,   0xf9ae);
    8e98:	202d      	movs	r0, #45	; 0x2d
    8e9a:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    8e9e:	f000 ff63 	bl	9d68 <cc2400_set>
		cc2400_set(SYNCL,   0x1584);
    8ea2:	202c      	movs	r0, #44	; 0x2c
    8ea4:	f241 5184 	movw	r1, #5508	; 0x1584
    8ea8:	f000 ff5e 	bl	9d68 <cc2400_set>
		cc2400_set(FREND,   0x0008); // minimum tx power
    8eac:	2005      	movs	r0, #5
    8eae:	2108      	movs	r1, #8
    8eb0:	f000 ff5a 	bl	9d68 <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    8eb4:	2003      	movs	r0, #3
    8eb6:	2129      	movs	r1, #41	; 0x29
    8eb8:	f000 ff56 	bl	9d68 <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    8ebc:	bf00      	nop
    8ebe:	f001 f80b 	bl	9ed8 <cc2400_status>
    8ec2:	4603      	mov	r3, r0
    8ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8ec8:	2b00      	cmp	r3, #0
    8eca:	d0f8      	beq.n	8ebe <cc2400_repeater+0x92>
		cc2400_strobe(SFSON);
    8ecc:	2061      	movs	r0, #97	; 0x61
    8ece:	f001 f80d 	bl	9eec <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    8ed2:	bf00      	nop
    8ed4:	f001 f800 	bl	9ed8 <cc2400_status>
    8ed8:	4603      	mov	r3, r0
    8eda:	f003 0304 	and.w	r3, r3, #4
    8ede:	2b00      	cmp	r3, #0
    8ee0:	d0f8      	beq.n	8ed4 <cc2400_repeater+0xa8>
		RXLED_SET;
    8ee2:	4b6a      	ldr	r3, [pc, #424]	; (908c <cc2400_repeater+0x260>)
    8ee4:	2210      	movs	r2, #16
    8ee6:	601a      	str	r2, [r3, #0]
		TXLED_CLR;
    8ee8:	4b69      	ldr	r3, [pc, #420]	; (9090 <cc2400_repeater+0x264>)
    8eea:	f44f 7280 	mov.w	r2, #256	; 0x100
    8eee:	601a      	str	r2, [r3, #0]
		USRLED_CLR;
    8ef0:	4b67      	ldr	r3, [pc, #412]	; (9090 <cc2400_repeater+0x264>)
    8ef2:	2202      	movs	r2, #2
    8ef4:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    8ef6:	4b67      	ldr	r3, [pc, #412]	; (9094 <cc2400_repeater+0x268>)
    8ef8:	2280      	movs	r2, #128	; 0x80
    8efa:	601a      	str	r2, [r3, #0]
#endif
		while (1) {
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8efc:	bf00      	nop
    8efe:	200e      	movs	r0, #14
    8f00:	f000 ff1c 	bl	9d3c <cc2400_get>
    8f04:	4603      	mov	r3, r0
    8f06:	f003 031f 	and.w	r3, r3, #31
    8f0a:	2b0f      	cmp	r3, #15
    8f0c:	d1f7      	bne.n	8efe <cc2400_repeater+0xd2>
			USRLED_CLR;
    8f0e:	4b60      	ldr	r3, [pc, #384]	; (9090 <cc2400_repeater+0x264>)
    8f10:	2202      	movs	r2, #2
    8f12:	601a      	str	r2, [r3, #0]
			cc2400_strobe(SRX);
    8f14:	2062      	movs	r0, #98	; 0x62
    8f16:	f000 ffe9 	bl	9eec <cc2400_strobe>
			while (!(cc2400_status() & SYNC_RECEIVED));
    8f1a:	bf00      	nop
    8f1c:	f000 ffdc 	bl	9ed8 <cc2400_status>
    8f20:	4603      	mov	r3, r0
    8f22:	f003 0310 	and.w	r3, r3, #16
    8f26:	2b00      	cmp	r3, #0
    8f28:	d0f8      	beq.n	8f1c <cc2400_repeater+0xf0>
			USRLED_SET;
    8f2a:	4b58      	ldr	r3, [pc, #352]	; (908c <cc2400_repeater+0x260>)
    8f2c:	2202      	movs	r2, #2
    8f2e:	601a      	str	r2, [r3, #0]
			for (i = 0; i < len; i++)
    8f30:	2300      	movs	r3, #0
    8f32:	61fb      	str	r3, [r7, #28]
    8f34:	e00c      	b.n	8f50 <cc2400_repeater+0x124>
				buf[i] = cc2400_get8(FIFOREG);
    8f36:	2070      	movs	r0, #112	; 0x70
    8f38:	f000 ff2a 	bl	9d90 <cc2400_get8>
    8f3c:	4603      	mov	r3, r0
    8f3e:	4619      	mov	r1, r3
    8f40:	68fa      	ldr	r2, [r7, #12]
    8f42:	69fb      	ldr	r3, [r7, #28]
    8f44:	4413      	add	r3, r2
    8f46:	460a      	mov	r2, r1
    8f48:	701a      	strb	r2, [r3, #0]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			USRLED_CLR;
			cc2400_strobe(SRX);
			while (!(cc2400_status() & SYNC_RECEIVED));
			USRLED_SET;
			for (i = 0; i < len; i++)
    8f4a:	69fb      	ldr	r3, [r7, #28]
    8f4c:	3301      	adds	r3, #1
    8f4e:	61fb      	str	r3, [r7, #28]
    8f50:	7dba      	ldrb	r2, [r7, #22]
    8f52:	69fb      	ldr	r3, [r7, #28]
    8f54:	429a      	cmp	r2, r3
    8f56:	dcee      	bgt.n	8f36 <cc2400_repeater+0x10a>
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
    8f58:	f000 ffbe 	bl	9ed8 <cc2400_status>
    8f5c:	4603      	mov	r3, r0
    8f5e:	f003 0308 	and.w	r3, r3, #8
    8f62:	2b00      	cmp	r3, #0
    8f64:	d003      	beq.n	8f6e <cc2400_repeater+0x142>
				break;
    8f66:	bf00      	nop
		}
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
    8f68:	4b4b      	ldr	r3, [pc, #300]	; (9098 <cc2400_repeater+0x26c>)
    8f6a:	61fb      	str	r3, [r7, #28]
    8f6c:	e000      	b.n	8f70 <cc2400_repeater+0x144>
			USRLED_SET;
			for (i = 0; i < len; i++)
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
				break;
		}
    8f6e:	e7c5      	b.n	8efc <cc2400_repeater+0xd0>
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
    8f70:	69fb      	ldr	r3, [r7, #28]
    8f72:	3b01      	subs	r3, #1
    8f74:	61fb      	str	r3, [r7, #28]
    8f76:	69fb      	ldr	r3, [r7, #28]
    8f78:	2b00      	cmp	r3, #0
    8f7a:	d1f9      	bne.n	8f70 <cc2400_repeater+0x144>
		USRLED_CLR;
    8f7c:	4b44      	ldr	r3, [pc, #272]	; (9090 <cc2400_repeater+0x264>)
    8f7e:	2202      	movs	r2, #2
    8f80:	601a      	str	r2, [r3, #0]
		RXLED_CLR;
    8f82:	4b43      	ldr	r3, [pc, #268]	; (9090 <cc2400_repeater+0x264>)
    8f84:	2210      	movs	r2, #16
    8f86:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    8f88:	2064      	movs	r0, #100	; 0x64
    8f8a:	f000 ffaf 	bl	9eec <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    8f8e:	bf00      	nop
    8f90:	f000 ffa2 	bl	9ed8 <cc2400_status>
    8f94:	4603      	mov	r3, r0
    8f96:	f003 0304 	and.w	r3, r3, #4
    8f9a:	2b00      	cmp	r3, #0
    8f9c:	d1f8      	bne.n	8f90 <cc2400_repeater+0x164>
		while (!(cc2400_status() & XOSC16M_STABLE));
    8f9e:	bf00      	nop
    8fa0:	f000 ff9a 	bl	9ed8 <cc2400_status>
    8fa4:	4603      	mov	r3, r0
    8fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8faa:	2b00      	cmp	r3, #0
    8fac:	d0f8      	beq.n	8fa0 <cc2400_repeater+0x174>
		cc2400_set(FSDIV, *chan_ptr);
    8fae:	687b      	ldr	r3, [r7, #4]
    8fb0:	881b      	ldrh	r3, [r3, #0]
    8fb2:	b29b      	uxth	r3, r3
    8fb4:	2002      	movs	r0, #2
    8fb6:	4619      	mov	r1, r3
    8fb8:	f000 fed6 	bl	9d68 <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    8fbc:	bf00      	nop
    8fbe:	f000 ff8b 	bl	9ed8 <cc2400_status>
    8fc2:	4603      	mov	r3, r0
    8fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8fc8:	2b00      	cmp	r3, #0
    8fca:	d0f8      	beq.n	8fbe <cc2400_repeater+0x192>
		cc2400_strobe(SFSON);
    8fcc:	2061      	movs	r0, #97	; 0x61
    8fce:	f000 ff8d 	bl	9eec <cc2400_strobe>
		TXLED_SET;
    8fd2:	4b2e      	ldr	r3, [pc, #184]	; (908c <cc2400_repeater+0x260>)
    8fd4:	f44f 7280 	mov.w	r2, #256	; 0x100
    8fd8:	601a      	str	r2, [r3, #0]
		buf[0] = len - 1; // length of data (rest of payload)
    8fda:	7dbb      	ldrb	r3, [r7, #22]
    8fdc:	3b01      	subs	r3, #1
    8fde:	b2da      	uxtb	r2, r3
    8fe0:	68fb      	ldr	r3, [r7, #12]
    8fe2:	701a      	strb	r2, [r3, #0]
		buf[1] = 1; // reply
    8fe4:	68fb      	ldr	r3, [r7, #12]
    8fe6:	2201      	movs	r2, #1
    8fe8:	705a      	strb	r2, [r3, #1]
		for (pa = 0; pa < 8; pa++) {
    8fea:	2300      	movs	r3, #0
    8fec:	75fb      	strb	r3, [r7, #23]
    8fee:	e039      	b.n	9064 <cc2400_repeater+0x238>
			cc2400_set(FREND, 8 | pa);
    8ff0:	7dfb      	ldrb	r3, [r7, #23]
    8ff2:	f043 0308 	orr.w	r3, r3, #8
    8ff6:	b2db      	uxtb	r3, r3
    8ff8:	b29b      	uxth	r3, r3
    8ffa:	2005      	movs	r0, #5
    8ffc:	4619      	mov	r1, r3
    8ffe:	f000 feb3 	bl	9d68 <cc2400_set>
			buf[20] = pa;
    9002:	68fb      	ldr	r3, [r7, #12]
    9004:	7dfa      	ldrb	r2, [r7, #23]
    9006:	751a      	strb	r2, [r3, #20]
			for (i = 0; i < 16; i++) {
    9008:	2300      	movs	r3, #0
    900a:	61fb      	str	r3, [r7, #28]
    900c:	e024      	b.n	9058 <cc2400_repeater+0x22c>
				buf[21] = i;
    900e:	69fb      	ldr	r3, [r7, #28]
    9010:	b2da      	uxtb	r2, r3
    9012:	68fb      	ldr	r3, [r7, #12]
    9014:	755a      	strb	r2, [r3, #21]
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    9016:	bf00      	nop
    9018:	200e      	movs	r0, #14
    901a:	f000 fe8f 	bl	9d3c <cc2400_get>
    901e:	4603      	mov	r3, r0
    9020:	f003 031f 	and.w	r3, r3, #31
    9024:	2b0f      	cmp	r3, #15
    9026:	d1f7      	bne.n	9018 <cc2400_repeater+0x1ec>
					for (j = 0; j < len; j++)
    9028:	2300      	movs	r3, #0
    902a:	61bb      	str	r3, [r7, #24]
    902c:	e00a      	b.n	9044 <cc2400_repeater+0x218>
						cc2400_set8(FIFOREG, buf[j]);
    902e:	68fa      	ldr	r2, [r7, #12]
    9030:	69bb      	ldr	r3, [r7, #24]
    9032:	4413      	add	r3, r2
    9034:	781b      	ldrb	r3, [r3, #0]
    9036:	2070      	movs	r0, #112	; 0x70
    9038:	4619      	mov	r1, r3
    903a:	f000 fec3 	bl	9dc4 <cc2400_set8>
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
					for (j = 0; j < len; j++)
    903e:	69bb      	ldr	r3, [r7, #24]
    9040:	3301      	adds	r3, #1
    9042:	61bb      	str	r3, [r7, #24]
    9044:	7dba      	ldrb	r2, [r7, #22]
    9046:	69bb      	ldr	r3, [r7, #24]
    9048:	429a      	cmp	r2, r3
    904a:	dcf0      	bgt.n	902e <cc2400_repeater+0x202>
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
    904c:	2063      	movs	r0, #99	; 0x63
    904e:	f000 ff4d 	bl	9eec <cc2400_strobe>
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    9052:	69fb      	ldr	r3, [r7, #28]
    9054:	3301      	adds	r3, #1
    9056:	61fb      	str	r3, [r7, #28]
    9058:	69fb      	ldr	r3, [r7, #28]
    905a:	2b0f      	cmp	r3, #15
    905c:	ddd7      	ble.n	900e <cc2400_repeater+0x1e2>
		while (!(cc2400_status() & XOSC16M_STABLE));
		cc2400_strobe(SFSON);
		TXLED_SET;
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
    905e:	7dfb      	ldrb	r3, [r7, #23]
    9060:	3301      	adds	r3, #1
    9062:	75fb      	strb	r3, [r7, #23]
    9064:	7dfb      	ldrb	r3, [r7, #23]
    9066:	2b07      	cmp	r3, #7
    9068:	d9c2      	bls.n	8ff0 <cc2400_repeater+0x1c4>
					for (j = 0; j < len; j++)
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
			}
		}
		TXLED_CLR;
    906a:	4b09      	ldr	r3, [pc, #36]	; (9090 <cc2400_repeater+0x264>)
    906c:	f44f 7280 	mov.w	r2, #256	; 0x100
    9070:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    9072:	2064      	movs	r0, #100	; 0x64
    9074:	f000 ff3a 	bl	9eec <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    9078:	bf00      	nop
    907a:	f000 ff2d 	bl	9ed8 <cc2400_status>
    907e:	4603      	mov	r3, r0
    9080:	f003 0304 	and.w	r3, r3, #4
    9084:	2b00      	cmp	r3, #0
    9086:	d1f8      	bne.n	907a <cc2400_repeater+0x24e>
	}
    9088:	e6f3      	b.n	8e72 <cc2400_repeater+0x46>
    908a:	bf00      	nop
    908c:	2009c038 	.word	0x2009c038
    9090:	2009c03c 	.word	0x2009c03c
    9094:	2009c058 	.word	0x2009c058
    9098:	001e8480 	.word	0x001e8480

0000909c <cc2400_txtest>:
#endif
}

void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
    909c:	b580      	push	{r7, lr}
    909e:	b084      	sub	sp, #16
    90a0:	af00      	add	r7, sp, #0
    90a2:	6078      	str	r0, [r7, #4]
    90a4:	6039      	str	r1, [r7, #0]
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    90a6:	687b      	ldr	r3, [r7, #4]
    90a8:	781b      	ldrb	r3, [r3, #0]
    90aa:	b2db      	uxtb	r3, r3
    90ac:	2b00      	cmp	r3, #0
    90ae:	d102      	bne.n	90b6 <cc2400_txtest+0x1a>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    90b0:	2329      	movs	r3, #41	; 0x29
    90b2:	81fb      	strh	r3, [r7, #14]
    90b4:	e008      	b.n	90c8 <cc2400_txtest+0x2c>
	} else if (*mod_ptr == MOD_BT_LOW_ENERGY) {
    90b6:	687b      	ldr	r3, [r7, #4]
    90b8:	781b      	ldrb	r3, [r3, #0]
    90ba:	b2db      	uxtb	r3, r3
    90bc:	2b01      	cmp	r3, #1
    90be:	d102      	bne.n	90c6 <cc2400_txtest+0x2a>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    90c0:	2340      	movs	r3, #64	; 0x40
    90c2:	81fb      	strh	r3, [r7, #14]
    90c4:	e000      	b.n	90c8 <cc2400_txtest+0x2c>
	} else {
		/* oops */
		return;
    90c6:	e037      	b.n	9138 <cc2400_txtest+0x9c>
	}
	cc2400_set(LMTST,   0x2b22);
    90c8:	2012      	movs	r0, #18
    90ca:	f642 3122 	movw	r1, #11042	; 0x2b22
    90ce:	f000 fe4b 	bl	9d68 <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    90d2:	2014      	movs	r0, #20
    90d4:	f243 314b 	movw	r1, #13131	; 0x334b
    90d8:	f000 fe46 	bl	9d68 <cc2400_set>
	cc2400_set(GRMDM,   0x0df1); // default value
    90dc:	2020      	movs	r0, #32
    90de:	f640 51f1 	movw	r1, #3569	; 0xdf1
    90e2:	f000 fe41 	bl	9d68 <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    90e6:	683b      	ldr	r3, [r7, #0]
    90e8:	881b      	ldrh	r3, [r3, #0]
    90ea:	b29b      	uxth	r3, r3
    90ec:	2002      	movs	r0, #2
    90ee:	4619      	mov	r1, r3
    90f0:	f000 fe3a 	bl	9d68 <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl); 
    90f4:	89fb      	ldrh	r3, [r7, #14]
    90f6:	2003      	movs	r0, #3
    90f8:	4619      	mov	r1, r3
    90fa:	f000 fe35 	bl	9d68 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    90fe:	bf00      	nop
    9100:	f000 feea 	bl	9ed8 <cc2400_status>
    9104:	4603      	mov	r3, r0
    9106:	f003 0340 	and.w	r3, r3, #64	; 0x40
    910a:	2b00      	cmp	r3, #0
    910c:	d0f8      	beq.n	9100 <cc2400_txtest+0x64>
	cc2400_strobe(SFSON);
    910e:	2061      	movs	r0, #97	; 0x61
    9110:	f000 feec 	bl	9eec <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    9114:	bf00      	nop
    9116:	f000 fedf 	bl	9ed8 <cc2400_status>
    911a:	4603      	mov	r3, r0
    911c:	f003 0304 	and.w	r3, r3, #4
    9120:	2b00      	cmp	r3, #0
    9122:	d0f8      	beq.n	9116 <cc2400_txtest+0x7a>
	TXLED_SET;
    9124:	4b06      	ldr	r3, [pc, #24]	; (9140 <cc2400_txtest+0xa4>)
    9126:	f44f 7280 	mov.w	r2, #256	; 0x100
    912a:	601a      	str	r2, [r3, #0]
	cc2400_strobe(STX);
    912c:	2063      	movs	r0, #99	; 0x63
    912e:	f000 fedd 	bl	9eec <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    9132:	4b04      	ldr	r3, [pc, #16]	; (9144 <cc2400_txtest+0xa8>)
    9134:	2280      	movs	r2, #128	; 0x80
    9136:	601a      	str	r2, [r3, #0]
#endif
#endif
}
    9138:	3710      	adds	r7, #16
    913a:	46bd      	mov	sp, r7
    913c:	bd80      	pop	{r7, pc}
    913e:	bf00      	nop
    9140:	2009c038 	.word	0x2009c038
    9144:	2009c058 	.word	0x2009c058

00009148 <ssp_start>:
typedef struct _ego_packet_t {
	u8 rxbuf[EGO_PACKET_LEN];
	u32 rxtime;
} ego_packet_t;

static void ssp_start(void) {
    9148:	b480      	push	{r7}
    914a:	af00      	add	r7, sp, #0
	// make sure the (active low) slave select signal is not active
	DIO_SSEL_SET;
    914c:	4b08      	ldr	r3, [pc, #32]	; (9170 <ssp_start+0x28>)
    914e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9152:	601a      	str	r2, [r3, #0]

	// enable SSP
	DIO_SSP_CR1 |= SSPCR1_SSE;
    9154:	4a07      	ldr	r2, [pc, #28]	; (9174 <ssp_start+0x2c>)
    9156:	4b07      	ldr	r3, [pc, #28]	; (9174 <ssp_start+0x2c>)
    9158:	681b      	ldr	r3, [r3, #0]
    915a:	f043 0302 	orr.w	r3, r3, #2
    915e:	6013      	str	r3, [r2, #0]

	// activate slave select pin
	DIO_SSEL_CLR;
    9160:	4b05      	ldr	r3, [pc, #20]	; (9178 <ssp_start+0x30>)
    9162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9166:	601a      	str	r2, [r3, #0]
}
    9168:	46bd      	mov	sp, r7
    916a:	f85d 7b04 	ldr.w	r7, [sp], #4
    916e:	4770      	bx	lr
    9170:	2009c098 	.word	0x2009c098
    9174:	40030004 	.word	0x40030004
    9178:	2009c09c 	.word	0x2009c09c

0000917c <ssp_stop>:

static void ssp_stop() {
    917c:	b480      	push	{r7}
    917e:	af00      	add	r7, sp, #0
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    9180:	4b06      	ldr	r3, [pc, #24]	; (919c <ssp_stop+0x20>)
    9182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9186:	601a      	str	r2, [r3, #0]

	// disable SSP
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    9188:	4a05      	ldr	r2, [pc, #20]	; (91a0 <ssp_stop+0x24>)
    918a:	4b05      	ldr	r3, [pc, #20]	; (91a0 <ssp_stop+0x24>)
    918c:	681b      	ldr	r3, [r3, #0]
    918e:	f023 0302 	bic.w	r3, r3, #2
    9192:	6013      	str	r3, [r2, #0]
}
    9194:	46bd      	mov	sp, r7
    9196:	f85d 7b04 	ldr.w	r7, [sp], #4
    919a:	4770      	bx	lr
    919c:	2009c098 	.word	0x2009c098
    91a0:	40030004 	.word	0x40030004

000091a4 <ego_init>:

static void ego_init(void) {
    91a4:	b580      	push	{r7, lr}
    91a6:	af00      	add	r7, sp, #0
	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    91a8:	4b03      	ldr	r3, [pc, #12]	; (91b8 <ego_init+0x14>)
    91aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    91ae:	601a      	str	r2, [r3, #0]

	dio_ssp_init();
    91b0:	f000 fd08 	bl	9bc4 <dio_ssp_init>
}
    91b4:	bd80      	pop	{r7, pc}
    91b6:	bf00      	nop
    91b8:	e000e100 	.word	0xe000e100

000091bc <ego_deinit>:

static void ego_deinit(void) {
    91bc:	b580      	push	{r7, lr}
    91be:	af00      	add	r7, sp, #0
	cc2400_strobe(SRFOFF);
    91c0:	2064      	movs	r0, #100	; 0x64
    91c2:	f000 fe93 	bl	9eec <cc2400_strobe>
	ssp_stop(); // TODO disable SSP
    91c6:	f7ff ffd9 	bl	917c <ssp_stop>
	ICER0 = ICER0_ICE_USB;
    91ca:	4b02      	ldr	r3, [pc, #8]	; (91d4 <ego_deinit+0x18>)
    91cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    91d0:	601a      	str	r2, [r3, #0]
}
    91d2:	bd80      	pop	{r7, pc}
    91d4:	e000e180 	.word	0xe000e180

000091d8 <rf_on>:

static void rf_on(void) {
    91d8:	b580      	push	{r7, lr}
    91da:	af00      	add	r7, sp, #0
	cc2400_set(MANAND,  0x7fff);
    91dc:	200d      	movs	r0, #13
    91de:	f647 71ff 	movw	r1, #32767	; 0x7fff
    91e2:	f000 fdc1 	bl	9d68 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    91e6:	2012      	movs	r0, #18
    91e8:	f642 3122 	movw	r1, #11042	; 0x2b22
    91ec:	f000 fdbc 	bl	9d68 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    91f0:	2014      	movs	r0, #20
    91f2:	f241 314b 	movw	r1, #4939	; 0x134b
    91f6:	f000 fdb7 	bl	9d68 <cc2400_set>
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    91fa:	2020      	movs	r0, #32
    91fc:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    9200:	f000 fdb2 	bl	9d68 <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    9204:	4b1e      	ldr	r3, [pc, #120]	; (9280 <rf_on+0xa8>)
    9206:	881b      	ldrh	r3, [r3, #0]
    9208:	b29b      	uxth	r3, r3
    920a:	3b01      	subs	r3, #1
    920c:	b29b      	uxth	r3, r3
    920e:	2002      	movs	r0, #2
    9210:	4619      	mov	r1, r3
    9212:	f000 fda9 	bl	9d68 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    9216:	2003      	movs	r0, #3
    9218:	2126      	movs	r1, #38	; 0x26
    921a:	f000 fda5 	bl	9d68 <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    921e:	2021      	movs	r0, #33	; 0x21
    9220:	2103      	movs	r1, #3
    9222:	f000 fda1 	bl	9d68 <cc2400_set>

    // 630f9ffe86
	cc2400_set(SYNCH,   0x630f);
    9226:	202d      	movs	r0, #45	; 0x2d
    9228:	f246 310f 	movw	r1, #25359	; 0x630f
    922c:	f000 fd9c 	bl	9d68 <cc2400_set>
	cc2400_set(SYNCL,   0x9ffe);
    9230:	202c      	movs	r0, #44	; 0x2c
    9232:	f649 71fe 	movw	r1, #40958	; 0x9ffe
    9236:	f000 fd97 	bl	9d68 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    923a:	bf00      	nop
    923c:	f000 fe4c 	bl	9ed8 <cc2400_status>
    9240:	4603      	mov	r3, r0
    9242:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9246:	2b00      	cmp	r3, #0
    9248:	d0f8      	beq.n	923c <rf_on+0x64>

	ssp_start();
    924a:	f7ff ff7d 	bl	9148 <ssp_start>

	cc2400_strobe(SFSON);
    924e:	2061      	movs	r0, #97	; 0x61
    9250:	f000 fe4c 	bl	9eec <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    9254:	bf00      	nop
    9256:	f000 fe3f 	bl	9ed8 <cc2400_status>
    925a:	4603      	mov	r3, r0
    925c:	f003 0304 	and.w	r3, r3, #4
    9260:	2b00      	cmp	r3, #0
    9262:	d0f8      	beq.n	9256 <rf_on+0x7e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    9264:	bf00      	nop
    9266:	200e      	movs	r0, #14
    9268:	f000 fd68 	bl	9d3c <cc2400_get>
    926c:	4603      	mov	r3, r0
    926e:	f003 031f 	and.w	r3, r3, #31
    9272:	2b0f      	cmp	r3, #15
    9274:	d1f7      	bne.n	9266 <rf_on+0x8e>

	cc2400_strobe(SRX);
    9276:	2062      	movs	r0, #98	; 0x62
    9278:	f000 fe38 	bl	9eec <cc2400_strobe>
}
    927c:	bd80      	pop	{r7, pc}
    927e:	bf00      	nop
    9280:	1000049c 	.word	0x1000049c

00009284 <do_rx>:

void do_rx(ego_packet_t *packet) {
    9284:	b480      	push	{r7}
    9286:	b085      	sub	sp, #20
    9288:	af00      	add	r7, sp, #0
    928a:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    928c:	2300      	movs	r3, #0
    928e:	60fb      	str	r3, [r7, #12]
    9290:	e011      	b.n	92b6 <do_rx+0x32>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
    9292:	bf00      	nop
    9294:	4b0c      	ldr	r3, [pc, #48]	; (92c8 <do_rx+0x44>)
    9296:	681b      	ldr	r3, [r3, #0]
    9298:	f003 0304 	and.w	r3, r3, #4
    929c:	2b00      	cmp	r3, #0
    929e:	d0f9      	beq.n	9294 <do_rx+0x10>
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
    92a0:	4b0a      	ldr	r3, [pc, #40]	; (92cc <do_rx+0x48>)
    92a2:	681b      	ldr	r3, [r3, #0]
    92a4:	b2d9      	uxtb	r1, r3
    92a6:	687a      	ldr	r2, [r7, #4]
    92a8:	68fb      	ldr	r3, [r7, #12]
    92aa:	4413      	add	r3, r2
    92ac:	460a      	mov	r2, r1
    92ae:	701a      	strb	r2, [r3, #0]
	cc2400_strobe(SRX);
}

void do_rx(ego_packet_t *packet) {
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    92b0:	68fb      	ldr	r3, [r7, #12]
    92b2:	3301      	adds	r3, #1
    92b4:	60fb      	str	r3, [r7, #12]
    92b6:	68fb      	ldr	r3, [r7, #12]
    92b8:	2b23      	cmp	r3, #35	; 0x23
    92ba:	ddea      	ble.n	9292 <do_rx+0xe>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}
    92bc:	3714      	adds	r7, #20
    92be:	46bd      	mov	sp, r7
    92c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    92c4:	4770      	bx	lr
    92c6:	bf00      	nop
    92c8:	4003000c 	.word	0x4003000c
    92cc:	40030008 	.word	0x40030008

000092d0 <sync_received>:

static inline int sync_received(void) {
    92d0:	b580      	push	{r7, lr}
    92d2:	af00      	add	r7, sp, #0
	return cc2400_status() & SYNC_RECEIVED;
    92d4:	f000 fe00 	bl	9ed8 <cc2400_status>
    92d8:	4603      	mov	r3, r0
    92da:	f003 0310 	and.w	r3, r3, #16
}
    92de:	4618      	mov	r0, r3
    92e0:	bd80      	pop	{r7, pc}
    92e2:	bf00      	nop

000092e4 <sleep_ms>:

// sleep for some milliseconds
static void sleep_ms(ego_fsm_state_t *state, u32 duration) {
    92e4:	b480      	push	{r7}
    92e6:	b083      	sub	sp, #12
    92e8:	af00      	add	r7, sp, #0
    92ea:	6078      	str	r0, [r7, #4]
    92ec:	6039      	str	r1, [r7, #0]
	state->sleep_start = CLK100NS;
    92ee:	4b0c      	ldr	r3, [pc, #48]	; (9320 <sleep_ms+0x3c>)
    92f0:	681b      	ldr	r3, [r3, #0]
    92f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
    92f6:	f640 4235 	movw	r2, #3125	; 0xc35
    92fa:	fb02 f203 	mul.w	r2, r2, r3
    92fe:	4b09      	ldr	r3, [pc, #36]	; (9324 <sleep_ms+0x40>)
    9300:	681b      	ldr	r3, [r3, #0]
    9302:	441a      	add	r2, r3
    9304:	687b      	ldr	r3, [r7, #4]
    9306:	609a      	str	r2, [r3, #8]
	state->sleep_duration = duration * 1000*10;
    9308:	683b      	ldr	r3, [r7, #0]
    930a:	f242 7210 	movw	r2, #10000	; 0x2710
    930e:	fb02 f203 	mul.w	r2, r2, r3
    9312:	687b      	ldr	r3, [r7, #4]
    9314:	60da      	str	r2, [r3, #12]
}
    9316:	370c      	adds	r7, #12
    9318:	46bd      	mov	sp, r7
    931a:	f85d 7b04 	ldr.w	r7, [sp], #4
    931e:	4770      	bx	lr
    9320:	10000be4 	.word	0x10000be4
    9324:	40004008 	.word	0x40004008

00009328 <sleep_ms_anchor>:

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
    9328:	b480      	push	{r7}
    932a:	b083      	sub	sp, #12
    932c:	af00      	add	r7, sp, #0
    932e:	6078      	str	r0, [r7, #4]
    9330:	6039      	str	r1, [r7, #0]
	state->sleep_start = state->anchor;
    9332:	687b      	ldr	r3, [r7, #4]
    9334:	699a      	ldr	r2, [r3, #24]
    9336:	687b      	ldr	r3, [r7, #4]
    9338:	609a      	str	r2, [r3, #8]
	state->sleep_duration = duration * 1000*10;
    933a:	683b      	ldr	r3, [r7, #0]
    933c:	f242 7210 	movw	r2, #10000	; 0x2710
    9340:	fb02 f203 	mul.w	r2, r2, r3
    9344:	687b      	ldr	r3, [r7, #4]
    9346:	60da      	str	r2, [r3, #12]
}
    9348:	370c      	adds	r7, #12
    934a:	46bd      	mov	sp, r7
    934c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9350:	4770      	bx	lr
    9352:	bf00      	nop

00009354 <sleep_elapsed>:

static inline int sleep_elapsed(ego_fsm_state_t *state) {
    9354:	b480      	push	{r7}
    9356:	b085      	sub	sp, #20
    9358:	af00      	add	r7, sp, #0
    935a:	6078      	str	r0, [r7, #4]
	u32 now = CLK100NS;
    935c:	4b13      	ldr	r3, [pc, #76]	; (93ac <sleep_elapsed+0x58>)
    935e:	681b      	ldr	r3, [r3, #0]
    9360:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9364:	f640 4235 	movw	r2, #3125	; 0xc35
    9368:	fb02 f203 	mul.w	r2, r2, r3
    936c:	4b10      	ldr	r3, [pc, #64]	; (93b0 <sleep_elapsed+0x5c>)
    936e:	681b      	ldr	r3, [r3, #0]
    9370:	4413      	add	r3, r2
    9372:	60fb      	str	r3, [r7, #12]
	if (now < state->sleep_start)
    9374:	687b      	ldr	r3, [r7, #4]
    9376:	689a      	ldr	r2, [r3, #8]
    9378:	68fb      	ldr	r3, [r7, #12]
    937a:	429a      	cmp	r2, r3
    937c:	d905      	bls.n	938a <sleep_elapsed+0x36>
		now += 3276800000;
    937e:	68fb      	ldr	r3, [r7, #12]
    9380:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    9384:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    9388:	60fb      	str	r3, [r7, #12]
	return (now - state->sleep_start) >= state->sleep_duration;
    938a:	687b      	ldr	r3, [r7, #4]
    938c:	689b      	ldr	r3, [r3, #8]
    938e:	68fa      	ldr	r2, [r7, #12]
    9390:	1ad2      	subs	r2, r2, r3
    9392:	687b      	ldr	r3, [r7, #4]
    9394:	68db      	ldr	r3, [r3, #12]
    9396:	429a      	cmp	r2, r3
    9398:	bf2c      	ite	cs
    939a:	2301      	movcs	r3, #1
    939c:	2300      	movcc	r3, #0
    939e:	b2db      	uxtb	r3, r3
}
    93a0:	4618      	mov	r0, r3
    93a2:	3714      	adds	r7, #20
    93a4:	46bd      	mov	sp, r7
    93a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    93aa:	4770      	bx	lr
    93ac:	10000be4 	.word	0x10000be4
    93b0:	40004008 	.word	0x40004008

000093b4 <nop_state>:

/////////////
// states

// do nothing
void nop_state(ego_fsm_state_t *state) {
    93b4:	b480      	push	{r7}
    93b6:	b083      	sub	sp, #12
    93b8:	af00      	add	r7, sp, #0
    93ba:	6078      	str	r0, [r7, #4]
}
    93bc:	370c      	adds	r7, #12
    93be:	46bd      	mov	sp, r7
    93c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    93c4:	4770      	bx	lr
    93c6:	bf00      	nop

000093c8 <init_state>:

// used in follow and jam mode, override the channel supplied by user
void init_state(ego_fsm_state_t *state) {
    93c8:	b480      	push	{r7}
    93ca:	b083      	sub	sp, #12
    93cc:	af00      	add	r7, sp, #0
    93ce:	6078      	str	r0, [r7, #4]
	state->channel_index = 0;
    93d0:	687b      	ldr	r3, [r7, #4]
    93d2:	2200      	movs	r2, #0
    93d4:	605a      	str	r2, [r3, #4]
	channel = channels[state->channel_index];
    93d6:	687b      	ldr	r3, [r7, #4]
    93d8:	685b      	ldr	r3, [r3, #4]
    93da:	4a06      	ldr	r2, [pc, #24]	; (93f4 <init_state+0x2c>)
    93dc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    93e0:	4b05      	ldr	r3, [pc, #20]	; (93f8 <init_state+0x30>)
    93e2:	801a      	strh	r2, [r3, #0]
	state->state = EGO_ST_START_RX;
    93e4:	687b      	ldr	r3, [r7, #4]
    93e6:	2201      	movs	r2, #1
    93e8:	701a      	strb	r2, [r3, #0]
}
    93ea:	370c      	adds	r7, #12
    93ec:	46bd      	mov	sp, r7
    93ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    93f2:	4770      	bx	lr
    93f4:	100008b0 	.word	0x100008b0
    93f8:	1000049c 	.word	0x1000049c

000093fc <start_rf_state>:

void start_rf_state(ego_fsm_state_t *state) {
    93fc:	b580      	push	{r7, lr}
    93fe:	b082      	sub	sp, #8
    9400:	af00      	add	r7, sp, #0
    9402:	6078      	str	r0, [r7, #4]
	rf_on();
    9404:	f7ff fee8 	bl	91d8 <rf_on>
	state->state = EGO_ST_CAP;
    9408:	687b      	ldr	r3, [r7, #4]
    940a:	2202      	movs	r2, #2
    940c:	701a      	strb	r2, [r3, #0]
}
    940e:	3708      	adds	r7, #8
    9410:	46bd      	mov	sp, r7
    9412:	bd80      	pop	{r7, pc}

00009414 <cap_state>:

void cap_state(ego_fsm_state_t *state) {
    9414:	b580      	push	{r7, lr}
    9416:	b08c      	sub	sp, #48	; 0x30
    9418:	af00      	add	r7, sp, #0
    941a:	6078      	str	r0, [r7, #4]
	ego_packet_t packet = {
    941c:	f107 0308 	add.w	r3, r7, #8
    9420:	2200      	movs	r2, #0
    9422:	601a      	str	r2, [r3, #0]
    9424:	3304      	adds	r3, #4
    9426:	2200      	movs	r2, #0
    9428:	601a      	str	r2, [r3, #0]
    942a:	3304      	adds	r3, #4
    942c:	2200      	movs	r2, #0
    942e:	601a      	str	r2, [r3, #0]
    9430:	3304      	adds	r3, #4
    9432:	2200      	movs	r2, #0
    9434:	601a      	str	r2, [r3, #0]
    9436:	3304      	adds	r3, #4
    9438:	2200      	movs	r2, #0
    943a:	601a      	str	r2, [r3, #0]
    943c:	3304      	adds	r3, #4
    943e:	2200      	movs	r2, #0
    9440:	601a      	str	r2, [r3, #0]
    9442:	3304      	adds	r3, #4
    9444:	2200      	movs	r2, #0
    9446:	601a      	str	r2, [r3, #0]
    9448:	3304      	adds	r3, #4
    944a:	2200      	movs	r2, #0
    944c:	601a      	str	r2, [r3, #0]
    944e:	3304      	adds	r3, #4
    9450:	2200      	movs	r2, #0
    9452:	601a      	str	r2, [r3, #0]
    9454:	3304      	adds	r3, #4
    9456:	2200      	movs	r2, #0
    9458:	601a      	str	r2, [r3, #0]
    945a:	3304      	adds	r3, #4
		.rxtime = CLK100NS,
    945c:	4b23      	ldr	r3, [pc, #140]	; (94ec <cap_state+0xd8>)
    945e:	681b      	ldr	r3, [r3, #0]
    9460:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9464:	f640 4235 	movw	r2, #3125	; 0xc35
    9468:	fb02 f203 	mul.w	r2, r2, r3
    946c:	4b20      	ldr	r3, [pc, #128]	; (94f0 <cap_state+0xdc>)
    946e:	681b      	ldr	r3, [r3, #0]
    9470:	4413      	add	r3, r2
	rf_on();
	state->state = EGO_ST_CAP;
}

void cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    9472:	62fb      	str	r3, [r7, #44]	; 0x2c
		.rxtime = CLK100NS,
	};

	if (sleep_elapsed(state)) {
    9474:	6878      	ldr	r0, [r7, #4]
    9476:	f7ff ff6d 	bl	9354 <sleep_elapsed>
    947a:	4603      	mov	r3, r0
    947c:	2b00      	cmp	r3, #0
    947e:	d006      	beq.n	948e <cap_state+0x7a>
		sleep_ms(state, 4);
    9480:	6878      	ldr	r0, [r7, #4]
    9482:	2104      	movs	r1, #4
    9484:	f7ff ff2e 	bl	92e4 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    9488:	687b      	ldr	r3, [r7, #4]
    948a:	2203      	movs	r2, #3
    948c:	701a      	strb	r2, [r3, #0]
	}

	if (sync_received()) {
    948e:	f7ff ff1f 	bl	92d0 <sync_received>
    9492:	4603      	mov	r3, r0
    9494:	2b00      	cmp	r3, #0
    9496:	d019      	beq.n	94cc <cap_state+0xb8>
		RXLED_SET;
    9498:	4b16      	ldr	r3, [pc, #88]	; (94f4 <cap_state+0xe0>)
    949a:	2210      	movs	r2, #16
    949c:	601a      	str	r2, [r3, #0]
		do_rx(&packet);
    949e:	f107 0308 	add.w	r3, r7, #8
    94a2:	4618      	mov	r0, r3
    94a4:	f7ff feee 	bl	9284 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    94a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    94aa:	f107 0208 	add.w	r2, r7, #8
    94ae:	2006      	movs	r0, #6
    94b0:	4611      	mov	r1, r2
    94b2:	461a      	mov	r2, r3
    94b4:	f7fb f90e 	bl	46d4 <enqueue_with_ts>
		RXLED_CLR;
    94b8:	4b0f      	ldr	r3, [pc, #60]	; (94f8 <cap_state+0xe4>)
    94ba:	2210      	movs	r2, #16
    94bc:	601a      	str	r2, [r3, #0]

		sleep_ms(state, 6);
    94be:	6878      	ldr	r0, [r7, #4]
    94c0:	2106      	movs	r1, #6
    94c2:	f7ff ff0f 	bl	92e4 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    94c6:	687b      	ldr	r3, [r7, #4]
    94c8:	2203      	movs	r2, #3
    94ca:	701a      	strb	r2, [r3, #0]
	}

	// kill RF on state change
	if (state->state != EGO_ST_CAP) {
    94cc:	687b      	ldr	r3, [r7, #4]
    94ce:	781b      	ldrb	r3, [r3, #0]
    94d0:	2b02      	cmp	r3, #2
    94d2:	d007      	beq.n	94e4 <cap_state+0xd0>
		cc2400_strobe(SRFOFF);
    94d4:	2064      	movs	r0, #100	; 0x64
    94d6:	f000 fd09 	bl	9eec <cc2400_strobe>
		ssp_stop();
    94da:	f7ff fe4f 	bl	917c <ssp_stop>
		state->timer_active = 1;
    94de:	687b      	ldr	r3, [r7, #4]
    94e0:	2201      	movs	r2, #1
    94e2:	611a      	str	r2, [r3, #16]
	}
}
    94e4:	3730      	adds	r7, #48	; 0x30
    94e6:	46bd      	mov	sp, r7
    94e8:	bd80      	pop	{r7, pc}
    94ea:	bf00      	nop
    94ec:	10000be4 	.word	0x10000be4
    94f0:	40004008 	.word	0x40004008
    94f4:	2009c038 	.word	0x2009c038
    94f8:	2009c03c 	.word	0x2009c03c

000094fc <sleep_state>:

void sleep_state(ego_fsm_state_t *state) {
    94fc:	b580      	push	{r7, lr}
    94fe:	b082      	sub	sp, #8
    9500:	af00      	add	r7, sp, #0
    9502:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    9504:	6878      	ldr	r0, [r7, #4]
    9506:	f7ff ff25 	bl	9354 <sleep_elapsed>
    950a:	4603      	mov	r3, r0
    950c:	2b00      	cmp	r3, #0
    950e:	d01e      	beq.n	954e <sleep_state+0x52>
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    9510:	687b      	ldr	r3, [r7, #4]
    9512:	685b      	ldr	r3, [r3, #4]
    9514:	1c5a      	adds	r2, r3, #1
    9516:	4b0f      	ldr	r3, [pc, #60]	; (9554 <sleep_state+0x58>)
    9518:	4013      	ands	r3, r2
    951a:	2b00      	cmp	r3, #0
    951c:	da03      	bge.n	9526 <sleep_state+0x2a>
    951e:	3b01      	subs	r3, #1
    9520:	f063 0303 	orn	r3, r3, #3
    9524:	3301      	adds	r3, #1
    9526:	461a      	mov	r2, r3
    9528:	687b      	ldr	r3, [r7, #4]
    952a:	605a      	str	r2, [r3, #4]
		channel = channels[state->channel_index];
    952c:	687b      	ldr	r3, [r7, #4]
    952e:	685b      	ldr	r3, [r3, #4]
    9530:	4a09      	ldr	r2, [pc, #36]	; (9558 <sleep_state+0x5c>)
    9532:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    9536:	4b09      	ldr	r3, [pc, #36]	; (955c <sleep_state+0x60>)
    9538:	801a      	strh	r2, [r3, #0]

		// set 7 ms timeout for RX
		sleep_ms(state, 7);
    953a:	6878      	ldr	r0, [r7, #4]
    953c:	2107      	movs	r1, #7
    953e:	f7ff fed1 	bl	92e4 <sleep_ms>
		state->timer_active = 1;
    9542:	687b      	ldr	r3, [r7, #4]
    9544:	2201      	movs	r2, #1
    9546:	611a      	str	r2, [r3, #16]

		state->state = EGO_ST_START_RX;
    9548:	687b      	ldr	r3, [r7, #4]
    954a:	2201      	movs	r2, #1
    954c:	701a      	strb	r2, [r3, #0]
	}
}
    954e:	3708      	adds	r7, #8
    9550:	46bd      	mov	sp, r7
    9552:	bd80      	pop	{r7, pc}
    9554:	80000003 	.word	0x80000003
    9558:	100008b0 	.word	0x100008b0
    955c:	1000049c 	.word	0x1000049c

00009560 <continuous_init_state>:

// continuous cap states (reuses START_RX state)
void continuous_init_state(ego_fsm_state_t *state) {
    9560:	b480      	push	{r7}
    9562:	b083      	sub	sp, #12
    9564:	af00      	add	r7, sp, #0
    9566:	6078      	str	r0, [r7, #4]
	state->state = EGO_ST_START_RX;
    9568:	687b      	ldr	r3, [r7, #4]
    956a:	2201      	movs	r2, #1
    956c:	701a      	strb	r2, [r3, #0]
}
    956e:	370c      	adds	r7, #12
    9570:	46bd      	mov	sp, r7
    9572:	f85d 7b04 	ldr.w	r7, [sp], #4
    9576:	4770      	bx	lr

00009578 <continuous_cap_state>:

void continuous_cap_state(ego_fsm_state_t *state) {
    9578:	b580      	push	{r7, lr}
    957a:	b08c      	sub	sp, #48	; 0x30
    957c:	af00      	add	r7, sp, #0
    957e:	6078      	str	r0, [r7, #4]
	ego_packet_t packet = {
    9580:	f107 0308 	add.w	r3, r7, #8
    9584:	2200      	movs	r2, #0
    9586:	601a      	str	r2, [r3, #0]
    9588:	3304      	adds	r3, #4
    958a:	2200      	movs	r2, #0
    958c:	601a      	str	r2, [r3, #0]
    958e:	3304      	adds	r3, #4
    9590:	2200      	movs	r2, #0
    9592:	601a      	str	r2, [r3, #0]
    9594:	3304      	adds	r3, #4
    9596:	2200      	movs	r2, #0
    9598:	601a      	str	r2, [r3, #0]
    959a:	3304      	adds	r3, #4
    959c:	2200      	movs	r2, #0
    959e:	601a      	str	r2, [r3, #0]
    95a0:	3304      	adds	r3, #4
    95a2:	2200      	movs	r2, #0
    95a4:	601a      	str	r2, [r3, #0]
    95a6:	3304      	adds	r3, #4
    95a8:	2200      	movs	r2, #0
    95aa:	601a      	str	r2, [r3, #0]
    95ac:	3304      	adds	r3, #4
    95ae:	2200      	movs	r2, #0
    95b0:	601a      	str	r2, [r3, #0]
    95b2:	3304      	adds	r3, #4
    95b4:	2200      	movs	r2, #0
    95b6:	601a      	str	r2, [r3, #0]
    95b8:	3304      	adds	r3, #4
    95ba:	2200      	movs	r2, #0
    95bc:	601a      	str	r2, [r3, #0]
    95be:	3304      	adds	r3, #4
		.rxtime = CLK100NS,
    95c0:	4b1e      	ldr	r3, [pc, #120]	; (963c <continuous_cap_state+0xc4>)
    95c2:	681b      	ldr	r3, [r3, #0]
    95c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    95c8:	f640 4235 	movw	r2, #3125	; 0xc35
    95cc:	fb02 f203 	mul.w	r2, r2, r3
    95d0:	4b1b      	ldr	r3, [pc, #108]	; (9640 <continuous_cap_state+0xc8>)
    95d2:	681b      	ldr	r3, [r3, #0]
    95d4:	4413      	add	r3, r2
void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
}

void continuous_cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    95d6:	62fb      	str	r3, [r7, #44]	; 0x2c
		.rxtime = CLK100NS,
	};

	if (sync_received()) {
    95d8:	f7ff fe7a 	bl	92d0 <sync_received>
    95dc:	4603      	mov	r3, r0
    95de:	2b00      	cmp	r3, #0
    95e0:	d029      	beq.n	9636 <continuous_cap_state+0xbe>
		RXLED_SET;
    95e2:	4b18      	ldr	r3, [pc, #96]	; (9644 <continuous_cap_state+0xcc>)
    95e4:	2210      	movs	r2, #16
    95e6:	601a      	str	r2, [r3, #0]
		do_rx(&packet);
    95e8:	f107 0308 	add.w	r3, r7, #8
    95ec:	4618      	mov	r0, r3
    95ee:	f7ff fe49 	bl	9284 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    95f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    95f4:	f107 0208 	add.w	r2, r7, #8
    95f8:	2006      	movs	r0, #6
    95fa:	4611      	mov	r1, r2
    95fc:	461a      	mov	r2, r3
    95fe:	f7fb f869 	bl	46d4 <enqueue_with_ts>
		RXLED_CLR;
    9602:	4b11      	ldr	r3, [pc, #68]	; (9648 <continuous_cap_state+0xd0>)
    9604:	2210      	movs	r2, #16
    9606:	601a      	str	r2, [r3, #0]

		// restart cap with radio warm
		cc2400_strobe(SFSON);
    9608:	2061      	movs	r0, #97	; 0x61
    960a:	f000 fc6f 	bl	9eec <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    960e:	bf00      	nop
    9610:	f000 fc62 	bl	9ed8 <cc2400_status>
    9614:	4603      	mov	r3, r0
    9616:	f003 0304 	and.w	r3, r3, #4
    961a:	2b00      	cmp	r3, #0
    961c:	d0f8      	beq.n	9610 <continuous_cap_state+0x98>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    961e:	bf00      	nop
    9620:	200e      	movs	r0, #14
    9622:	f000 fb8b 	bl	9d3c <cc2400_get>
    9626:	4603      	mov	r3, r0
    9628:	f003 031f 	and.w	r3, r3, #31
    962c:	2b0f      	cmp	r3, #15
    962e:	d1f7      	bne.n	9620 <continuous_cap_state+0xa8>
		cc2400_strobe(SRX);
    9630:	2062      	movs	r0, #98	; 0x62
    9632:	f000 fc5b 	bl	9eec <cc2400_strobe>
	}
}
    9636:	3730      	adds	r7, #48	; 0x30
    9638:	46bd      	mov	sp, r7
    963a:	bd80      	pop	{r7, pc}
    963c:	10000be4 	.word	0x10000be4
    9640:	40004008 	.word	0x40004008
    9644:	2009c038 	.word	0x2009c038
    9648:	2009c03c 	.word	0x2009c03c

0000964c <jam_cap_state>:

// jammer states
void jam_cap_state(ego_fsm_state_t *state) {
    964c:	b580      	push	{r7, lr}
    964e:	b082      	sub	sp, #8
    9650:	af00      	add	r7, sp, #0
    9652:	6078      	str	r0, [r7, #4]
	if (sync_received()) {
    9654:	f7ff fe3c 	bl	92d0 <sync_received>
    9658:	4603      	mov	r3, r0
    965a:	2b00      	cmp	r3, #0
    965c:	d012      	beq.n	9684 <jam_cap_state+0x38>
		state->state = EGO_ST_START_JAMMING;
    965e:	687b      	ldr	r3, [r7, #4]
    9660:	2204      	movs	r2, #4
    9662:	701a      	strb	r2, [r3, #0]
		state->packet_observed = 1;
    9664:	687b      	ldr	r3, [r7, #4]
    9666:	2201      	movs	r2, #1
    9668:	615a      	str	r2, [r3, #20]
		state->anchor = CLK100NS;
    966a:	4b16      	ldr	r3, [pc, #88]	; (96c4 <jam_cap_state+0x78>)
    966c:	681b      	ldr	r3, [r3, #0]
    966e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9672:	f640 4235 	movw	r2, #3125	; 0xc35
    9676:	fb02 f203 	mul.w	r2, r2, r3
    967a:	4b13      	ldr	r3, [pc, #76]	; (96c8 <jam_cap_state+0x7c>)
    967c:	681b      	ldr	r3, [r3, #0]
    967e:	441a      	add	r2, r3
    9680:	687b      	ldr	r3, [r7, #4]
    9682:	619a      	str	r2, [r3, #24]
	}
	if (state->timer_active && sleep_elapsed(state)) {
    9684:	687b      	ldr	r3, [r7, #4]
    9686:	691b      	ldr	r3, [r3, #16]
    9688:	2b00      	cmp	r3, #0
    968a:	d00f      	beq.n	96ac <jam_cap_state+0x60>
    968c:	6878      	ldr	r0, [r7, #4]
    968e:	f7ff fe61 	bl	9354 <sleep_elapsed>
    9692:	4603      	mov	r3, r0
    9694:	2b00      	cmp	r3, #0
    9696:	d009      	beq.n	96ac <jam_cap_state+0x60>
		state->state = EGO_ST_START_JAMMING;
    9698:	687b      	ldr	r3, [r7, #4]
    969a:	2204      	movs	r2, #4
    969c:	701a      	strb	r2, [r3, #0]
		state->packet_observed = 0;
    969e:	687b      	ldr	r3, [r7, #4]
    96a0:	2200      	movs	r2, #0
    96a2:	615a      	str	r2, [r3, #20]
		sleep_ms(state, 11); // 11 ms hop interval
    96a4:	6878      	ldr	r0, [r7, #4]
    96a6:	210b      	movs	r1, #11
    96a8:	f7ff fe1c 	bl	92e4 <sleep_ms>
	}

	// state changed, kill radio
	if (state->state != EGO_ST_CAP) {
    96ac:	687b      	ldr	r3, [r7, #4]
    96ae:	781b      	ldrb	r3, [r3, #0]
    96b0:	2b02      	cmp	r3, #2
    96b2:	d004      	beq.n	96be <jam_cap_state+0x72>
		cc2400_strobe(SRFOFF);
    96b4:	2064      	movs	r0, #100	; 0x64
    96b6:	f000 fc19 	bl	9eec <cc2400_strobe>
		ssp_stop();
    96ba:	f7ff fd5f 	bl	917c <ssp_stop>
	}
}
    96be:	3708      	adds	r7, #8
    96c0:	46bd      	mov	sp, r7
    96c2:	bd80      	pop	{r7, pc}
    96c4:	10000be4 	.word	0x10000be4
    96c8:	40004008 	.word	0x40004008

000096cc <start_jamming_state>:

void start_jamming_state(ego_fsm_state_t *state) {
    96cc:	b580      	push	{r7, lr}
    96ce:	b082      	sub	sp, #8
    96d0:	af00      	add	r7, sp, #0
    96d2:	6078      	str	r0, [r7, #4]
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    96d4:	200d      	movs	r0, #13
    96d6:	f647 71ff 	movw	r1, #32767	; 0x7fff
    96da:	f000 fb45 	bl	9d68 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    96de:	2012      	movs	r0, #18
    96e0:	f642 3122 	movw	r1, #11042	; 0x2b22
    96e4:	f000 fb40 	bl	9d68 <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    96e8:	2014      	movs	r0, #20
    96ea:	f243 314b 	movw	r1, #13131	; 0x334b
    96ee:	f000 fb3b 	bl	9d68 <cc2400_set>
	// cc2400_set(GRMDM,   0x04e0); // un-buffered mode, 2FSK
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    96f2:	2020      	movs	r0, #32
    96f4:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    96f8:	f000 fb36 	bl	9d68 <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel); // no IF for TX
    96fc:	4b21      	ldr	r3, [pc, #132]	; (9784 <start_jamming_state+0xb8>)
    96fe:	881b      	ldrh	r3, [r3, #0]
    9700:	b29b      	uxth	r3, r3
    9702:	2002      	movs	r0, #2
    9704:	4619      	mov	r1, r3
    9706:	f000 fb2f 	bl	9d68 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    970a:	2003      	movs	r0, #3
    970c:	2126      	movs	r1, #38	; 0x26
    970e:	f000 fb2b 	bl	9d68 <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    9712:	2021      	movs	r0, #33	; 0x21
    9714:	2103      	movs	r1, #3
    9716:	f000 fb27 	bl	9d68 <cc2400_set>
	cc2400_set(FREND, 0xf);
    971a:	2005      	movs	r0, #5
    971c:	210f      	movs	r1, #15
    971e:	f000 fb23 	bl	9d68 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    9722:	bf00      	nop
    9724:	f000 fbd8 	bl	9ed8 <cc2400_status>
    9728:	4603      	mov	r3, r0
    972a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    972e:	2b00      	cmp	r3, #0
    9730:	d0f8      	beq.n	9724 <start_jamming_state+0x58>

	cc2400_strobe(SFSON);
    9732:	2061      	movs	r0, #97	; 0x61
    9734:	f000 fbda 	bl	9eec <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    9738:	bf00      	nop
    973a:	f000 fbcd 	bl	9ed8 <cc2400_status>
    973e:	4603      	mov	r3, r0
    9740:	f003 0304 	and.w	r3, r3, #4
    9744:	2b00      	cmp	r3, #0
    9746:	d0f8      	beq.n	973a <start_jamming_state+0x6e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    9748:	bf00      	nop
    974a:	200e      	movs	r0, #14
    974c:	f000 faf6 	bl	9d3c <cc2400_get>
    9750:	4603      	mov	r3, r0
    9752:	f003 031f 	and.w	r3, r3, #31
    9756:	2b0f      	cmp	r3, #15
    9758:	d1f7      	bne.n	974a <start_jamming_state+0x7e>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    975a:	4b0b      	ldr	r3, [pc, #44]	; (9788 <start_jamming_state+0xbc>)
    975c:	2280      	movs	r2, #128	; 0x80
    975e:	601a      	str	r2, [r3, #0]
#endif

	cc2400_strobe(STX);
    9760:	2063      	movs	r0, #99	; 0x63
    9762:	f000 fbc3 	bl	9eec <cc2400_strobe>
	TXLED_SET;
    9766:	4b09      	ldr	r3, [pc, #36]	; (978c <start_jamming_state+0xc0>)
    9768:	f44f 7280 	mov.w	r2, #256	; 0x100
    976c:	601a      	str	r2, [r3, #0]
#endif

	state->state = EGO_ST_JAMMING;
    976e:	687b      	ldr	r3, [r7, #4]
    9770:	2205      	movs	r2, #5
    9772:	701a      	strb	r2, [r3, #0]
	sleep_ms_anchor(state, 2);
    9774:	6878      	ldr	r0, [r7, #4]
    9776:	2102      	movs	r1, #2
    9778:	f7ff fdd6 	bl	9328 <sleep_ms_anchor>
}
    977c:	3708      	adds	r7, #8
    977e:	46bd      	mov	sp, r7
    9780:	bd80      	pop	{r7, pc}
    9782:	bf00      	nop
    9784:	1000049c 	.word	0x1000049c
    9788:	2009c058 	.word	0x2009c058
    978c:	2009c038 	.word	0x2009c038

00009790 <jamming_state>:

void jamming_state(ego_fsm_state_t *state) {
    9790:	b580      	push	{r7, lr}
    9792:	b082      	sub	sp, #8
    9794:	af00      	add	r7, sp, #0
    9796:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    9798:	6878      	ldr	r0, [r7, #4]
    979a:	f7ff fddb 	bl	9354 <sleep_elapsed>
    979e:	4603      	mov	r3, r0
    97a0:	2b00      	cmp	r3, #0
    97a2:	d025      	beq.n	97f0 <jamming_state+0x60>
		cc2400_strobe(SRFOFF);
    97a4:	2064      	movs	r0, #100	; 0x64
    97a6:	f000 fba1 	bl	9eec <cc2400_strobe>
#ifdef UBERTOOTH_ONE
		PAEN_CLR;
    97aa:	4b13      	ldr	r3, [pc, #76]	; (97f8 <jamming_state+0x68>)
    97ac:	2280      	movs	r2, #128	; 0x80
    97ae:	601a      	str	r2, [r3, #0]
#endif
		TXLED_CLR;
    97b0:	4b12      	ldr	r3, [pc, #72]	; (97fc <jamming_state+0x6c>)
    97b2:	f44f 7280 	mov.w	r2, #256	; 0x100
    97b6:	601a      	str	r2, [r3, #0]

		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    97b8:	687b      	ldr	r3, [r7, #4]
    97ba:	685b      	ldr	r3, [r3, #4]
    97bc:	1c5a      	adds	r2, r3, #1
    97be:	4b10      	ldr	r3, [pc, #64]	; (9800 <jamming_state+0x70>)
    97c0:	4013      	ands	r3, r2
    97c2:	2b00      	cmp	r3, #0
    97c4:	da03      	bge.n	97ce <jamming_state+0x3e>
    97c6:	3b01      	subs	r3, #1
    97c8:	f063 0303 	orn	r3, r3, #3
    97cc:	3301      	adds	r3, #1
    97ce:	461a      	mov	r2, r3
    97d0:	687b      	ldr	r3, [r7, #4]
    97d2:	605a      	str	r2, [r3, #4]
		channel = channels[state->channel_index];
    97d4:	687b      	ldr	r3, [r7, #4]
    97d6:	685b      	ldr	r3, [r3, #4]
    97d8:	4a0a      	ldr	r2, [pc, #40]	; (9804 <jamming_state+0x74>)
    97da:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    97de:	4b0a      	ldr	r3, [pc, #40]	; (9808 <jamming_state+0x78>)
    97e0:	801a      	strh	r2, [r3, #0]

		state->state = EGO_ST_SLEEP;
    97e2:	687b      	ldr	r3, [r7, #4]
    97e4:	2203      	movs	r2, #3
    97e6:	701a      	strb	r2, [r3, #0]
		sleep_ms_anchor(state, 6);
    97e8:	6878      	ldr	r0, [r7, #4]
    97ea:	2106      	movs	r1, #6
    97ec:	f7ff fd9c 	bl	9328 <sleep_ms_anchor>
	}
}
    97f0:	3708      	adds	r7, #8
    97f2:	46bd      	mov	sp, r7
    97f4:	bd80      	pop	{r7, pc}
    97f6:	bf00      	nop
    97f8:	2009c05c 	.word	0x2009c05c
    97fc:	2009c03c 	.word	0x2009c03c
    9800:	80000003 	.word	0x80000003
    9804:	100008b0 	.word	0x100008b0
    9808:	1000049c 	.word	0x1000049c

0000980c <jam_sleep_state>:

void jam_sleep_state(ego_fsm_state_t *state) {
    980c:	b580      	push	{r7, lr}
    980e:	b082      	sub	sp, #8
    9810:	af00      	add	r7, sp, #0
    9812:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    9814:	6878      	ldr	r0, [r7, #4]
    9816:	f7ff fd9d 	bl	9354 <sleep_elapsed>
    981a:	4603      	mov	r3, r0
    981c:	2b00      	cmp	r3, #0
    981e:	d009      	beq.n	9834 <jam_sleep_state+0x28>
		state->state = EGO_ST_START_RX;
    9820:	687b      	ldr	r3, [r7, #4]
    9822:	2201      	movs	r2, #1
    9824:	701a      	strb	r2, [r3, #0]
		state->timer_active = 1;
    9826:	687b      	ldr	r3, [r7, #4]
    9828:	2201      	movs	r2, #1
    982a:	611a      	str	r2, [r3, #16]
		sleep_ms_anchor(state, 11);
    982c:	6878      	ldr	r0, [r7, #4]
    982e:	210b      	movs	r1, #11
    9830:	f7ff fd7a 	bl	9328 <sleep_ms_anchor>
	}
}
    9834:	3708      	adds	r7, #8
    9836:	46bd      	mov	sp, r7
    9838:	bd80      	pop	{r7, pc}
    983a:	bf00      	nop

0000983c <ego_main>:

void ego_main(ego_mode_t mode) {
    983c:	b5b0      	push	{r4, r5, r7, lr}
    983e:	b09e      	sub	sp, #120	; 0x78
    9840:	af00      	add	r7, sp, #0
    9842:	4603      	mov	r3, r0
    9844:	71fb      	strb	r3, [r7, #7]
	ego_st_handler *handler; // set depending on mode
	ego_fsm_state_t state = {
    9846:	f107 0358 	add.w	r3, r7, #88	; 0x58
    984a:	2200      	movs	r2, #0
    984c:	601a      	str	r2, [r3, #0]
    984e:	3304      	adds	r3, #4
    9850:	2200      	movs	r2, #0
    9852:	601a      	str	r2, [r3, #0]
    9854:	3304      	adds	r3, #4
    9856:	2200      	movs	r2, #0
    9858:	601a      	str	r2, [r3, #0]
    985a:	3304      	adds	r3, #4
    985c:	2200      	movs	r2, #0
    985e:	601a      	str	r2, [r3, #0]
    9860:	3304      	adds	r3, #4
    9862:	2200      	movs	r2, #0
    9864:	601a      	str	r2, [r3, #0]
    9866:	3304      	adds	r3, #4
    9868:	2200      	movs	r2, #0
    986a:	601a      	str	r2, [r3, #0]
    986c:	3304      	adds	r3, #4
    986e:	2200      	movs	r2, #0
    9870:	601a      	str	r2, [r3, #0]
    9872:	3304      	adds	r3, #4
		.channel_index = 0,
		.timer_active = 0,
	};

	// hopping connection following
	ego_st_handler follow_handler[] = {
    9874:	4b26      	ldr	r3, [pc, #152]	; (9910 <ego_main+0xd4>)
    9876:	f107 043c 	add.w	r4, r7, #60	; 0x3c
    987a:	461d      	mov	r5, r3
    987c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    987e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9880:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    9884:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		nop_state,
		nop_state,
	};

	// continuous rx on a single channel
	ego_st_handler continuous_rx_handler[] = {
    9888:	4b22      	ldr	r3, [pc, #136]	; (9914 <ego_main+0xd8>)
    988a:	f107 0424 	add.w	r4, r7, #36	; 0x24
    988e:	461d      	mov	r5, r3
    9890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9894:	e895 0003 	ldmia.w	r5, {r0, r1}
    9898:	e884 0003 	stmia.w	r4, {r0, r1}
		nop_state,
		nop_state,
	};

	// jamming
	ego_st_handler jam_handler[] = {
    989c:	4b1e      	ldr	r3, [pc, #120]	; (9918 <ego_main+0xdc>)
    989e:	f107 040c 	add.w	r4, r7, #12
    98a2:	461d      	mov	r5, r3
    98a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    98a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    98a8:	e895 0003 	ldmia.w	r5, {r0, r1}
    98ac:	e884 0003 	stmia.w	r4, {r0, r1}
		jam_sleep_state,
		start_jamming_state,
		jamming_state,
	};

	switch (mode) {
    98b0:	79fb      	ldrb	r3, [r7, #7]
    98b2:	2b01      	cmp	r3, #1
    98b4:	d007      	beq.n	98c6 <ego_main+0x8a>
    98b6:	2b02      	cmp	r3, #2
    98b8:	d009      	beq.n	98ce <ego_main+0x92>
    98ba:	2b00      	cmp	r3, #0
    98bc:	d10b      	bne.n	98d6 <ego_main+0x9a>
		case EGO_FOLLOW:
			handler = follow_handler;
    98be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    98c2:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    98c4:	e00b      	b.n	98de <ego_main+0xa2>
		case EGO_CONTINUOUS_RX:
			handler = continuous_rx_handler;
    98c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
    98ca:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    98cc:	e007      	b.n	98de <ego_main+0xa2>
#ifdef TX_ENABLE
		case EGO_JAM:
			handler = jam_handler;
    98ce:	f107 030c 	add.w	r3, r7, #12
    98d2:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    98d4:	e003      	b.n	98de <ego_main+0xa2>
#endif
		default: // should never happen
			requested_mode = MODE_IDLE;
    98d6:	4b11      	ldr	r3, [pc, #68]	; (991c <ego_main+0xe0>)
    98d8:	2200      	movs	r2, #0
    98da:	701a      	strb	r2, [r3, #0]
    98dc:	e015      	b.n	990a <ego_main+0xce>
			return;
	}

	ego_init();
    98de:	f7ff fc61 	bl	91a4 <ego_init>

	while (1) {
		if (requested_mode != MODE_EGO)
    98e2:	4b0e      	ldr	r3, [pc, #56]	; (991c <ego_main+0xe0>)
    98e4:	781b      	ldrb	r3, [r3, #0]
    98e6:	b2db      	uxtb	r3, r3
    98e8:	2b0d      	cmp	r3, #13
    98ea:	d003      	beq.n	98f4 <ego_main+0xb8>
			break;
    98ec:	bf00      	nop
		handler[state.state](&state);
	}

	ego_deinit();
    98ee:	f7ff fc65 	bl	91bc <ego_deinit>
    98f2:	e00a      	b.n	990a <ego_main+0xce>
	ego_init();

	while (1) {
		if (requested_mode != MODE_EGO)
			break;
		handler[state.state](&state);
    98f4:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
    98f8:	009b      	lsls	r3, r3, #2
    98fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    98fc:	4413      	add	r3, r2
    98fe:	681b      	ldr	r3, [r3, #0]
    9900:	f107 0258 	add.w	r2, r7, #88	; 0x58
    9904:	4610      	mov	r0, r2
    9906:	4798      	blx	r3
	}
    9908:	e7eb      	b.n	98e2 <ego_main+0xa6>

	ego_deinit();
}
    990a:	3778      	adds	r7, #120	; 0x78
    990c:	46bd      	mov	sp, r7
    990e:	bdb0      	pop	{r4, r5, r7, pc}
    9910:	0000bc88 	.word	0x0000bc88
    9914:	0000bca4 	.word	0x0000bca4
    9918:	0000bcbc 	.word	0x0000bcbc
    991c:	10000a3f 	.word	0x10000a3f

00009920 <USB_IRQHandler>:
	
	return fifo_get(&rxfifo, &c) ? c : EOF;
}

void USB_IRQHandler()
{
    9920:	b580      	push	{r7, lr}
    9922:	af00      	add	r7, sp, #0
	USBHwISR();
    9924:	f000 ffb6 	bl	a894 <USBHwISR>
}
    9928:	bd80      	pop	{r7, pc}
    992a:	bf00      	nop

0000992c <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    992c:	b580      	push	{r7, lr}
    992e:	b082      	sub	sp, #8
    9930:	af00      	add	r7, sp, #0
    unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
    9932:	4b12      	ldr	r3, [pc, #72]	; (997c <Reset_Handler+0x50>)
    9934:	607b      	str	r3, [r7, #4]
	for(dest = &_data; dest < &_edata; )
    9936:	4b12      	ldr	r3, [pc, #72]	; (9980 <Reset_Handler+0x54>)
    9938:	603b      	str	r3, [r7, #0]
    993a:	e007      	b.n	994c <Reset_Handler+0x20>
	{
		*dest++ = *src++;
    993c:	683b      	ldr	r3, [r7, #0]
    993e:	1d1a      	adds	r2, r3, #4
    9940:	603a      	str	r2, [r7, #0]
    9942:	687a      	ldr	r2, [r7, #4]
    9944:	1d11      	adds	r1, r2, #4
    9946:	6079      	str	r1, [r7, #4]
    9948:	6812      	ldr	r2, [r2, #0]
    994a:	601a      	str	r2, [r3, #0]
{
    unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    994c:	683b      	ldr	r3, [r7, #0]
    994e:	4a0d      	ldr	r2, [pc, #52]	; (9984 <Reset_Handler+0x58>)
    9950:	4293      	cmp	r3, r2
    9952:	d3f3      	bcc.n	993c <Reset_Handler+0x10>
	{
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
    9954:	4b0c      	ldr	r3, [pc, #48]	; (9988 <Reset_Handler+0x5c>)
    9956:	607b      	str	r3, [r7, #4]
	while (src < &_ebss)
    9958:	e004      	b.n	9964 <Reset_Handler+0x38>
	{
		*src++ = 0;
    995a:	687b      	ldr	r3, [r7, #4]
    995c:	1d1a      	adds	r2, r3, #4
    995e:	607a      	str	r2, [r7, #4]
    9960:	2200      	movs	r2, #0
    9962:	601a      	str	r2, [r3, #0]
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
    9964:	687b      	ldr	r3, [r7, #4]
    9966:	4a09      	ldr	r2, [pc, #36]	; (998c <Reset_Handler+0x60>)
    9968:	4293      	cmp	r3, r2
    996a:	d3f6      	bcc.n	995a <Reset_Handler+0x2e>
	{
		*src++ = 0;
	}

    __libc_init_array();
    996c:	f7fa fc1c 	bl	41a8 <__libc_init_array>
    
    // Set the vector table location.
    SCB_VTOR = &_interrupt_vector_table;
    9970:	4b07      	ldr	r3, [pc, #28]	; (9990 <Reset_Handler+0x64>)
    9972:	4a08      	ldr	r2, [pc, #32]	; (9994 <Reset_Handler+0x68>)
    9974:	601a      	str	r2, [r3, #0]
    
	main();
    9976:	f7fe fa6d 	bl	7e54 <main>

	// In case main() fails, have something to breakpoint
	while (1) {;}
    997a:	e7fe      	b.n	997a <Reset_Handler+0x4e>
    997c:	0000bd20 	.word	0x0000bd20
    9980:	10000020 	.word	0x10000020
    9984:	1000095e 	.word	0x1000095e
    9988:	10000960 	.word	0x10000960
    998c:	10003278 	.word	0x10003278
    9990:	e000ed08 	.word	0xe000ed08
    9994:	00004000 	.word	0x00004000

00009998 <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    9998:	b480      	push	{r7}
    999a:	af00      	add	r7, sp, #0
    999c:	e7fe      	b.n	999c <ADC_IRQHandler+0x4>
    999e:	bf00      	nop

000099a0 <wait>:
 */

#include "ubertooth.h"
/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
    99a0:	b580      	push	{r7, lr}
    99a2:	b082      	sub	sp, #8
    99a4:	af00      	add	r7, sp, #0
    99a6:	4603      	mov	r3, r0
    99a8:	71fb      	strb	r3, [r7, #7]
	wait_us(seconds * 1000000);
    99aa:	79fb      	ldrb	r3, [r7, #7]
    99ac:	4a04      	ldr	r2, [pc, #16]	; (99c0 <wait+0x20>)
    99ae:	fb02 f303 	mul.w	r3, r2, r3
    99b2:	4618      	mov	r0, r3
    99b4:	f000 f818 	bl	99e8 <wait_us>
}
    99b8:	3708      	adds	r7, #8
    99ba:	46bd      	mov	sp, r7
    99bc:	bd80      	pop	{r7, pc}
    99be:	bf00      	nop
    99c0:	000f4240 	.word	0x000f4240

000099c4 <rbit>:
{
	wait_us(ms * 1000);
}

/* efficiently reverse the bits of a 32-bit word */
u32 rbit(u32 value) {
    99c4:	b480      	push	{r7}
    99c6:	b085      	sub	sp, #20
    99c8:	af00      	add	r7, sp, #0
    99ca:	6078      	str	r0, [r7, #4]
  u32 result = 0;
    99cc:	2300      	movs	r3, #0
    99ce:	60fb      	str	r3, [r7, #12]
  asm("rbit %0, %1" : "=r" (result) : "r" (value));
    99d0:	687b      	ldr	r3, [r7, #4]
    99d2:	fa93 f3a3 	rbit	r3, r3
    99d6:	60fb      	str	r3, [r7, #12]
  return result;
    99d8:	68fb      	ldr	r3, [r7, #12]
}
    99da:	4618      	mov	r0, r3
    99dc:	3714      	adds	r7, #20
    99de:	46bd      	mov	sp, r7
    99e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    99e4:	4770      	bx	lr
    99e6:	bf00      	nop

000099e8 <wait_us>:

/* delay a number of microseconds while on internal oscillator (4 MHz) */
/* we only have a resolution of 1000/400, so to the nearest 2.5        */
static volatile u32 wait_us_counter;
void wait_us(u32 us)
{
    99e8:	b480      	push	{r7}
    99ea:	b083      	sub	sp, #12
    99ec:	af00      	add	r7, sp, #0
    99ee:	6078      	str	r0, [r7, #4]
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    99f0:	687b      	ldr	r3, [r7, #4]
    99f2:	089a      	lsrs	r2, r3, #2
    99f4:	687b      	ldr	r3, [r7, #4]
    99f6:	08db      	lsrs	r3, r3, #3
    99f8:	441a      	add	r2, r3
    99fa:	687b      	ldr	r3, [r7, #4]
    99fc:	099b      	lsrs	r3, r3, #6
    99fe:	441a      	add	r2, r3
    9a00:	687b      	ldr	r3, [r7, #4]
    9a02:	09db      	lsrs	r3, r3, #7
    9a04:	441a      	add	r2, r3
    9a06:	687b      	ldr	r3, [r7, #4]
    9a08:	0a9b      	lsrs	r3, r3, #10
    9a0a:	441a      	add	r2, r3
    9a0c:	687b      	ldr	r3, [r7, #4]
    9a0e:	0adb      	lsrs	r3, r3, #11
    9a10:	4413      	add	r3, r2
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    9a12:	4a07      	ldr	r2, [pc, #28]	; (9a30 <wait_us+0x48>)
    9a14:	6013      	str	r3, [r2, #0]
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
	while(--wait_us_counter);
    9a16:	bf00      	nop
    9a18:	4b05      	ldr	r3, [pc, #20]	; (9a30 <wait_us+0x48>)
    9a1a:	681b      	ldr	r3, [r3, #0]
    9a1c:	3b01      	subs	r3, #1
    9a1e:	4a04      	ldr	r2, [pc, #16]	; (9a30 <wait_us+0x48>)
    9a20:	6013      	str	r3, [r2, #0]
    9a22:	2b00      	cmp	r3, #0
    9a24:	d1f8      	bne.n	9a18 <wait_us+0x30>
}
    9a26:	370c      	adds	r7, #12
    9a28:	46bd      	mov	sp, r7
    9a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a2e:	4770      	bx	lr
    9a30:	10000a68 	.word	0x10000a68

00009a34 <gpio_init>:
/*
 * This should be called very early by every firmware in order to ensure safe
 * operating conditions for the CC2400.
 */
void gpio_init()
{
    9a34:	b580      	push	{r7, lr}
    9a36:	af00      	add	r7, sp, #0
	/* 
	 * Set all pins for GPIO.  This shouldn't be necessary after a reset, but
	 * we might get called at other times.
	 */
	all_pins_off();
    9a38:	f000 f836 	bl	9aa8 <all_pins_off>
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    9a3c:	4b10      	ldr	r3, [pc, #64]	; (9a80 <gpio_init+0x4c>)
    9a3e:	2200      	movs	r2, #0
    9a40:	601a      	str	r2, [r3, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    9a42:	4b10      	ldr	r3, [pc, #64]	; (9a84 <gpio_init+0x50>)
    9a44:	f24c 7212 	movw	r2, #50962	; 0xc712
    9a48:	601a      	str	r2, [r3, #0]
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    9a4a:	4b0f      	ldr	r3, [pc, #60]	; (9a88 <gpio_init+0x54>)
    9a4c:	f240 12b1 	movw	r2, #433	; 0x1b1
    9a50:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
    9a52:	4b0e      	ldr	r3, [pc, #56]	; (9a8c <gpio_init+0x58>)
    9a54:	2200      	movs	r2, #0
    9a56:	601a      	str	r2, [r3, #0]
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    9a58:	4b0d      	ldr	r3, [pc, #52]	; (9a90 <gpio_init+0x5c>)
    9a5a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
    9a5e:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
	FIO4DIR = 0;
#endif

	/* set all outputs low */
	FIO0PIN = 0;
    9a60:	4b0c      	ldr	r3, [pc, #48]	; (9a94 <gpio_init+0x60>)
    9a62:	2200      	movs	r2, #0
    9a64:	601a      	str	r2, [r3, #0]
	FIO1PIN = 0;
    9a66:	4b0c      	ldr	r3, [pc, #48]	; (9a98 <gpio_init+0x64>)
    9a68:	2200      	movs	r2, #0
    9a6a:	601a      	str	r2, [r3, #0]
	FIO2PIN = 0;
    9a6c:	4b0b      	ldr	r3, [pc, #44]	; (9a9c <gpio_init+0x68>)
    9a6e:	2200      	movs	r2, #0
    9a70:	601a      	str	r2, [r3, #0]
	FIO3PIN = 0;
    9a72:	4b0b      	ldr	r3, [pc, #44]	; (9aa0 <gpio_init+0x6c>)
    9a74:	2200      	movs	r2, #0
    9a76:	601a      	str	r2, [r3, #0]
	FIO4PIN = 0;
    9a78:	4b0a      	ldr	r3, [pc, #40]	; (9aa4 <gpio_init+0x70>)
    9a7a:	2200      	movs	r2, #0
    9a7c:	601a      	str	r2, [r3, #0]

#ifdef TC13BADGE
	/* R8C_CTL is active low */
	R8C_CTL_SET;
#endif
}
    9a7e:	bd80      	pop	{r7, pc}
    9a80:	2009c000 	.word	0x2009c000
    9a84:	2009c020 	.word	0x2009c020
    9a88:	2009c040 	.word	0x2009c040
    9a8c:	2009c060 	.word	0x2009c060
    9a90:	2009c080 	.word	0x2009c080
    9a94:	2009c014 	.word	0x2009c014
    9a98:	2009c034 	.word	0x2009c034
    9a9c:	2009c054 	.word	0x2009c054
    9aa0:	2009c074 	.word	0x2009c074
    9aa4:	2009c094 	.word	0x2009c094

00009aa8 <all_pins_off>:

void all_pins_off(void)
{
    9aa8:	b480      	push	{r7}
    9aaa:	af00      	add	r7, sp, #0
	/* configure all pins for GPIO */
	PINSEL0 = 0;
    9aac:	4b27      	ldr	r3, [pc, #156]	; (9b4c <all_pins_off+0xa4>)
    9aae:	2200      	movs	r2, #0
    9ab0:	601a      	str	r2, [r3, #0]
	PINSEL1 = 0;
    9ab2:	4b27      	ldr	r3, [pc, #156]	; (9b50 <all_pins_off+0xa8>)
    9ab4:	2200      	movs	r2, #0
    9ab6:	601a      	str	r2, [r3, #0]
	PINSEL2 = 0;
    9ab8:	4b26      	ldr	r3, [pc, #152]	; (9b54 <all_pins_off+0xac>)
    9aba:	2200      	movs	r2, #0
    9abc:	601a      	str	r2, [r3, #0]
	PINSEL3 = 0;
    9abe:	4b26      	ldr	r3, [pc, #152]	; (9b58 <all_pins_off+0xb0>)
    9ac0:	2200      	movs	r2, #0
    9ac2:	601a      	str	r2, [r3, #0]
	PINSEL4 = 0;
    9ac4:	4b25      	ldr	r3, [pc, #148]	; (9b5c <all_pins_off+0xb4>)
    9ac6:	2200      	movs	r2, #0
    9ac8:	601a      	str	r2, [r3, #0]
	PINSEL7 = 0;
    9aca:	4b25      	ldr	r3, [pc, #148]	; (9b60 <all_pins_off+0xb8>)
    9acc:	2200      	movs	r2, #0
    9ace:	601a      	str	r2, [r3, #0]
	PINSEL9 = 0;
    9ad0:	4b24      	ldr	r3, [pc, #144]	; (9b64 <all_pins_off+0xbc>)
    9ad2:	2200      	movs	r2, #0
    9ad4:	601a      	str	r2, [r3, #0]
	PINSEL10 = 0;
    9ad6:	4b24      	ldr	r3, [pc, #144]	; (9b68 <all_pins_off+0xc0>)
    9ad8:	2200      	movs	r2, #0
    9ada:	601a      	str	r2, [r3, #0]

	/* configure all pins as inputs */
	FIO0DIR = 0;
    9adc:	4b23      	ldr	r3, [pc, #140]	; (9b6c <all_pins_off+0xc4>)
    9ade:	2200      	movs	r2, #0
    9ae0:	601a      	str	r2, [r3, #0]
	FIO1DIR = 0;
    9ae2:	4b23      	ldr	r3, [pc, #140]	; (9b70 <all_pins_off+0xc8>)
    9ae4:	2200      	movs	r2, #0
    9ae6:	601a      	str	r2, [r3, #0]
	FIO2DIR = 0;
    9ae8:	4b22      	ldr	r3, [pc, #136]	; (9b74 <all_pins_off+0xcc>)
    9aea:	2200      	movs	r2, #0
    9aec:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
    9aee:	4b22      	ldr	r3, [pc, #136]	; (9b78 <all_pins_off+0xd0>)
    9af0:	2200      	movs	r2, #0
    9af2:	601a      	str	r2, [r3, #0]
	FIO4DIR = 0;
    9af4:	4b21      	ldr	r3, [pc, #132]	; (9b7c <all_pins_off+0xd4>)
    9af6:	2200      	movs	r2, #0
    9af8:	601a      	str	r2, [r3, #0]

	/* pull-up on every pin */
	PINMODE0 = 0;
    9afa:	4b21      	ldr	r3, [pc, #132]	; (9b80 <all_pins_off+0xd8>)
    9afc:	2200      	movs	r2, #0
    9afe:	601a      	str	r2, [r3, #0]
	PINMODE1 = 0;
    9b00:	4b20      	ldr	r3, [pc, #128]	; (9b84 <all_pins_off+0xdc>)
    9b02:	2200      	movs	r2, #0
    9b04:	601a      	str	r2, [r3, #0]
	PINMODE2 = 0;
    9b06:	4b20      	ldr	r3, [pc, #128]	; (9b88 <all_pins_off+0xe0>)
    9b08:	2200      	movs	r2, #0
    9b0a:	601a      	str	r2, [r3, #0]
	PINMODE3 = 0;
    9b0c:	4b1f      	ldr	r3, [pc, #124]	; (9b8c <all_pins_off+0xe4>)
    9b0e:	2200      	movs	r2, #0
    9b10:	601a      	str	r2, [r3, #0]
	PINMODE4 = 0;
    9b12:	4b1f      	ldr	r3, [pc, #124]	; (9b90 <all_pins_off+0xe8>)
    9b14:	2200      	movs	r2, #0
    9b16:	601a      	str	r2, [r3, #0]
	PINMODE7 = 0;
    9b18:	4b1e      	ldr	r3, [pc, #120]	; (9b94 <all_pins_off+0xec>)
    9b1a:	2200      	movs	r2, #0
    9b1c:	601a      	str	r2, [r3, #0]
	PINMODE9 = 0;
    9b1e:	4b1e      	ldr	r3, [pc, #120]	; (9b98 <all_pins_off+0xf0>)
    9b20:	2200      	movs	r2, #0
    9b22:	601a      	str	r2, [r3, #0]

	/* set all outputs low */
	FIO0PIN = 0;
    9b24:	4b1d      	ldr	r3, [pc, #116]	; (9b9c <all_pins_off+0xf4>)
    9b26:	2200      	movs	r2, #0
    9b28:	601a      	str	r2, [r3, #0]
	FIO1PIN = 0;
    9b2a:	4b1d      	ldr	r3, [pc, #116]	; (9ba0 <all_pins_off+0xf8>)
    9b2c:	2200      	movs	r2, #0
    9b2e:	601a      	str	r2, [r3, #0]
	FIO2PIN = 0;
    9b30:	4b1c      	ldr	r3, [pc, #112]	; (9ba4 <all_pins_off+0xfc>)
    9b32:	2200      	movs	r2, #0
    9b34:	601a      	str	r2, [r3, #0]
	FIO3PIN = 0;
    9b36:	4b1c      	ldr	r3, [pc, #112]	; (9ba8 <all_pins_off+0x100>)
    9b38:	2200      	movs	r2, #0
    9b3a:	601a      	str	r2, [r3, #0]
	FIO4PIN = 0;
    9b3c:	4b1b      	ldr	r3, [pc, #108]	; (9bac <all_pins_off+0x104>)
    9b3e:	2200      	movs	r2, #0
    9b40:	601a      	str	r2, [r3, #0]
}
    9b42:	46bd      	mov	sp, r7
    9b44:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b48:	4770      	bx	lr
    9b4a:	bf00      	nop
    9b4c:	4002c000 	.word	0x4002c000
    9b50:	4002c004 	.word	0x4002c004
    9b54:	4002c008 	.word	0x4002c008
    9b58:	4002c00c 	.word	0x4002c00c
    9b5c:	4002c010 	.word	0x4002c010
    9b60:	4002c01c 	.word	0x4002c01c
    9b64:	4002c024 	.word	0x4002c024
    9b68:	4002c028 	.word	0x4002c028
    9b6c:	2009c000 	.word	0x2009c000
    9b70:	2009c020 	.word	0x2009c020
    9b74:	2009c040 	.word	0x2009c040
    9b78:	2009c060 	.word	0x2009c060
    9b7c:	2009c080 	.word	0x2009c080
    9b80:	4002c040 	.word	0x4002c040
    9b84:	4002c044 	.word	0x4002c044
    9b88:	4002c048 	.word	0x4002c048
    9b8c:	4002c04c 	.word	0x4002c04c
    9b90:	4002c050 	.word	0x4002c050
    9b94:	4002c05c 	.word	0x4002c05c
    9b98:	4002c064 	.word	0x4002c064
    9b9c:	2009c014 	.word	0x2009c014
    9ba0:	2009c034 	.word	0x2009c034
    9ba4:	2009c054 	.word	0x2009c054
    9ba8:	2009c074 	.word	0x2009c074
    9bac:	2009c094 	.word	0x2009c094

00009bb0 <ubertooth_init>:
/*
 * Every application that uses the main oscillator (including any that use both
 * USB and the CC2400) should start with this.
 */
void ubertooth_init()
{
    9bb0:	b580      	push	{r7, lr}
    9bb2:	af00      	add	r7, sp, #0
	gpio_init();
    9bb4:	f7ff ff3e 	bl	9a34 <gpio_init>
	cc2400_init();
    9bb8:	f000 f860 	bl	9c7c <cc2400_init>
	clock_start();
    9bbc:	f000 f9c2 	bl	9f44 <clock_start>
}
    9bc0:	bd80      	pop	{r7, pc}
    9bc2:	bf00      	nop

00009bc4 <dio_ssp_init>:

/* configure SSP for CC2400's secondary serial data interface */
void dio_ssp_init()
{
    9bc4:	b480      	push	{r7}
    9bc6:	af00      	add	r7, sp, #0
	/* set P1.18 as MOSI0 */
	PINSEL1 = (PINSEL1 & ~(3 << 4)) | (2 << 4);
#endif
#if defined UBERTOOTH_ONE || defined TC13BADGE
	/* set P0.7 as SCK1 */
	PINSEL0 = (PINSEL0 & ~(3 << 14)) | (2 << 14);
    9bc8:	4a16      	ldr	r2, [pc, #88]	; (9c24 <dio_ssp_init+0x60>)
    9bca:	4b16      	ldr	r3, [pc, #88]	; (9c24 <dio_ssp_init+0x60>)
    9bcc:	681b      	ldr	r3, [r3, #0]
    9bce:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    9bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    9bd6:	6013      	str	r3, [r2, #0]

	/* set P0.6 as SSEL1 */
	PINSEL0 = (PINSEL0 & ~(3 << 12)) | (2 << 12);
    9bd8:	4a12      	ldr	r2, [pc, #72]	; (9c24 <dio_ssp_init+0x60>)
    9bda:	4b12      	ldr	r3, [pc, #72]	; (9c24 <dio_ssp_init+0x60>)
    9bdc:	681b      	ldr	r3, [r3, #0]
    9bde:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    9be2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    9be6:	6013      	str	r3, [r2, #0]

	/* set P0.8 as MISO1 */
	PINSEL0 = (PINSEL0 & ~(3 << 16)) | (2 << 16);
    9be8:	4a0e      	ldr	r2, [pc, #56]	; (9c24 <dio_ssp_init+0x60>)
    9bea:	4b0e      	ldr	r3, [pc, #56]	; (9c24 <dio_ssp_init+0x60>)
    9bec:	681b      	ldr	r3, [r3, #0]
    9bee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    9bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    9bf6:	6013      	str	r3, [r2, #0]

	/* set P0.9 as MOSI1 */
	PINSEL0 = (PINSEL0 & ~(3 << 18)) | (2 << 18);
    9bf8:	4a0a      	ldr	r2, [pc, #40]	; (9c24 <dio_ssp_init+0x60>)
    9bfa:	4b0a      	ldr	r3, [pc, #40]	; (9c24 <dio_ssp_init+0x60>)
    9bfc:	681b      	ldr	r3, [r3, #0]
    9bfe:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    9c02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    9c06:	6013      	str	r3, [r2, #0]
	 * interface.  Since the CC2400 doesn't have a slave select output, we
	 * control it with this.  DIO_SSEL should already be configured by
	 * gpio_init().  We set it high by default because it is an active low
	 * signal.
	 */
	DIO_SSEL_SET;
    9c08:	4b07      	ldr	r3, [pc, #28]	; (9c28 <dio_ssp_init+0x64>)
    9c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9c0e:	601a      	str	r2, [r3, #0]

	/* configure DIO_SSP */
	DIO_SSP_CR0 = (0x7 /* 8 bit transfer */ | SSPCR0_CPOL | SSPCR0_CPHA);
    9c10:	4b06      	ldr	r3, [pc, #24]	; (9c2c <dio_ssp_init+0x68>)
    9c12:	22c7      	movs	r2, #199	; 0xc7
    9c14:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 = (SSPCR1_MS | SSPCR1_SOD);
    9c16:	4b06      	ldr	r3, [pc, #24]	; (9c30 <dio_ssp_init+0x6c>)
    9c18:	220c      	movs	r2, #12
    9c1a:	601a      	str	r2, [r3, #0]
}
    9c1c:	46bd      	mov	sp, r7
    9c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c22:	4770      	bx	lr
    9c24:	4002c000 	.word	0x4002c000
    9c28:	2009c098 	.word	0x2009c098
    9c2c:	40030000 	.word	0x40030000
    9c30:	40030004 	.word	0x40030004

00009c34 <atest_init>:

void atest_init()
{
    9c34:	b480      	push	{r7}
    9c36:	af00      	add	r7, sp, #0
	 * ADC can optionally be configured for ATEST1 and ATEST2, but for now we
	 * set them as floating inputs.
	 */

	/* P0.25 is ATEST1, P0.26 is ATEST2 */
	PINSEL1 &= ~((0x3 << 20) | (0x3 << 18)); // set as GPIO
    9c38:	4a0d      	ldr	r2, [pc, #52]	; (9c70 <atest_init+0x3c>)
    9c3a:	4b0d      	ldr	r3, [pc, #52]	; (9c70 <atest_init+0x3c>)
    9c3c:	681b      	ldr	r3, [r3, #0]
    9c3e:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
    9c42:	6013      	str	r3, [r2, #0]
	FIO0DIR &= ~(0x3 << 25); // set as input
    9c44:	4a0b      	ldr	r2, [pc, #44]	; (9c74 <atest_init+0x40>)
    9c46:	4b0b      	ldr	r3, [pc, #44]	; (9c74 <atest_init+0x40>)
    9c48:	681b      	ldr	r3, [r3, #0]
    9c4a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
    9c4e:	6013      	str	r3, [r2, #0]
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
    9c50:	4a09      	ldr	r2, [pc, #36]	; (9c78 <atest_init+0x44>)
    9c52:	4b09      	ldr	r3, [pc, #36]	; (9c78 <atest_init+0x44>)
    9c54:	681b      	ldr	r3, [r3, #0]
    9c56:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
    9c5a:	6013      	str	r3, [r2, #0]
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
    9c5c:	4a06      	ldr	r2, [pc, #24]	; (9c78 <atest_init+0x44>)
    9c5e:	4b06      	ldr	r3, [pc, #24]	; (9c78 <atest_init+0x44>)
    9c60:	681b      	ldr	r3, [r3, #0]
    9c62:	f423 13a0 	bic.w	r3, r3, #1310720	; 0x140000
    9c66:	6013      	str	r3, [r2, #0]
}
    9c68:	46bd      	mov	sp, r7
    9c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c6e:	4770      	bx	lr
    9c70:	4002c004 	.word	0x4002c004
    9c74:	2009c000 	.word	0x2009c000
    9c78:	4002c044 	.word	0x4002c044

00009c7c <cc2400_init>:

void cc2400_init()
{
    9c7c:	b580      	push	{r7, lr}
    9c7e:	af00      	add	r7, sp, #0
	FIO1PIN = 0; /* assuming we have already asserted R8C_CTL low */
	FIO2PIN = 0;
	FIO3PIN = 0;
	FIO4PIN = 0;
#else
	atest_init();
    9c80:	f7ff ffd8 	bl	9c34 <atest_init>
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    9c84:	4b09      	ldr	r3, [pc, #36]	; (9cac <cc2400_init+0x30>)
    9c86:	f44f 7200 	mov.w	r2, #512	; 0x200
    9c8a:	601a      	str	r2, [r3, #0]
	wait_us(50);
    9c8c:	2032      	movs	r0, #50	; 0x32
    9c8e:	f7ff feab 	bl	99e8 <wait_us>

	/* CSN (slave select) is active low */
	CSN_SET;
    9c92:	4b07      	ldr	r3, [pc, #28]	; (9cb0 <cc2400_init+0x34>)
    9c94:	2220      	movs	r2, #32
    9c96:	601a      	str	r2, [r3, #0]

	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;
    9c98:	4b04      	ldr	r3, [pc, #16]	; (9cac <cc2400_init+0x30>)
    9c9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    9c9e:	601a      	str	r2, [r3, #0]

	/* initialise various cc2400 settings - see datasheet pg63 */
	cc2400_set(MANAND,  0x7fff);
    9ca0:	200d      	movs	r0, #13
    9ca2:	f647 71ff 	movw	r1, #32767	; 0x7fff
    9ca6:	f000 f85f 	bl	9d68 <cc2400_set>
}
    9caa:	bd80      	pop	{r7, pc}
    9cac:	2009c038 	.word	0x2009c038
    9cb0:	2009c058 	.word	0x2009c058

00009cb4 <cc2400_spi>:
 * 2. We're saving the second SPI peripheral for an expansion port.
 * 3. The CC2400 needs CSN held low for the entire transaction which the
 *    LPC17xx SPI peripheral won't do without some workaround anyway.
 */
u32 cc2400_spi(u8 len, u32 data)
{
    9cb4:	b480      	push	{r7}
    9cb6:	b085      	sub	sp, #20
    9cb8:	af00      	add	r7, sp, #0
    9cba:	4603      	mov	r3, r0
    9cbc:	6039      	str	r1, [r7, #0]
    9cbe:	71fb      	strb	r3, [r7, #7]
	u32 msb = 1 << (len - 1);
    9cc0:	79fb      	ldrb	r3, [r7, #7]
    9cc2:	3b01      	subs	r3, #1
    9cc4:	2201      	movs	r2, #1
    9cc6:	fa02 f303 	lsl.w	r3, r2, r3
    9cca:	60fb      	str	r3, [r7, #12]

	/* start transaction by dropping CSN */
	CSN_CLR;
    9ccc:	4b18      	ldr	r3, [pc, #96]	; (9d30 <cc2400_spi+0x7c>)
    9cce:	2220      	movs	r2, #32
    9cd0:	601a      	str	r2, [r3, #0]

	while (len--) {
    9cd2:	e01e      	b.n	9d12 <cc2400_spi+0x5e>
		if (data & msb)
    9cd4:	683a      	ldr	r2, [r7, #0]
    9cd6:	68fb      	ldr	r3, [r7, #12]
    9cd8:	4013      	ands	r3, r2
    9cda:	2b00      	cmp	r3, #0
    9cdc:	d003      	beq.n	9ce6 <cc2400_spi+0x32>
			MOSI_SET;
    9cde:	4b15      	ldr	r3, [pc, #84]	; (9d34 <cc2400_spi+0x80>)
    9ce0:	2201      	movs	r2, #1
    9ce2:	601a      	str	r2, [r3, #0]
    9ce4:	e002      	b.n	9cec <cc2400_spi+0x38>
		else
			MOSI_CLR;
    9ce6:	4b12      	ldr	r3, [pc, #72]	; (9d30 <cc2400_spi+0x7c>)
    9ce8:	2201      	movs	r2, #1
    9cea:	601a      	str	r2, [r3, #0]
		data <<= 1;
    9cec:	683b      	ldr	r3, [r7, #0]
    9cee:	005b      	lsls	r3, r3, #1
    9cf0:	603b      	str	r3, [r7, #0]

		SCLK_SET;
    9cf2:	4b10      	ldr	r3, [pc, #64]	; (9d34 <cc2400_spi+0x80>)
    9cf4:	2210      	movs	r2, #16
    9cf6:	601a      	str	r2, [r3, #0]
		if (MISO)
    9cf8:	4b0f      	ldr	r3, [pc, #60]	; (9d38 <cc2400_spi+0x84>)
    9cfa:	681b      	ldr	r3, [r3, #0]
    9cfc:	f003 0302 	and.w	r3, r3, #2
    9d00:	2b00      	cmp	r3, #0
    9d02:	d003      	beq.n	9d0c <cc2400_spi+0x58>
			data |= 1;
    9d04:	683b      	ldr	r3, [r7, #0]
    9d06:	f043 0301 	orr.w	r3, r3, #1
    9d0a:	603b      	str	r3, [r7, #0]

		SCLK_CLR;
    9d0c:	4b08      	ldr	r3, [pc, #32]	; (9d30 <cc2400_spi+0x7c>)
    9d0e:	2210      	movs	r2, #16
    9d10:	601a      	str	r2, [r3, #0]
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    9d12:	79fb      	ldrb	r3, [r7, #7]
    9d14:	1e5a      	subs	r2, r3, #1
    9d16:	71fa      	strb	r2, [r7, #7]
    9d18:	2b00      	cmp	r3, #0
    9d1a:	d1db      	bne.n	9cd4 <cc2400_spi+0x20>

		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    9d1c:	4b05      	ldr	r3, [pc, #20]	; (9d34 <cc2400_spi+0x80>)
    9d1e:	2220      	movs	r2, #32
    9d20:	601a      	str	r2, [r3, #0]

	return data;
    9d22:	683b      	ldr	r3, [r7, #0]
}
    9d24:	4618      	mov	r0, r3
    9d26:	3714      	adds	r7, #20
    9d28:	46bd      	mov	sp, r7
    9d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d2e:	4770      	bx	lr
    9d30:	2009c05c 	.word	0x2009c05c
    9d34:	2009c058 	.word	0x2009c058
    9d38:	2009c054 	.word	0x2009c054

00009d3c <cc2400_get>:

/* read 16 bit value from a register */
u16 cc2400_get(u8 reg)
{
    9d3c:	b580      	push	{r7, lr}
    9d3e:	b084      	sub	sp, #16
    9d40:	af00      	add	r7, sp, #0
    9d42:	4603      	mov	r3, r0
    9d44:	71fb      	strb	r3, [r7, #7]
	u32 in;

	u32 out = (reg | 0x80) << 16;
    9d46:	79fb      	ldrb	r3, [r7, #7]
    9d48:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9d4c:	b2db      	uxtb	r3, r3
    9d4e:	041b      	lsls	r3, r3, #16
    9d50:	60fb      	str	r3, [r7, #12]
	in = cc2400_spi(24, out);
    9d52:	2018      	movs	r0, #24
    9d54:	68f9      	ldr	r1, [r7, #12]
    9d56:	f7ff ffad 	bl	9cb4 <cc2400_spi>
    9d5a:	60b8      	str	r0, [r7, #8]
	return in & 0xFFFF;
    9d5c:	68bb      	ldr	r3, [r7, #8]
    9d5e:	b29b      	uxth	r3, r3
}
    9d60:	4618      	mov	r0, r3
    9d62:	3710      	adds	r7, #16
    9d64:	46bd      	mov	sp, r7
    9d66:	bd80      	pop	{r7, pc}

00009d68 <cc2400_set>:

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
    9d68:	b580      	push	{r7, lr}
    9d6a:	b084      	sub	sp, #16
    9d6c:	af00      	add	r7, sp, #0
    9d6e:	4603      	mov	r3, r0
    9d70:	460a      	mov	r2, r1
    9d72:	71fb      	strb	r3, [r7, #7]
    9d74:	4613      	mov	r3, r2
    9d76:	80bb      	strh	r3, [r7, #4]
	u32 out = (reg << 16) | val;
    9d78:	79fb      	ldrb	r3, [r7, #7]
    9d7a:	041a      	lsls	r2, r3, #16
    9d7c:	88bb      	ldrh	r3, [r7, #4]
    9d7e:	4313      	orrs	r3, r2
    9d80:	60fb      	str	r3, [r7, #12]
	cc2400_spi(24, out);
    9d82:	2018      	movs	r0, #24
    9d84:	68f9      	ldr	r1, [r7, #12]
    9d86:	f7ff ff95 	bl	9cb4 <cc2400_spi>
}
    9d8a:	3710      	adds	r7, #16
    9d8c:	46bd      	mov	sp, r7
    9d8e:	bd80      	pop	{r7, pc}

00009d90 <cc2400_get8>:

/* read 8 bit value from a register */
u8 cc2400_get8(u8 reg)
{
    9d90:	b580      	push	{r7, lr}
    9d92:	b084      	sub	sp, #16
    9d94:	af00      	add	r7, sp, #0
    9d96:	4603      	mov	r3, r0
    9d98:	71fb      	strb	r3, [r7, #7]
	u16 in;

	u16 out = (reg | 0x80) << 8;
    9d9a:	79fb      	ldrb	r3, [r7, #7]
    9d9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9da0:	b2db      	uxtb	r3, r3
    9da2:	b29b      	uxth	r3, r3
    9da4:	021b      	lsls	r3, r3, #8
    9da6:	81fb      	strh	r3, [r7, #14]
	in = cc2400_spi(16, out);
    9da8:	89fb      	ldrh	r3, [r7, #14]
    9daa:	2010      	movs	r0, #16
    9dac:	4619      	mov	r1, r3
    9dae:	f7ff ff81 	bl	9cb4 <cc2400_spi>
    9db2:	4603      	mov	r3, r0
    9db4:	81bb      	strh	r3, [r7, #12]
	return in & 0xFF;
    9db6:	89bb      	ldrh	r3, [r7, #12]
    9db8:	b2db      	uxtb	r3, r3
}
    9dba:	4618      	mov	r0, r3
    9dbc:	3710      	adds	r7, #16
    9dbe:	46bd      	mov	sp, r7
    9dc0:	bd80      	pop	{r7, pc}
    9dc2:	bf00      	nop

00009dc4 <cc2400_set8>:

/* write 8 bit value to a register */
void cc2400_set8(u8 reg, u8 val)
{
    9dc4:	b580      	push	{r7, lr}
    9dc6:	b084      	sub	sp, #16
    9dc8:	af00      	add	r7, sp, #0
    9dca:	4603      	mov	r3, r0
    9dcc:	460a      	mov	r2, r1
    9dce:	71fb      	strb	r3, [r7, #7]
    9dd0:	4613      	mov	r3, r2
    9dd2:	71bb      	strb	r3, [r7, #6]
	u32 out = (reg << 8) | val;
    9dd4:	79fb      	ldrb	r3, [r7, #7]
    9dd6:	021a      	lsls	r2, r3, #8
    9dd8:	79bb      	ldrb	r3, [r7, #6]
    9dda:	4313      	orrs	r3, r2
    9ddc:	60fb      	str	r3, [r7, #12]
	cc2400_spi(16, out);
    9dde:	2010      	movs	r0, #16
    9de0:	68f9      	ldr	r1, [r7, #12]
    9de2:	f7ff ff67 	bl	9cb4 <cc2400_spi>
}
    9de6:	3710      	adds	r7, #16
    9de8:	46bd      	mov	sp, r7
    9dea:	bd80      	pop	{r7, pc}

00009dec <cc2400_spi_buf>:

/* write multiple bytes to SPI */
void cc2400_spi_buf(u8 reg, u8 len, u8 *data)
{
    9dec:	b480      	push	{r7}
    9dee:	b085      	sub	sp, #20
    9df0:	af00      	add	r7, sp, #0
    9df2:	4603      	mov	r3, r0
    9df4:	603a      	str	r2, [r7, #0]
    9df6:	71fb      	strb	r3, [r7, #7]
    9df8:	460b      	mov	r3, r1
    9dfa:	71bb      	strb	r3, [r7, #6]
	u8 msb = 1 << 7;
    9dfc:	2380      	movs	r3, #128	; 0x80
    9dfe:	733b      	strb	r3, [r7, #12]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;
    9e00:	4b33      	ldr	r3, [pc, #204]	; (9ed0 <cc2400_spi_buf+0xe4>)
    9e02:	2220      	movs	r2, #32
    9e04:	601a      	str	r2, [r3, #0]

	for (i = 0; i < 8; ++i) {
    9e06:	2300      	movs	r3, #0
    9e08:	73fb      	strb	r3, [r7, #15]
    9e0a:	e018      	b.n	9e3e <cc2400_spi_buf+0x52>
		if (reg & msb)
    9e0c:	79fa      	ldrb	r2, [r7, #7]
    9e0e:	7b3b      	ldrb	r3, [r7, #12]
    9e10:	4013      	ands	r3, r2
    9e12:	b2db      	uxtb	r3, r3
    9e14:	2b00      	cmp	r3, #0
    9e16:	d003      	beq.n	9e20 <cc2400_spi_buf+0x34>
			MOSI_SET;
    9e18:	4b2e      	ldr	r3, [pc, #184]	; (9ed4 <cc2400_spi_buf+0xe8>)
    9e1a:	2201      	movs	r2, #1
    9e1c:	601a      	str	r2, [r3, #0]
    9e1e:	e002      	b.n	9e26 <cc2400_spi_buf+0x3a>
		else
			MOSI_CLR;
    9e20:	4b2b      	ldr	r3, [pc, #172]	; (9ed0 <cc2400_spi_buf+0xe4>)
    9e22:	2201      	movs	r2, #1
    9e24:	601a      	str	r2, [r3, #0]
		reg <<= 1;
    9e26:	79fb      	ldrb	r3, [r7, #7]
    9e28:	005b      	lsls	r3, r3, #1
    9e2a:	71fb      	strb	r3, [r7, #7]
		SCLK_SET;
    9e2c:	4b29      	ldr	r3, [pc, #164]	; (9ed4 <cc2400_spi_buf+0xe8>)
    9e2e:	2210      	movs	r2, #16
    9e30:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
    9e32:	4b27      	ldr	r3, [pc, #156]	; (9ed0 <cc2400_spi_buf+0xe4>)
    9e34:	2210      	movs	r2, #16
    9e36:	601a      	str	r2, [r3, #0]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    9e38:	7bfb      	ldrb	r3, [r7, #15]
    9e3a:	3301      	adds	r3, #1
    9e3c:	73fb      	strb	r3, [r7, #15]
    9e3e:	7bfb      	ldrb	r3, [r7, #15]
    9e40:	2b07      	cmp	r3, #7
    9e42:	d9e3      	bls.n	9e0c <cc2400_spi_buf+0x20>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    9e44:	2300      	movs	r3, #0
    9e46:	73fb      	strb	r3, [r7, #15]
    9e48:	e026      	b.n	9e98 <cc2400_spi_buf+0xac>
		temp = data[i];
    9e4a:	7bfb      	ldrb	r3, [r7, #15]
    9e4c:	683a      	ldr	r2, [r7, #0]
    9e4e:	4413      	add	r3, r2
    9e50:	781b      	ldrb	r3, [r3, #0]
    9e52:	737b      	strb	r3, [r7, #13]
		for (j = 0; j < 8; ++j) {
    9e54:	2300      	movs	r3, #0
    9e56:	73bb      	strb	r3, [r7, #14]
    9e58:	e018      	b.n	9e8c <cc2400_spi_buf+0xa0>
			if (temp & msb)
    9e5a:	7b7a      	ldrb	r2, [r7, #13]
    9e5c:	7b3b      	ldrb	r3, [r7, #12]
    9e5e:	4013      	ands	r3, r2
    9e60:	b2db      	uxtb	r3, r3
    9e62:	2b00      	cmp	r3, #0
    9e64:	d003      	beq.n	9e6e <cc2400_spi_buf+0x82>
				MOSI_SET;
    9e66:	4b1b      	ldr	r3, [pc, #108]	; (9ed4 <cc2400_spi_buf+0xe8>)
    9e68:	2201      	movs	r2, #1
    9e6a:	601a      	str	r2, [r3, #0]
    9e6c:	e002      	b.n	9e74 <cc2400_spi_buf+0x88>
			else
				MOSI_CLR;
    9e6e:	4b18      	ldr	r3, [pc, #96]	; (9ed0 <cc2400_spi_buf+0xe4>)
    9e70:	2201      	movs	r2, #1
    9e72:	601a      	str	r2, [r3, #0]
			temp <<= 1;
    9e74:	7b7b      	ldrb	r3, [r7, #13]
    9e76:	005b      	lsls	r3, r3, #1
    9e78:	737b      	strb	r3, [r7, #13]
			SCLK_SET;
    9e7a:	4b16      	ldr	r3, [pc, #88]	; (9ed4 <cc2400_spi_buf+0xe8>)
    9e7c:	2210      	movs	r2, #16
    9e7e:	601a      	str	r2, [r3, #0]
			SCLK_CLR;
    9e80:	4b13      	ldr	r3, [pc, #76]	; (9ed0 <cc2400_spi_buf+0xe4>)
    9e82:	2210      	movs	r2, #16
    9e84:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
    9e86:	7bbb      	ldrb	r3, [r7, #14]
    9e88:	3301      	adds	r3, #1
    9e8a:	73bb      	strb	r3, [r7, #14]
    9e8c:	7bbb      	ldrb	r3, [r7, #14]
    9e8e:	2b07      	cmp	r3, #7
    9e90:	d9e3      	bls.n	9e5a <cc2400_spi_buf+0x6e>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    9e92:	7bfb      	ldrb	r3, [r7, #15]
    9e94:	3301      	adds	r3, #1
    9e96:	73fb      	strb	r3, [r7, #15]
    9e98:	7bfa      	ldrb	r2, [r7, #15]
    9e9a:	79bb      	ldrb	r3, [r7, #6]
    9e9c:	429a      	cmp	r2, r3
    9e9e:	d3d4      	bcc.n	9e4a <cc2400_spi_buf+0x5e>
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    9ea0:	2300      	movs	r3, #0
    9ea2:	73fb      	strb	r3, [r7, #15]
    9ea4:	e008      	b.n	9eb8 <cc2400_spi_buf+0xcc>
		SCLK_SET;
    9ea6:	4b0b      	ldr	r3, [pc, #44]	; (9ed4 <cc2400_spi_buf+0xe8>)
    9ea8:	2210      	movs	r2, #16
    9eaa:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
    9eac:	4b08      	ldr	r3, [pc, #32]	; (9ed0 <cc2400_spi_buf+0xe4>)
    9eae:	2210      	movs	r2, #16
    9eb0:	601a      	str	r2, [r3, #0]
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    9eb2:	7bfb      	ldrb	r3, [r7, #15]
    9eb4:	3301      	adds	r3, #1
    9eb6:	73fb      	strb	r3, [r7, #15]
    9eb8:	7bfb      	ldrb	r3, [r7, #15]
    9eba:	2b07      	cmp	r3, #7
    9ebc:	d9f3      	bls.n	9ea6 <cc2400_spi_buf+0xba>
		SCLK_SET;
		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    9ebe:	4b05      	ldr	r3, [pc, #20]	; (9ed4 <cc2400_spi_buf+0xe8>)
    9ec0:	2220      	movs	r2, #32
    9ec2:	601a      	str	r2, [r3, #0]
}
    9ec4:	3714      	adds	r7, #20
    9ec6:	46bd      	mov	sp, r7
    9ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ecc:	4770      	bx	lr
    9ece:	bf00      	nop
    9ed0:	2009c05c 	.word	0x2009c05c
    9ed4:	2009c058 	.word	0x2009c058

00009ed8 <cc2400_status>:

/* get the status */
u8 cc2400_status()
{
    9ed8:	b580      	push	{r7, lr}
    9eda:	af00      	add	r7, sp, #0
	return cc2400_spi(8, 0);
    9edc:	2008      	movs	r0, #8
    9ede:	2100      	movs	r1, #0
    9ee0:	f7ff fee8 	bl	9cb4 <cc2400_spi>
    9ee4:	4603      	mov	r3, r0
    9ee6:	b2db      	uxtb	r3, r3
}
    9ee8:	4618      	mov	r0, r3
    9eea:	bd80      	pop	{r7, pc}

00009eec <cc2400_strobe>:

/* strobe register, return status */
u8 cc2400_strobe(u8 reg)
{
    9eec:	b580      	push	{r7, lr}
    9eee:	b082      	sub	sp, #8
    9ef0:	af00      	add	r7, sp, #0
    9ef2:	4603      	mov	r3, r0
    9ef4:	71fb      	strb	r3, [r7, #7]
	return cc2400_spi(8, reg);
    9ef6:	79fb      	ldrb	r3, [r7, #7]
    9ef8:	2008      	movs	r0, #8
    9efa:	4619      	mov	r1, r3
    9efc:	f7ff feda 	bl	9cb4 <cc2400_spi>
    9f00:	4603      	mov	r3, r0
    9f02:	b2db      	uxtb	r3, r3
}
    9f04:	4618      	mov	r0, r3
    9f06:	3708      	adds	r7, #8
    9f08:	46bd      	mov	sp, r7
    9f0a:	bd80      	pop	{r7, pc}

00009f0c <cc2400_reset>:
/*
 * Warning: This should only be called when running on the internal oscillator.
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
    9f0c:	b580      	push	{r7, lr}
    9f0e:	af00      	add	r7, sp, #0
	cc2400_set(MAIN, 0x0000);
    9f10:	2000      	movs	r0, #0
    9f12:	2100      	movs	r1, #0
    9f14:	f7ff ff28 	bl	9d68 <cc2400_set>
	while (cc2400_get(MAIN) != 0x0000);
    9f18:	bf00      	nop
    9f1a:	2000      	movs	r0, #0
    9f1c:	f7ff ff0e 	bl	9d3c <cc2400_get>
    9f20:	4603      	mov	r3, r0
    9f22:	2b00      	cmp	r3, #0
    9f24:	d1f9      	bne.n	9f1a <cc2400_reset+0xe>
	cc2400_set(MAIN, 0x8000);
    9f26:	2000      	movs	r0, #0
    9f28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    9f2c:	f7ff ff1c 	bl	9d68 <cc2400_set>
	while (cc2400_get(MAIN) != 0x8000);
    9f30:	bf00      	nop
    9f32:	2000      	movs	r0, #0
    9f34:	f7ff ff02 	bl	9d3c <cc2400_get>
    9f38:	4603      	mov	r3, r0
    9f3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9f3e:	d1f8      	bne.n	9f32 <cc2400_reset+0x26>
}
    9f40:	bd80      	pop	{r7, pc}
    9f42:	bf00      	nop

00009f44 <clock_start>:

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
    9f44:	b580      	push	{r7, lr}
    9f46:	af00      	add	r7, sp, #0
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    9f48:	4b5e      	ldr	r3, [pc, #376]	; (a0c4 <clock_start+0x180>)
    9f4a:	f244 023a 	movw	r2, #16442	; 0x403a
    9f4e:	601a      	str	r2, [r3, #0]

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    9f50:	4b5d      	ldr	r3, [pc, #372]	; (a0c8 <clock_start+0x184>)
    9f52:	2200      	movs	r2, #0
    9f54:	601a      	str	r2, [r3, #0]

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    9f56:	4a5d      	ldr	r2, [pc, #372]	; (a0cc <clock_start+0x188>)
    9f58:	4b5c      	ldr	r3, [pc, #368]	; (a0cc <clock_start+0x188>)
    9f5a:	681b      	ldr	r3, [r3, #0]
    9f5c:	f023 0302 	bic.w	r3, r3, #2
    9f60:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    9f62:	4b5b      	ldr	r3, [pc, #364]	; (a0d0 <clock_start+0x18c>)
    9f64:	22aa      	movs	r2, #170	; 0xaa
    9f66:	601a      	str	r2, [r3, #0]
    9f68:	4b59      	ldr	r3, [pc, #356]	; (a0d0 <clock_start+0x18c>)
    9f6a:	2255      	movs	r2, #85	; 0x55
    9f6c:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLC0_STAT);
    9f6e:	bf00      	nop
    9f70:	4b58      	ldr	r3, [pc, #352]	; (a0d4 <clock_start+0x190>)
    9f72:	681b      	ldr	r3, [r3, #0]
    9f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    9f78:	2b00      	cmp	r3, #0
    9f7a:	d1f9      	bne.n	9f70 <clock_start+0x2c>

	/* turn off PLL0 */
	PLL0CON &= ~PLL0CON_PLLE0;
    9f7c:	4a53      	ldr	r2, [pc, #332]	; (a0cc <clock_start+0x188>)
    9f7e:	4b53      	ldr	r3, [pc, #332]	; (a0cc <clock_start+0x188>)
    9f80:	681b      	ldr	r3, [r3, #0]
    9f82:	f023 0301 	bic.w	r3, r3, #1
    9f86:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    9f88:	4b51      	ldr	r3, [pc, #324]	; (a0d0 <clock_start+0x18c>)
    9f8a:	22aa      	movs	r2, #170	; 0xaa
    9f8c:	601a      	str	r2, [r3, #0]
    9f8e:	4b50      	ldr	r3, [pc, #320]	; (a0d0 <clock_start+0x18c>)
    9f90:	2255      	movs	r2, #85	; 0x55
    9f92:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLE0_STAT);
    9f94:	bf00      	nop
    9f96:	4b4f      	ldr	r3, [pc, #316]	; (a0d4 <clock_start+0x190>)
    9f98:	681b      	ldr	r3, [r3, #0]
    9f9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    9f9e:	2b00      	cmp	r3, #0
    9fa0:	d1f9      	bne.n	9f96 <clock_start+0x52>

	/* temporarily set CPU clock divider to 1 */
	CCLKCFG = 0;
    9fa2:	4b4d      	ldr	r3, [pc, #308]	; (a0d8 <clock_start+0x194>)
    9fa4:	2200      	movs	r2, #0
    9fa6:	601a      	str	r2, [r3, #0]

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
    9fa8:	f7ff ffb0 	bl	9f0c <cc2400_reset>
	cc2400_set(IOCFG, (GIO_CARRIER_SENSE_N << 9) | (GIO_CLK_16M << 3));
    9fac:	2008      	movs	r0, #8
    9fae:	f241 5170 	movw	r1, #5488	; 0x1570
    9fb2:	f7ff fed9 	bl	9d68 <cc2400_set>
	cc2400_strobe(SXOSCON);
    9fb6:	2060      	movs	r0, #96	; 0x60
    9fb8:	f7ff ff98 	bl	9eec <cc2400_strobe>
	while (!(cc2400_status() & XOSC16M_STABLE));
    9fbc:	bf00      	nop
    9fbe:	f7ff ff8b 	bl	9ed8 <cc2400_status>
    9fc2:	4603      	mov	r3, r0
    9fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9fc8:	2b00      	cmp	r3, #0
    9fca:	d0f8      	beq.n	9fbe <clock_start+0x7a>

	/* activate main oscillator */
	SCS = SCS_OSCEN;
    9fcc:	4b43      	ldr	r3, [pc, #268]	; (a0dc <clock_start+0x198>)
    9fce:	2220      	movs	r2, #32
    9fd0:	601a      	str	r2, [r3, #0]
	while (!(SCS & SCS_OSCSTAT));
    9fd2:	bf00      	nop
    9fd4:	4b41      	ldr	r3, [pc, #260]	; (a0dc <clock_start+0x198>)
    9fd6:	681b      	ldr	r3, [r3, #0]
    9fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9fdc:	2b00      	cmp	r3, #0
    9fde:	d0f9      	beq.n	9fd4 <clock_start+0x90>
	 * connecting PLL0
 	 */
#ifdef TC13BADGE
	PCLKSEL0  = (1 << 2); /* TIMER0 at cclk (30 MHz) */
#else
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
    9fe0:	4b3f      	ldr	r3, [pc, #252]	; (a0e0 <clock_start+0x19c>)
    9fe2:	2208      	movs	r2, #8
    9fe4:	601a      	str	r2, [r3, #0]
#endif
	PCLKSEL1  = 0;
    9fe6:	4b3f      	ldr	r3, [pc, #252]	; (a0e4 <clock_start+0x1a0>)
    9fe8:	2200      	movs	r2, #0
    9fea:	601a      	str	r2, [r3, #0]

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    9fec:	4b36      	ldr	r3, [pc, #216]	; (a0c8 <clock_start+0x184>)
    9fee:	2201      	movs	r2, #1
    9ff0:	601a      	str	r2, [r3, #0]

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    9ff2:	4b3d      	ldr	r3, [pc, #244]	; (a0e8 <clock_start+0x1a4>)
    9ff4:	4a3d      	ldr	r2, [pc, #244]	; (a0ec <clock_start+0x1a8>)
    9ff6:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    9ff8:	4b35      	ldr	r3, [pc, #212]	; (a0d0 <clock_start+0x18c>)
    9ffa:	22aa      	movs	r2, #170	; 0xaa
    9ffc:	601a      	str	r2, [r3, #0]
    9ffe:	4b34      	ldr	r3, [pc, #208]	; (a0d0 <clock_start+0x18c>)
    a000:	2255      	movs	r2, #85	; 0x55
    a002:	601a      	str	r2, [r3, #0]

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    a004:	4a31      	ldr	r2, [pc, #196]	; (a0cc <clock_start+0x188>)
    a006:	4b31      	ldr	r3, [pc, #196]	; (a0cc <clock_start+0x188>)
    a008:	681b      	ldr	r3, [r3, #0]
    a00a:	f043 0301 	orr.w	r3, r3, #1
    a00e:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    a010:	4b2f      	ldr	r3, [pc, #188]	; (a0d0 <clock_start+0x18c>)
    a012:	22aa      	movs	r2, #170	; 0xaa
    a014:	601a      	str	r2, [r3, #0]
    a016:	4b2e      	ldr	r3, [pc, #184]	; (a0d0 <clock_start+0x18c>)
    a018:	2255      	movs	r2, #85	; 0x55
    a01a:	601a      	str	r2, [r3, #0]
	while (!(PLL0STAT & PLL0STAT_PLLE0_STAT));
    a01c:	bf00      	nop
    a01e:	4b2d      	ldr	r3, [pc, #180]	; (a0d4 <clock_start+0x190>)
    a020:	681b      	ldr	r3, [r3, #0]
    a022:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    a026:	2b00      	cmp	r3, #0
    a028:	d0f9      	beq.n	a01e <clock_start+0xda>

	/* set CPU clock divider */
	CCLKCFG = CCLKSEL;
    a02a:	4b2b      	ldr	r3, [pc, #172]	; (a0d8 <clock_start+0x194>)
    a02c:	2203      	movs	r2, #3
    a02e:	601a      	str	r2, [r3, #0]

	/* connect PLL0 */
	PLL0CON |= PLL0CON_PLLC0;
    a030:	4a26      	ldr	r2, [pc, #152]	; (a0cc <clock_start+0x188>)
    a032:	4b26      	ldr	r3, [pc, #152]	; (a0cc <clock_start+0x188>)
    a034:	681b      	ldr	r3, [r3, #0]
    a036:	f043 0302 	orr.w	r3, r3, #2
    a03a:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    a03c:	4b24      	ldr	r3, [pc, #144]	; (a0d0 <clock_start+0x18c>)
    a03e:	22aa      	movs	r2, #170	; 0xaa
    a040:	601a      	str	r2, [r3, #0]
    a042:	4b23      	ldr	r3, [pc, #140]	; (a0d0 <clock_start+0x18c>)
    a044:	2255      	movs	r2, #85	; 0x55
    a046:	601a      	str	r2, [r3, #0]
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));
    a048:	bf00      	nop
    a04a:	4b22      	ldr	r3, [pc, #136]	; (a0d4 <clock_start+0x190>)
    a04c:	681b      	ldr	r3, [r3, #0]
    a04e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    a052:	2b00      	cmp	r3, #0
    a054:	d0f9      	beq.n	a04a <clock_start+0x106>

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    a056:	4b26      	ldr	r3, [pc, #152]	; (a0f0 <clock_start+0x1ac>)
    a058:	2222      	movs	r2, #34	; 0x22
    a05a:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    a05c:	4b25      	ldr	r3, [pc, #148]	; (a0f4 <clock_start+0x1b0>)
    a05e:	22aa      	movs	r2, #170	; 0xaa
    a060:	601a      	str	r2, [r3, #0]
    a062:	4b24      	ldr	r3, [pc, #144]	; (a0f4 <clock_start+0x1b0>)
    a064:	2255      	movs	r2, #85	; 0x55
    a066:	601a      	str	r2, [r3, #0]

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    a068:	4a23      	ldr	r2, [pc, #140]	; (a0f8 <clock_start+0x1b4>)
    a06a:	4b23      	ldr	r3, [pc, #140]	; (a0f8 <clock_start+0x1b4>)
    a06c:	681b      	ldr	r3, [r3, #0]
    a06e:	f043 0301 	orr.w	r3, r3, #1
    a072:	6013      	str	r3, [r2, #0]
	PLL1FEED_SEQUENCE;
    a074:	4b1f      	ldr	r3, [pc, #124]	; (a0f4 <clock_start+0x1b0>)
    a076:	22aa      	movs	r2, #170	; 0xaa
    a078:	601a      	str	r2, [r3, #0]
    a07a:	4b1e      	ldr	r3, [pc, #120]	; (a0f4 <clock_start+0x1b0>)
    a07c:	2255      	movs	r2, #85	; 0x55
    a07e:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    a080:	bf00      	nop
    a082:	4b1e      	ldr	r3, [pc, #120]	; (a0fc <clock_start+0x1b8>)
    a084:	681b      	ldr	r3, [r3, #0]
    a086:	f403 7380 	and.w	r3, r3, #256	; 0x100
    a08a:	2b00      	cmp	r3, #0
    a08c:	d0f9      	beq.n	a082 <clock_start+0x13e>
	while (!(PLL1STAT & PLL1STAT_PLOCK1));
    a08e:	bf00      	nop
    a090:	4b1a      	ldr	r3, [pc, #104]	; (a0fc <clock_start+0x1b8>)
    a092:	681b      	ldr	r3, [r3, #0]
    a094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    a098:	2b00      	cmp	r3, #0
    a09a:	d0f9      	beq.n	a090 <clock_start+0x14c>

	/* connect PLL1 */
	PLL1CON |= PLL1CON_PLLC1;
    a09c:	4a16      	ldr	r2, [pc, #88]	; (a0f8 <clock_start+0x1b4>)
    a09e:	4b16      	ldr	r3, [pc, #88]	; (a0f8 <clock_start+0x1b4>)
    a0a0:	681b      	ldr	r3, [r3, #0]
    a0a2:	f043 0302 	orr.w	r3, r3, #2
    a0a6:	6013      	str	r3, [r2, #0]
	PLL1FEED_SEQUENCE;
    a0a8:	4b12      	ldr	r3, [pc, #72]	; (a0f4 <clock_start+0x1b0>)
    a0aa:	22aa      	movs	r2, #170	; 0xaa
    a0ac:	601a      	str	r2, [r3, #0]
    a0ae:	4b11      	ldr	r3, [pc, #68]	; (a0f4 <clock_start+0x1b0>)
    a0b0:	2255      	movs	r2, #85	; 0x55
    a0b2:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
    a0b4:	bf00      	nop
    a0b6:	4b11      	ldr	r3, [pc, #68]	; (a0fc <clock_start+0x1b8>)
    a0b8:	681b      	ldr	r3, [r3, #0]
    a0ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
    a0be:	2b00      	cmp	r3, #0
    a0c0:	d0f9      	beq.n	a0b6 <clock_start+0x172>
}
    a0c2:	bd80      	pop	{r7, pc}
    a0c4:	400fc000 	.word	0x400fc000
    a0c8:	400fc10c 	.word	0x400fc10c
    a0cc:	400fc080 	.word	0x400fc080
    a0d0:	400fc08c 	.word	0x400fc08c
    a0d4:	400fc088 	.word	0x400fc088
    a0d8:	400fc104 	.word	0x400fc104
    a0dc:	400fc1a0 	.word	0x400fc1a0
    a0e0:	400fc1a8 	.word	0x400fc1a8
    a0e4:	400fc1ac 	.word	0x400fc1ac
    a0e8:	400fc084 	.word	0x400fc084
    a0ec:	00010018 	.word	0x00010018
    a0f0:	400fc0a4 	.word	0x400fc0a4
    a0f4:	400fc0ac 	.word	0x400fc0ac
    a0f8:	400fc0a0 	.word	0x400fc0a0
    a0fc:	400fc0a8 	.word	0x400fc0a8

0000a100 <reset>:

/* reset the LPC17xx, the cc2400 will be handled by the boot code */
void reset()
{
    a100:	b580      	push	{r7, lr}
    a102:	af00      	add	r7, sp, #0
	all_pins_off();
    a104:	f7ff fcd0 	bl	9aa8 <all_pins_off>

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
    a108:	4b0a      	ldr	r3, [pc, #40]	; (a134 <reset+0x34>)
    a10a:	2202      	movs	r2, #2
    a10c:	601a      	str	r2, [r3, #0]
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    a10e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    a112:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a116:	681b      	ldr	r3, [r3, #0]
    a118:	f043 0303 	orr.w	r3, r3, #3
    a11c:	6013      	str	r3, [r2, #0]
	WDFEED_SEQUENCE;
    a11e:	4b06      	ldr	r3, [pc, #24]	; (a138 <reset+0x38>)
    a120:	22aa      	movs	r2, #170	; 0xaa
    a122:	601a      	str	r2, [r3, #0]
    a124:	4b04      	ldr	r3, [pc, #16]	; (a138 <reset+0x38>)
    a126:	2255      	movs	r2, #85	; 0x55
    a128:	601a      	str	r2, [r3, #0]
	
	/* Set watchdog timeout to 256us (minimum) */
	
	/* sleep for 1s (minimum) */
	wait(1);
    a12a:	2001      	movs	r0, #1
    a12c:	f7ff fc38 	bl	99a0 <wait>
}
    a130:	bd80      	pop	{r7, pc}
    a132:	bf00      	nop
    a134:	2009c03c 	.word	0x2009c03c
    a138:	40000008 	.word	0x40000008

0000a13c <_HandleRequest>:
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handles successfully
 */
static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
    a13c:	b580      	push	{r7, lr}
    a13e:	b088      	sub	sp, #32
    a140:	af00      	add	r7, sp, #0
    a142:	60f8      	str	r0, [r7, #12]
    a144:	60b9      	str	r1, [r7, #8]
    a146:	607a      	str	r2, [r7, #4]
	TFnHandleRequest *pfnHandler;
	int iType;
	
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
    a148:	68fb      	ldr	r3, [r7, #12]
    a14a:	781b      	ldrb	r3, [r3, #0]
    a14c:	095b      	lsrs	r3, r3, #5
    a14e:	b2db      	uxtb	r3, r3
    a150:	f003 0303 	and.w	r3, r3, #3
    a154:	61fb      	str	r3, [r7, #28]
	
	if(iType == REQTYPE_TYPE_VENDOR) {
    a156:	69fb      	ldr	r3, [r7, #28]
    a158:	2b02      	cmp	r3, #2
    a15a:	d10e      	bne.n	a17a <_HandleRequest+0x3e>
		BOOL fFilterStatus = FALSE;
    a15c:	2300      	movs	r3, #0
    a15e:	617b      	str	r3, [r7, #20]
		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
    a160:	f107 0314 	add.w	r3, r7, #20
    a164:	68f8      	ldr	r0, [r7, #12]
    a166:	4619      	mov	r1, r3
    a168:	68ba      	ldr	r2, [r7, #8]
    a16a:	687b      	ldr	r3, [r7, #4]
    a16c:	f000 fcd2 	bl	ab14 <USBFilterOsVendorMessage>
    a170:	4603      	mov	r3, r0
    a172:	2b00      	cmp	r3, #0
    a174:	d001      	beq.n	a17a <_HandleRequest+0x3e>
			return fFilterStatus;
    a176:	697b      	ldr	r3, [r7, #20]
    a178:	e00f      	b.n	a19a <_HandleRequest+0x5e>
		}
	}
	
	pfnHandler = apfnReqHandlers[iType];
    a17a:	4a0a      	ldr	r2, [pc, #40]	; (a1a4 <_HandleRequest+0x68>)
    a17c:	69fb      	ldr	r3, [r7, #28]
    a17e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a182:	61bb      	str	r3, [r7, #24]
	if (pfnHandler == NULL) {
    a184:	69bb      	ldr	r3, [r7, #24]
    a186:	2b00      	cmp	r3, #0
    a188:	d101      	bne.n	a18e <_HandleRequest+0x52>
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
    a18a:	2300      	movs	r3, #0
    a18c:	e005      	b.n	a19a <_HandleRequest+0x5e>
	}

	return pfnHandler(pSetup, piLen, ppbData);
    a18e:	69bb      	ldr	r3, [r7, #24]
    a190:	68f8      	ldr	r0, [r7, #12]
    a192:	68b9      	ldr	r1, [r7, #8]
    a194:	687a      	ldr	r2, [r7, #4]
    a196:	4798      	blx	r3
    a198:	4603      	mov	r3, r0
}
    a19a:	4618      	mov	r0, r3
    a19c:	3720      	adds	r7, #32
    a19e:	46bd      	mov	sp, r7
    a1a0:	bd80      	pop	{r7, pc}
    a1a2:	bf00      	nop
    a1a4:	10000a80 	.word	0x10000a80

0000a1a8 <StallControlPipe>:
	Local function to stall the control endpoint
	
	@param [in]	bEPStat	Endpoint status
 */
static void StallControlPipe(U8 bEPStat)
{
    a1a8:	b580      	push	{r7, lr}
    a1aa:	b084      	sub	sp, #16
    a1ac:	af00      	add	r7, sp, #0
    a1ae:	4603      	mov	r3, r0
    a1b0:	71fb      	strb	r3, [r7, #7]
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
    a1b2:	2080      	movs	r0, #128	; 0x80
    a1b4:	2101      	movs	r1, #1
    a1b6:	f000 fa83 	bl	a6c0 <USBHwEPStall>

// dump setup packet
	DBG("STALL on [");
	pb = (U8 *)&Setup;
    a1ba:	4b07      	ldr	r3, [pc, #28]	; (a1d8 <StallControlPipe+0x30>)
    a1bc:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
    a1be:	2300      	movs	r3, #0
    a1c0:	60fb      	str	r3, [r7, #12]
    a1c2:	e002      	b.n	a1ca <StallControlPipe+0x22>
    a1c4:	68fb      	ldr	r3, [r7, #12]
    a1c6:	3301      	adds	r3, #1
    a1c8:	60fb      	str	r3, [r7, #12]
    a1ca:	68fb      	ldr	r3, [r7, #12]
    a1cc:	2b07      	cmp	r3, #7
    a1ce:	ddf9      	ble.n	a1c4 <StallControlPipe+0x1c>
		DBG(" %02x", *pb++);
	}
	DBG("] stat=%x\n", bEPStat);
}
    a1d0:	3710      	adds	r7, #16
    a1d2:	46bd      	mov	sp, r7
    a1d4:	bd80      	pop	{r7, pc}
    a1d6:	bf00      	nop
    a1d8:	10000a6c 	.word	0x10000a6c

0000a1dc <DataIn>:

/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
    a1dc:	b580      	push	{r7, lr}
    a1de:	b082      	sub	sp, #8
    a1e0:	af00      	add	r7, sp, #0
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    a1e2:	4b0e      	ldr	r3, [pc, #56]	; (a21c <DataIn+0x40>)
    a1e4:	681b      	ldr	r3, [r3, #0]
    a1e6:	2b40      	cmp	r3, #64	; 0x40
    a1e8:	bfa8      	it	ge
    a1ea:	2340      	movge	r3, #64	; 0x40
    a1ec:	607b      	str	r3, [r7, #4]
	USBHwEPWrite(0x80, pbData, iChunk);
    a1ee:	4b0c      	ldr	r3, [pc, #48]	; (a220 <DataIn+0x44>)
    a1f0:	681a      	ldr	r2, [r3, #0]
    a1f2:	687b      	ldr	r3, [r7, #4]
    a1f4:	2080      	movs	r0, #128	; 0x80
    a1f6:	4611      	mov	r1, r2
    a1f8:	461a      	mov	r2, r3
    a1fa:	f000 fa85 	bl	a708 <USBHwEPWrite>
	pbData += iChunk;
    a1fe:	4b08      	ldr	r3, [pc, #32]	; (a220 <DataIn+0x44>)
    a200:	681a      	ldr	r2, [r3, #0]
    a202:	687b      	ldr	r3, [r7, #4]
    a204:	4413      	add	r3, r2
    a206:	4a06      	ldr	r2, [pc, #24]	; (a220 <DataIn+0x44>)
    a208:	6013      	str	r3, [r2, #0]
	iResidue -= iChunk;
    a20a:	4b04      	ldr	r3, [pc, #16]	; (a21c <DataIn+0x40>)
    a20c:	681a      	ldr	r2, [r3, #0]
    a20e:	687b      	ldr	r3, [r7, #4]
    a210:	1ad3      	subs	r3, r2, r3
    a212:	4a02      	ldr	r2, [pc, #8]	; (a21c <DataIn+0x40>)
    a214:	6013      	str	r3, [r2, #0]
}
    a216:	3708      	adds	r7, #8
    a218:	46bd      	mov	sp, r7
    a21a:	bd80      	pop	{r7, pc}
    a21c:	10000a78 	.word	0x10000a78
    a220:	10000a74 	.word	0x10000a74

0000a224 <USBHandleControlTransfer>:
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
    a224:	b580      	push	{r7, lr}
    a226:	b084      	sub	sp, #16
    a228:	af00      	add	r7, sp, #0
    a22a:	4603      	mov	r3, r0
    a22c:	460a      	mov	r2, r1
    a22e:	71fb      	strb	r3, [r7, #7]
    a230:	4613      	mov	r3, r2
    a232:	71bb      	strb	r3, [r7, #6]
	int iChunk, iType;

	if (bEP == 0x00) {
    a234:	79fb      	ldrb	r3, [r7, #7]
    a236:	2b00      	cmp	r3, #0
    a238:	f040 8091 	bne.w	a35e <USBHandleControlTransfer+0x13a>
		// OUT transfer
		if (bEPStat & EP_STATUS_SETUP) {
    a23c:	79bb      	ldrb	r3, [r7, #6]
    a23e:	f003 0304 	and.w	r3, r3, #4
    a242:	2b00      	cmp	r3, #0
    a244:	d041      	beq.n	a2ca <USBHandleControlTransfer+0xa6>
			// setup packet, reset request message state machine
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
    a246:	2000      	movs	r0, #0
    a248:	4949      	ldr	r1, [pc, #292]	; (a370 <USBHandleControlTransfer+0x14c>)
    a24a:	2208      	movs	r2, #8
    a24c:	f000 faaa 	bl	a7a4 <USBHwEPRead>
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    a250:	4b47      	ldr	r3, [pc, #284]	; (a370 <USBHandleControlTransfer+0x14c>)
    a252:	781b      	ldrb	r3, [r3, #0]
    a254:	095b      	lsrs	r3, r3, #5
    a256:	b2db      	uxtb	r3, r3
    a258:	f003 0303 	and.w	r3, r3, #3
    a25c:	60fb      	str	r3, [r7, #12]
			pbData = apbDataStore[iType];
    a25e:	4a45      	ldr	r2, [pc, #276]	; (a374 <USBHandleControlTransfer+0x150>)
    a260:	68fb      	ldr	r3, [r7, #12]
    a262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a266:	4a44      	ldr	r2, [pc, #272]	; (a378 <USBHandleControlTransfer+0x154>)
    a268:	6013      	str	r3, [r2, #0]
			iResidue = Setup.wLength;
    a26a:	4b41      	ldr	r3, [pc, #260]	; (a370 <USBHandleControlTransfer+0x14c>)
    a26c:	88db      	ldrh	r3, [r3, #6]
    a26e:	461a      	mov	r2, r3
    a270:	4b42      	ldr	r3, [pc, #264]	; (a37c <USBHandleControlTransfer+0x158>)
    a272:	601a      	str	r2, [r3, #0]
			iLen = Setup.wLength;
    a274:	4b3e      	ldr	r3, [pc, #248]	; (a370 <USBHandleControlTransfer+0x14c>)
    a276:	88db      	ldrh	r3, [r3, #6]
    a278:	461a      	mov	r2, r3
    a27a:	4b41      	ldr	r3, [pc, #260]	; (a380 <USBHandleControlTransfer+0x15c>)
    a27c:	601a      	str	r2, [r3, #0]

			if ((Setup.wLength == 0) ||
    a27e:	4b3c      	ldr	r3, [pc, #240]	; (a370 <USBHandleControlTransfer+0x14c>)
    a280:	88db      	ldrh	r3, [r3, #6]
    a282:	2b00      	cmp	r3, #0
    a284:	d007      	beq.n	a296 <USBHandleControlTransfer+0x72>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
    a286:	4b3a      	ldr	r3, [pc, #232]	; (a370 <USBHandleControlTransfer+0x14c>)
    a288:	781b      	ldrb	r3, [r3, #0]
    a28a:	09db      	lsrs	r3, r3, #7
    a28c:	b2db      	uxtb	r3, r3
    a28e:	f003 0301 	and.w	r3, r3, #1
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
			pbData = apbDataStore[iType];
			iResidue = Setup.wLength;
			iLen = Setup.wLength;

			if ((Setup.wLength == 0) ||
    a292:	2b00      	cmp	r3, #0
    a294:	d068      	beq.n	a368 <USBHandleControlTransfer+0x144>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				// ask installed handler to process request
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    a296:	4836      	ldr	r0, [pc, #216]	; (a370 <USBHandleControlTransfer+0x14c>)
    a298:	4939      	ldr	r1, [pc, #228]	; (a380 <USBHandleControlTransfer+0x15c>)
    a29a:	4a37      	ldr	r2, [pc, #220]	; (a378 <USBHandleControlTransfer+0x154>)
    a29c:	f7ff ff4e 	bl	a13c <_HandleRequest>
    a2a0:	4603      	mov	r3, r0
    a2a2:	2b00      	cmp	r3, #0
    a2a4:	d104      	bne.n	a2b0 <USBHandleControlTransfer+0x8c>
					DBG("_HandleRequest1 failed\n");
					StallControlPipe(bEPStat);
    a2a6:	79bb      	ldrb	r3, [r7, #6]
    a2a8:	4618      	mov	r0, r3
    a2aa:	f7ff ff7d 	bl	a1a8 <StallControlPipe>
					return;
    a2ae:	e05b      	b.n	a368 <USBHandleControlTransfer+0x144>
				}
				// send smallest of requested and offered length
				iResidue = MIN(iLen, Setup.wLength);
    a2b0:	4b2f      	ldr	r3, [pc, #188]	; (a370 <USBHandleControlTransfer+0x14c>)
    a2b2:	88db      	ldrh	r3, [r3, #6]
    a2b4:	461a      	mov	r2, r3
    a2b6:	4b32      	ldr	r3, [pc, #200]	; (a380 <USBHandleControlTransfer+0x15c>)
    a2b8:	681b      	ldr	r3, [r3, #0]
    a2ba:	4293      	cmp	r3, r2
    a2bc:	bfa8      	it	ge
    a2be:	4613      	movge	r3, r2
    a2c0:	4a2e      	ldr	r2, [pc, #184]	; (a37c <USBHandleControlTransfer+0x158>)
    a2c2:	6013      	str	r3, [r2, #0]
				// send first part (possibly a zero-length status message)
				DataIn();
    a2c4:	f7ff ff8a 	bl	a1dc <DataIn>
    a2c8:	e04e      	b.n	a368 <USBHandleControlTransfer+0x144>
			}
		}
		else {		
			if (iResidue > 0) {
    a2ca:	4b2c      	ldr	r3, [pc, #176]	; (a37c <USBHandleControlTransfer+0x158>)
    a2cc:	681b      	ldr	r3, [r3, #0]
    a2ce:	2b00      	cmp	r3, #0
    a2d0:	dd3e      	ble.n	a350 <USBHandleControlTransfer+0x12c>
				// store data
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
    a2d2:	4b29      	ldr	r3, [pc, #164]	; (a378 <USBHandleControlTransfer+0x154>)
    a2d4:	681a      	ldr	r2, [r3, #0]
    a2d6:	4b29      	ldr	r3, [pc, #164]	; (a37c <USBHandleControlTransfer+0x158>)
    a2d8:	681b      	ldr	r3, [r3, #0]
    a2da:	2000      	movs	r0, #0
    a2dc:	4611      	mov	r1, r2
    a2de:	461a      	mov	r2, r3
    a2e0:	f000 fa60 	bl	a7a4 <USBHwEPRead>
    a2e4:	60b8      	str	r0, [r7, #8]
				if (iChunk < 0) {
    a2e6:	68bb      	ldr	r3, [r7, #8]
    a2e8:	2b00      	cmp	r3, #0
    a2ea:	da04      	bge.n	a2f6 <USBHandleControlTransfer+0xd2>
					StallControlPipe(bEPStat);
    a2ec:	79bb      	ldrb	r3, [r7, #6]
    a2ee:	4618      	mov	r0, r3
    a2f0:	f7ff ff5a 	bl	a1a8 <StallControlPipe>
					return;
    a2f4:	e038      	b.n	a368 <USBHandleControlTransfer+0x144>
				}
				pbData += iChunk;
    a2f6:	4b20      	ldr	r3, [pc, #128]	; (a378 <USBHandleControlTransfer+0x154>)
    a2f8:	681a      	ldr	r2, [r3, #0]
    a2fa:	68bb      	ldr	r3, [r7, #8]
    a2fc:	4413      	add	r3, r2
    a2fe:	4a1e      	ldr	r2, [pc, #120]	; (a378 <USBHandleControlTransfer+0x154>)
    a300:	6013      	str	r3, [r2, #0]
				iResidue -= iChunk;
    a302:	4b1e      	ldr	r3, [pc, #120]	; (a37c <USBHandleControlTransfer+0x158>)
    a304:	681a      	ldr	r2, [r3, #0]
    a306:	68bb      	ldr	r3, [r7, #8]
    a308:	1ad3      	subs	r3, r2, r3
    a30a:	4a1c      	ldr	r2, [pc, #112]	; (a37c <USBHandleControlTransfer+0x158>)
    a30c:	6013      	str	r3, [r2, #0]
				if (iResidue == 0) {
    a30e:	4b1b      	ldr	r3, [pc, #108]	; (a37c <USBHandleControlTransfer+0x158>)
    a310:	681b      	ldr	r3, [r3, #0]
    a312:	2b00      	cmp	r3, #0
    a314:	d128      	bne.n	a368 <USBHandleControlTransfer+0x144>
					// received all, send data to handler
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    a316:	4b16      	ldr	r3, [pc, #88]	; (a370 <USBHandleControlTransfer+0x14c>)
    a318:	781b      	ldrb	r3, [r3, #0]
    a31a:	095b      	lsrs	r3, r3, #5
    a31c:	b2db      	uxtb	r3, r3
    a31e:	f003 0303 	and.w	r3, r3, #3
    a322:	60fb      	str	r3, [r7, #12]
					pbData = apbDataStore[iType];
    a324:	4a13      	ldr	r2, [pc, #76]	; (a374 <USBHandleControlTransfer+0x150>)
    a326:	68fb      	ldr	r3, [r7, #12]
    a328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a32c:	4a12      	ldr	r2, [pc, #72]	; (a378 <USBHandleControlTransfer+0x154>)
    a32e:	6013      	str	r3, [r2, #0]
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    a330:	480f      	ldr	r0, [pc, #60]	; (a370 <USBHandleControlTransfer+0x14c>)
    a332:	4913      	ldr	r1, [pc, #76]	; (a380 <USBHandleControlTransfer+0x15c>)
    a334:	4a10      	ldr	r2, [pc, #64]	; (a378 <USBHandleControlTransfer+0x154>)
    a336:	f7ff ff01 	bl	a13c <_HandleRequest>
    a33a:	4603      	mov	r3, r0
    a33c:	2b00      	cmp	r3, #0
    a33e:	d104      	bne.n	a34a <USBHandleControlTransfer+0x126>
						DBG("_HandleRequest2 failed\n");
						StallControlPipe(bEPStat);
    a340:	79bb      	ldrb	r3, [r7, #6]
    a342:	4618      	mov	r0, r3
    a344:	f7ff ff30 	bl	a1a8 <StallControlPipe>
						return;
    a348:	e00e      	b.n	a368 <USBHandleControlTransfer+0x144>
					}
					// send status to host
					DataIn();
    a34a:	f7ff ff47 	bl	a1dc <DataIn>
    a34e:	e00b      	b.n	a368 <USBHandleControlTransfer+0x144>
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    a350:	2000      	movs	r0, #0
    a352:	2100      	movs	r1, #0
    a354:	2200      	movs	r2, #0
    a356:	f000 fa25 	bl	a7a4 <USBHwEPRead>
    a35a:	60b8      	str	r0, [r7, #8]
    a35c:	e004      	b.n	a368 <USBHandleControlTransfer+0x144>
				DBG(iChunk > 0 ? "?" : "");
			}
		}
	}
	else if (bEP == 0x80) {
    a35e:	79fb      	ldrb	r3, [r7, #7]
    a360:	2b80      	cmp	r3, #128	; 0x80
    a362:	d101      	bne.n	a368 <USBHandleControlTransfer+0x144>
		// IN transfer
		// send more data if available (possibly a 0-length packet)
		DataIn();
    a364:	f7ff ff3a 	bl	a1dc <DataIn>
	}
	else {
		ASSERT(FALSE);
	}
}
    a368:	3710      	adds	r7, #16
    a36a:	46bd      	mov	sp, r7
    a36c:	bd80      	pop	{r7, pc}
    a36e:	bf00      	nop
    a370:	10000a6c 	.word	0x10000a6c
    a374:	10000a90 	.word	0x10000a90
    a378:	10000a74 	.word	0x10000a74
    a37c:	10000a78 	.word	0x10000a78
    a380:	10000a7c 	.word	0x10000a7c

0000a384 <USBRegisterRequestHandler>:
	@param [in]	iType			Type of request, e.g. REQTYPE_TYPE_STANDARD
	@param [in]	*pfnHandler		Callback function pointer
	@param [in]	*pbDataStore	Data storage area for this type of request
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
    a384:	b480      	push	{r7}
    a386:	b085      	sub	sp, #20
    a388:	af00      	add	r7, sp, #0
    a38a:	60f8      	str	r0, [r7, #12]
    a38c:	60b9      	str	r1, [r7, #8]
    a38e:	607a      	str	r2, [r7, #4]
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
    a390:	4907      	ldr	r1, [pc, #28]	; (a3b0 <USBRegisterRequestHandler+0x2c>)
    a392:	68fb      	ldr	r3, [r7, #12]
    a394:	68ba      	ldr	r2, [r7, #8]
    a396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	apbDataStore[iType] = pbDataStore;
    a39a:	4906      	ldr	r1, [pc, #24]	; (a3b4 <USBRegisterRequestHandler+0x30>)
    a39c:	68fb      	ldr	r3, [r7, #12]
    a39e:	687a      	ldr	r2, [r7, #4]
    a3a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a3a4:	3714      	adds	r7, #20
    a3a6:	46bd      	mov	sp, r7
    a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3ac:	4770      	bx	lr
    a3ae:	bf00      	nop
    a3b0:	10000a80 	.word	0x10000a80
    a3b4:	10000a90 	.word	0x10000a90

0000a3b8 <HandleUsbReset>:
	USB reset handler
	
	@param [in] bDevStatus	Device status
 */
static void HandleUsbReset(U8 bDevStatus)
{
    a3b8:	b480      	push	{r7}
    a3ba:	b083      	sub	sp, #12
    a3bc:	af00      	add	r7, sp, #0
    a3be:	4603      	mov	r3, r0
    a3c0:	71fb      	strb	r3, [r7, #7]
	if (bDevStatus & DEV_STATUS_RESET) {
		DBG("\n!");
	}
}
    a3c2:	370c      	adds	r7, #12
    a3c4:	46bd      	mov	sp, r7
    a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3ca:	4770      	bx	lr

0000a3cc <USBInit>:
	installing default callbacks.
	
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
    a3cc:	b580      	push	{r7, lr}
    a3ce:	af00      	add	r7, sp, #0
	// init hardware
	USBHwInit();
    a3d0:	f000 fb2a 	bl	aa28 <USBHwInit>
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
    a3d4:	480d      	ldr	r0, [pc, #52]	; (a40c <USBInit+0x40>)
    a3d6:	f000 f913 	bl	a600 <USBHwRegisterDevIntHandler>
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    a3da:	2000      	movs	r0, #0
    a3dc:	490c      	ldr	r1, [pc, #48]	; (a410 <USBInit+0x44>)
    a3de:	f000 f8dd 	bl	a59c <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
    a3e2:	2080      	movs	r0, #128	; 0x80
    a3e4:	490a      	ldr	r1, [pc, #40]	; (a410 <USBInit+0x44>)
    a3e6:	f000 f8d9 	bl	a59c <USBHwRegisterEPIntHandler>
	
	// setup control endpoints
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
    a3ea:	2000      	movs	r0, #0
    a3ec:	2140      	movs	r1, #64	; 0x40
    a3ee:	f000 f8b7 	bl	a560 <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
    a3f2:	2080      	movs	r0, #128	; 0x80
    a3f4:	2140      	movs	r1, #64	; 0x40
    a3f6:	f000 f8b3 	bl	a560 <USBHwEPConfig>
	
	// register standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
    a3fa:	2000      	movs	r0, #0
    a3fc:	4905      	ldr	r1, [pc, #20]	; (a414 <USBInit+0x48>)
    a3fe:	4a06      	ldr	r2, [pc, #24]	; (a418 <USBInit+0x4c>)
    a400:	f7ff ffc0 	bl	a384 <USBRegisterRequestHandler>

	return TRUE;
    a404:	2301      	movs	r3, #1
}
    a406:	4618      	mov	r0, r3
    a408:	bd80      	pop	{r7, pc}
    a40a:	bf00      	nop
    a40c:	0000a3b9 	.word	0x0000a3b9
    a410:	0000a225 	.word	0x0000a225
    a414:	0000b061 	.word	0x0000b061
    a418:	10000aa0 	.word	0x10000aa0

0000a41c <Wait4DevInt>:
    Local function to wait for a device interrupt (and clear it)
        
    @param [in] dwIntr      Bitmask of interrupts to wait for   
 */
static void Wait4DevInt(U32 dwIntr)
{
    a41c:	b480      	push	{r7}
    a41e:	b083      	sub	sp, #12
    a420:	af00      	add	r7, sp, #0
    a422:	6078      	str	r0, [r7, #4]
    // wait for specific interrupt
    while ((USBDevIntSt & dwIntr) != dwIntr);
    a424:	bf00      	nop
    a426:	4b07      	ldr	r3, [pc, #28]	; (a444 <Wait4DevInt+0x28>)
    a428:	681a      	ldr	r2, [r3, #0]
    a42a:	687b      	ldr	r3, [r7, #4]
    a42c:	401a      	ands	r2, r3
    a42e:	687b      	ldr	r3, [r7, #4]
    a430:	429a      	cmp	r2, r3
    a432:	d1f8      	bne.n	a426 <Wait4DevInt+0xa>
    // clear the interrupt bits
    USBDevIntClr = dwIntr;
    a434:	4a04      	ldr	r2, [pc, #16]	; (a448 <Wait4DevInt+0x2c>)
    a436:	687b      	ldr	r3, [r7, #4]
    a438:	6013      	str	r3, [r2, #0]
}
    a43a:	370c      	adds	r7, #12
    a43c:	46bd      	mov	sp, r7
    a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a442:	4770      	bx	lr
    a444:	5000c200 	.word	0x5000c200
    a448:	5000c208 	.word	0x5000c208

0000a44c <USBHwCmd>:
    Local function to send a command to the USB protocol engine
        
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    a44c:	b580      	push	{r7, lr}
    a44e:	b082      	sub	sp, #8
    a450:	af00      	add	r7, sp, #0
    a452:	4603      	mov	r3, r0
    a454:	71fb      	strb	r3, [r7, #7]
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    a456:	4b07      	ldr	r3, [pc, #28]	; (a474 <USBHwCmd+0x28>)
    a458:	2230      	movs	r2, #48	; 0x30
    a45a:	601a      	str	r2, [r3, #0]
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    a45c:	4a06      	ldr	r2, [pc, #24]	; (a478 <USBHwCmd+0x2c>)
    a45e:	79fb      	ldrb	r3, [r7, #7]
    a460:	041b      	lsls	r3, r3, #16
    a462:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    a466:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CCEMTY);
    a468:	2010      	movs	r0, #16
    a46a:	f7ff ffd7 	bl	a41c <Wait4DevInt>
}
    a46e:	3708      	adds	r7, #8
    a470:	46bd      	mov	sp, r7
    a472:	bd80      	pop	{r7, pc}
    a474:	5000c208 	.word	0x5000c208
    a478:	5000c210 	.word	0x5000c210

0000a47c <USBHwCmdWrite>:
        
    @param [in] bCmd        Command to send
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    a47c:	b580      	push	{r7, lr}
    a47e:	b082      	sub	sp, #8
    a480:	af00      	add	r7, sp, #0
    a482:	4603      	mov	r3, r0
    a484:	460a      	mov	r2, r1
    a486:	71fb      	strb	r3, [r7, #7]
    a488:	4613      	mov	r3, r2
    a48a:	80bb      	strh	r3, [r7, #4]
    // write command code
    USBHwCmd(bCmd);
    a48c:	79fb      	ldrb	r3, [r7, #7]
    a48e:	4618      	mov	r0, r3
    a490:	f7ff ffdc 	bl	a44c <USBHwCmd>

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    a494:	4a05      	ldr	r2, [pc, #20]	; (a4ac <USBHwCmdWrite+0x30>)
    a496:	88bb      	ldrh	r3, [r7, #4]
    a498:	041b      	lsls	r3, r3, #16
    a49a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a49e:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CCEMTY);
    a4a0:	2010      	movs	r0, #16
    a4a2:	f7ff ffbb 	bl	a41c <Wait4DevInt>
}
    a4a6:	3708      	adds	r7, #8
    a4a8:	46bd      	mov	sp, r7
    a4aa:	bd80      	pop	{r7, pc}
    a4ac:	5000c210 	.word	0x5000c210

0000a4b0 <USBHwCmdRead>:
    @param [in] bCmd        Command to send

    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    a4b0:	b580      	push	{r7, lr}
    a4b2:	b082      	sub	sp, #8
    a4b4:	af00      	add	r7, sp, #0
    a4b6:	4603      	mov	r3, r0
    a4b8:	71fb      	strb	r3, [r7, #7]
    // write command code
    USBHwCmd(bCmd);
    a4ba:	79fb      	ldrb	r3, [r7, #7]
    a4bc:	4618      	mov	r0, r3
    a4be:	f7ff ffc5 	bl	a44c <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    a4c2:	4a08      	ldr	r2, [pc, #32]	; (a4e4 <USBHwCmdRead+0x34>)
    a4c4:	79fb      	ldrb	r3, [r7, #7]
    a4c6:	041b      	lsls	r3, r3, #16
    a4c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    a4cc:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CDFULL);
    a4ce:	2020      	movs	r0, #32
    a4d0:	f7ff ffa4 	bl	a41c <Wait4DevInt>
    return USBCmdData;
    a4d4:	4b04      	ldr	r3, [pc, #16]	; (a4e8 <USBHwCmdRead+0x38>)
    a4d6:	681b      	ldr	r3, [r3, #0]
    a4d8:	b2db      	uxtb	r3, r3
}
    a4da:	4618      	mov	r0, r3
    a4dc:	3708      	adds	r7, #8
    a4de:	46bd      	mov	sp, r7
    a4e0:	bd80      	pop	{r7, pc}
    a4e2:	bf00      	nop
    a4e4:	5000c210 	.word	0x5000c210
    a4e8:	5000c214 	.word	0x5000c214

0000a4ec <USBHwEPRealize>:
        
    @param [in] idx         Endpoint index
    @param [in] wMaxPSize   Maximum packet size for this endpoint
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    a4ec:	b580      	push	{r7, lr}
    a4ee:	b082      	sub	sp, #8
    a4f0:	af00      	add	r7, sp, #0
    a4f2:	6078      	str	r0, [r7, #4]
    a4f4:	460b      	mov	r3, r1
    a4f6:	807b      	strh	r3, [r7, #2]
    USBReEp |= (1 << idx);
    a4f8:	490a      	ldr	r1, [pc, #40]	; (a524 <USBHwEPRealize+0x38>)
    a4fa:	4b0a      	ldr	r3, [pc, #40]	; (a524 <USBHwEPRealize+0x38>)
    a4fc:	681b      	ldr	r3, [r3, #0]
    a4fe:	2001      	movs	r0, #1
    a500:	687a      	ldr	r2, [r7, #4]
    a502:	fa00 f202 	lsl.w	r2, r0, r2
    a506:	4313      	orrs	r3, r2
    a508:	600b      	str	r3, [r1, #0]
#ifdef LPC17xx
    USBEpIn = idx;
    a50a:	4a07      	ldr	r2, [pc, #28]	; (a528 <USBHwEPRealize+0x3c>)
    a50c:	687b      	ldr	r3, [r7, #4]
    a50e:	6013      	str	r3, [r2, #0]
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    a510:	4a06      	ldr	r2, [pc, #24]	; (a52c <USBHwEPRealize+0x40>)
    a512:	887b      	ldrh	r3, [r7, #2]
    a514:	6013      	str	r3, [r2, #0]
    Wait4DevInt(EP_RLZED);
    a516:	f44f 7080 	mov.w	r0, #256	; 0x100
    a51a:	f7ff ff7f 	bl	a41c <Wait4DevInt>
}
    a51e:	3708      	adds	r7, #8
    a520:	46bd      	mov	sp, r7
    a522:	bd80      	pop	{r7, pc}
    a524:	5000c244 	.word	0x5000c244
    a528:	5000c248 	.word	0x5000c248
    a52c:	5000c24c 	.word	0x5000c24c

0000a530 <USBHwEPEnable>:
        
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    a530:	b580      	push	{r7, lr}
    a532:	b082      	sub	sp, #8
    a534:	af00      	add	r7, sp, #0
    a536:	6078      	str	r0, [r7, #4]
    a538:	6039      	str	r1, [r7, #0]
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    a53a:	687b      	ldr	r3, [r7, #4]
    a53c:	b2db      	uxtb	r3, r3
    a53e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a542:	b2db      	uxtb	r3, r3
    a544:	b2da      	uxtb	r2, r3
    a546:	683b      	ldr	r3, [r7, #0]
    a548:	2b00      	cmp	r3, #0
    a54a:	d001      	beq.n	a550 <USBHwEPEnable+0x20>
    a54c:	2300      	movs	r3, #0
    a54e:	e000      	b.n	a552 <USBHwEPEnable+0x22>
    a550:	2320      	movs	r3, #32
    a552:	4610      	mov	r0, r2
    a554:	4619      	mov	r1, r3
    a556:	f7ff ff91 	bl	a47c <USBHwCmdWrite>
}
    a55a:	3708      	adds	r7, #8
    a55c:	46bd      	mov	sp, r7
    a55e:	bd80      	pop	{r7, pc}

0000a560 <USBHwEPConfig>:
        
    @param [in] bEP             Endpoint number
    @param [in] wMaxPacketSize  Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
    a560:	b580      	push	{r7, lr}
    a562:	b084      	sub	sp, #16
    a564:	af00      	add	r7, sp, #0
    a566:	4603      	mov	r3, r0
    a568:	460a      	mov	r2, r1
    a56a:	71fb      	strb	r3, [r7, #7]
    a56c:	4613      	mov	r3, r2
    a56e:	80bb      	strh	r3, [r7, #4]
    int idx;
    
    idx = EP2IDX(bEP);
    a570:	79fb      	ldrb	r3, [r7, #7]
    a572:	f003 030f 	and.w	r3, r3, #15
    a576:	005b      	lsls	r3, r3, #1
    a578:	79fa      	ldrb	r2, [r7, #7]
    a57a:	09d2      	lsrs	r2, r2, #7
    a57c:	b2d2      	uxtb	r2, r2
    a57e:	4313      	orrs	r3, r2
    a580:	60fb      	str	r3, [r7, #12]
    
    // realise EP
    USBHwEPRealize(idx, wMaxPacketSize);
    a582:	88bb      	ldrh	r3, [r7, #4]
    a584:	68f8      	ldr	r0, [r7, #12]
    a586:	4619      	mov	r1, r3
    a588:	f7ff ffb0 	bl	a4ec <USBHwEPRealize>

    // enable EP
    USBHwEPEnable(idx, TRUE);
    a58c:	68f8      	ldr	r0, [r7, #12]
    a58e:	2101      	movs	r1, #1
    a590:	f7ff ffce 	bl	a530 <USBHwEPEnable>
}
    a594:	3710      	adds	r7, #16
    a596:	46bd      	mov	sp, r7
    a598:	bd80      	pop	{r7, pc}
    a59a:	bf00      	nop

0000a59c <USBHwRegisterEPIntHandler>:
        
    @param [in] bEP             Endpoint number
    @param [in] pfnHandler      Callback function
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
    a59c:	b480      	push	{r7}
    a59e:	b085      	sub	sp, #20
    a5a0:	af00      	add	r7, sp, #0
    a5a2:	4603      	mov	r3, r0
    a5a4:	6039      	str	r1, [r7, #0]
    a5a6:	71fb      	strb	r3, [r7, #7]
    int idx;
    
    idx = EP2IDX(bEP);
    a5a8:	79fb      	ldrb	r3, [r7, #7]
    a5aa:	f003 030f 	and.w	r3, r3, #15
    a5ae:	005b      	lsls	r3, r3, #1
    a5b0:	79fa      	ldrb	r2, [r7, #7]
    a5b2:	09d2      	lsrs	r2, r2, #7
    a5b4:	b2d2      	uxtb	r2, r2
    a5b6:	4313      	orrs	r3, r2
    a5b8:	60fb      	str	r3, [r7, #12]

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    a5ba:	68fb      	ldr	r3, [r7, #12]
    a5bc:	0fda      	lsrs	r2, r3, #31
    a5be:	4413      	add	r3, r2
    a5c0:	105b      	asrs	r3, r3, #1
    a5c2:	4619      	mov	r1, r3
    a5c4:	4a0b      	ldr	r2, [pc, #44]	; (a5f4 <USBHwRegisterEPIntHandler+0x58>)
    a5c6:	683b      	ldr	r3, [r7, #0]
    a5c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    a5cc:	490a      	ldr	r1, [pc, #40]	; (a5f8 <USBHwRegisterEPIntHandler+0x5c>)
    a5ce:	4b0a      	ldr	r3, [pc, #40]	; (a5f8 <USBHwRegisterEPIntHandler+0x5c>)
    a5d0:	681b      	ldr	r3, [r3, #0]
    a5d2:	2001      	movs	r0, #1
    a5d4:	68fa      	ldr	r2, [r7, #12]
    a5d6:	fa00 f202 	lsl.w	r2, r0, r2
    a5da:	4313      	orrs	r3, r2
    a5dc:	600b      	str	r3, [r1, #0]
    USBDevIntEn |= EP_SLOW;
    a5de:	4a07      	ldr	r2, [pc, #28]	; (a5fc <USBHwRegisterEPIntHandler+0x60>)
    a5e0:	4b06      	ldr	r3, [pc, #24]	; (a5fc <USBHwRegisterEPIntHandler+0x60>)
    a5e2:	681b      	ldr	r3, [r3, #0]
    a5e4:	f043 0304 	orr.w	r3, r3, #4
    a5e8:	6013      	str	r3, [r2, #0]
    
    DBG("Registered handler for EP 0x%x\n", bEP);
}
    a5ea:	3714      	adds	r7, #20
    a5ec:	46bd      	mov	sp, r7
    a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5f2:	4770      	bx	lr
    a5f4:	10000aac 	.word	0x10000aac
    a5f8:	5000c234 	.word	0x5000c234
    a5fc:	5000c204 	.word	0x5000c204

0000a600 <USBHwRegisterDevIntHandler>:
    Registers an device status callback
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    a600:	b480      	push	{r7}
    a602:	b083      	sub	sp, #12
    a604:	af00      	add	r7, sp, #0
    a606:	6078      	str	r0, [r7, #4]
    _pfnDevIntHandler = pfnHandler;
    a608:	4a06      	ldr	r2, [pc, #24]	; (a624 <USBHwRegisterDevIntHandler+0x24>)
    a60a:	687b      	ldr	r3, [r7, #4]
    a60c:	6013      	str	r3, [r2, #0]
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    a60e:	4a06      	ldr	r2, [pc, #24]	; (a628 <USBHwRegisterDevIntHandler+0x28>)
    a610:	4b05      	ldr	r3, [pc, #20]	; (a628 <USBHwRegisterDevIntHandler+0x28>)
    a612:	681b      	ldr	r3, [r3, #0]
    a614:	f043 0308 	orr.w	r3, r3, #8
    a618:	6013      	str	r3, [r2, #0]

    DBG("Registered handler for device status\n");
}
    a61a:	370c      	adds	r7, #12
    a61c:	46bd      	mov	sp, r7
    a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a622:	4770      	bx	lr
    a624:	10000aa8 	.word	0x10000aa8
    a628:	5000c204 	.word	0x5000c204

0000a62c <USBHwSetAddress>:
    Sets the USB address.
        
    @param [in] bAddr       Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
    a62c:	b580      	push	{r7, lr}
    a62e:	b082      	sub	sp, #8
    a630:	af00      	add	r7, sp, #0
    a632:	4603      	mov	r3, r0
    a634:	71fb      	strb	r3, [r7, #7]
    USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
    a636:	79fb      	ldrb	r3, [r7, #7]
    a638:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a63c:	b2db      	uxtb	r3, r3
    a63e:	b29b      	uxth	r3, r3
    a640:	20d0      	movs	r0, #208	; 0xd0
    a642:	4619      	mov	r1, r3
    a644:	f7ff ff1a 	bl	a47c <USBHwCmdWrite>
}
    a648:	3708      	adds	r7, #8
    a64a:	46bd      	mov	sp, r7
    a64c:	bd80      	pop	{r7, pc}
    a64e:	bf00      	nop

0000a650 <USBHwConnect>:
    Connects or disconnects from the USB bus
        
    @param [in] fConnect    If TRUE, connect, otherwise disconnect
 */
void USBHwConnect(BOOL fConnect)
{
    a650:	b580      	push	{r7, lr}
    a652:	b082      	sub	sp, #8
    a654:	af00      	add	r7, sp, #0
    a656:	6078      	str	r0, [r7, #4]
    FIO0CLR = (1<<14);
  else
    FIO0SET = (1<<14);
#endif
#endif
    USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
    a658:	687b      	ldr	r3, [r7, #4]
    a65a:	2b00      	cmp	r3, #0
    a65c:	bf14      	ite	ne
    a65e:	2301      	movne	r3, #1
    a660:	2300      	moveq	r3, #0
    a662:	b2db      	uxtb	r3, r3
    a664:	b29b      	uxth	r3, r3
    a666:	20fe      	movs	r0, #254	; 0xfe
    a668:	4619      	mov	r1, r3
    a66a:	f7ff ff07 	bl	a47c <USBHwCmdWrite>
}
    a66e:	3708      	adds	r7, #8
    a670:	46bd      	mov	sp, r7
    a672:	bd80      	pop	{r7, pc}

0000a674 <USBHwNakIntEnable>:
    from NAK interrupt by checking the bits in their bEPStatus argument.
    
    @param [in] bIntBits    Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
    a674:	b580      	push	{r7, lr}
    a676:	b082      	sub	sp, #8
    a678:	af00      	add	r7, sp, #0
    a67a:	4603      	mov	r3, r0
    a67c:	71fb      	strb	r3, [r7, #7]
    USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
    a67e:	79fb      	ldrb	r3, [r7, #7]
    a680:	b29b      	uxth	r3, r3
    a682:	20f3      	movs	r0, #243	; 0xf3
    a684:	4619      	mov	r1, r3
    a686:	f7ff fef9 	bl	a47c <USBHwCmdWrite>
}
    a68a:	3708      	adds	r7, #8
    a68c:	46bd      	mov	sp, r7
    a68e:	bd80      	pop	{r7, pc}

0000a690 <USBHwEPGetStatus>:
        
    @param [in] bEP     Endpoint number
    @return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8  USBHwEPGetStatus(U8 bEP)
{
    a690:	b580      	push	{r7, lr}
    a692:	b084      	sub	sp, #16
    a694:	af00      	add	r7, sp, #0
    a696:	4603      	mov	r3, r0
    a698:	71fb      	strb	r3, [r7, #7]
    int idx = EP2IDX(bEP);
    a69a:	79fb      	ldrb	r3, [r7, #7]
    a69c:	f003 030f 	and.w	r3, r3, #15
    a6a0:	005b      	lsls	r3, r3, #1
    a6a2:	79fa      	ldrb	r2, [r7, #7]
    a6a4:	09d2      	lsrs	r2, r2, #7
    a6a6:	b2d2      	uxtb	r2, r2
    a6a8:	4313      	orrs	r3, r2
    a6aa:	60fb      	str	r3, [r7, #12]

    return USBHwCmdRead(CMD_EP_SELECT | idx);
    a6ac:	68fb      	ldr	r3, [r7, #12]
    a6ae:	b2db      	uxtb	r3, r3
    a6b0:	4618      	mov	r0, r3
    a6b2:	f7ff fefd 	bl	a4b0 <USBHwCmdRead>
    a6b6:	4603      	mov	r3, r0
}
    a6b8:	4618      	mov	r0, r3
    a6ba:	3710      	adds	r7, #16
    a6bc:	46bd      	mov	sp, r7
    a6be:	bd80      	pop	{r7, pc}

0000a6c0 <USBHwEPStall>:
        
    @param [in] bEP     Endpoint number
    @param [in] fStall  TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
    a6c0:	b580      	push	{r7, lr}
    a6c2:	b084      	sub	sp, #16
    a6c4:	af00      	add	r7, sp, #0
    a6c6:	4603      	mov	r3, r0
    a6c8:	6039      	str	r1, [r7, #0]
    a6ca:	71fb      	strb	r3, [r7, #7]
    int idx = EP2IDX(bEP);
    a6cc:	79fb      	ldrb	r3, [r7, #7]
    a6ce:	f003 030f 	and.w	r3, r3, #15
    a6d2:	005b      	lsls	r3, r3, #1
    a6d4:	79fa      	ldrb	r2, [r7, #7]
    a6d6:	09d2      	lsrs	r2, r2, #7
    a6d8:	b2d2      	uxtb	r2, r2
    a6da:	4313      	orrs	r3, r2
    a6dc:	60fb      	str	r3, [r7, #12]

    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
    a6de:	68fb      	ldr	r3, [r7, #12]
    a6e0:	b2db      	uxtb	r3, r3
    a6e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a6e6:	b2db      	uxtb	r3, r3
    a6e8:	b2da      	uxtb	r2, r3
    a6ea:	683b      	ldr	r3, [r7, #0]
    a6ec:	2b00      	cmp	r3, #0
    a6ee:	bf14      	ite	ne
    a6f0:	2301      	movne	r3, #1
    a6f2:	2300      	moveq	r3, #0
    a6f4:	b2db      	uxtb	r3, r3
    a6f6:	b29b      	uxth	r3, r3
    a6f8:	4610      	mov	r0, r2
    a6fa:	4619      	mov	r1, r3
    a6fc:	f7ff febe 	bl	a47c <USBHwCmdWrite>
}
    a700:	3710      	adds	r7, #16
    a702:	46bd      	mov	sp, r7
    a704:	bd80      	pop	{r7, pc}
    a706:	bf00      	nop

0000a708 <USBHwEPWrite>:
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    a708:	b580      	push	{r7, lr}
    a70a:	b086      	sub	sp, #24
    a70c:	af00      	add	r7, sp, #0
    a70e:	4603      	mov	r3, r0
    a710:	60b9      	str	r1, [r7, #8]
    a712:	607a      	str	r2, [r7, #4]
    a714:	73fb      	strb	r3, [r7, #15]
    U32 idx;
    
    idx = EP2IDX(bEP);
    a716:	7bfb      	ldrb	r3, [r7, #15]
    a718:	f003 030f 	and.w	r3, r3, #15
    a71c:	005b      	lsls	r3, r3, #1
    a71e:	7bfa      	ldrb	r2, [r7, #15]
    a720:	09d2      	lsrs	r2, r2, #7
    a722:	b2d2      	uxtb	r2, r2
    a724:	4313      	orrs	r3, r2
    a726:	617b      	str	r3, [r7, #20]
    
    // set write enable for specific endpoint
    USBCtrl = WR_EN | ((bEP & 0xF) << 2);
    a728:	4a1b      	ldr	r2, [pc, #108]	; (a798 <USBHwEPWrite+0x90>)
    a72a:	7bfb      	ldrb	r3, [r7, #15]
    a72c:	f003 030f 	and.w	r3, r3, #15
    a730:	009b      	lsls	r3, r3, #2
    a732:	f043 0302 	orr.w	r3, r3, #2
    a736:	6013      	str	r3, [r2, #0]
    
    // set packet length
    USBTxPLen = iLen;
    a738:	4a18      	ldr	r2, [pc, #96]	; (a79c <USBHwEPWrite+0x94>)
    a73a:	687b      	ldr	r3, [r7, #4]
    a73c:	6013      	str	r3, [r2, #0]
    
    // write data
    while (USBCtrl & WR_EN) {
    a73e:	e015      	b.n	a76c <USBHwEPWrite+0x64>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    a740:	4917      	ldr	r1, [pc, #92]	; (a7a0 <USBHwEPWrite+0x98>)
    a742:	68bb      	ldr	r3, [r7, #8]
    a744:	3303      	adds	r3, #3
    a746:	781b      	ldrb	r3, [r3, #0]
    a748:	061a      	lsls	r2, r3, #24
    a74a:	68bb      	ldr	r3, [r7, #8]
    a74c:	3302      	adds	r3, #2
    a74e:	781b      	ldrb	r3, [r3, #0]
    a750:	041b      	lsls	r3, r3, #16
    a752:	431a      	orrs	r2, r3
    a754:	68bb      	ldr	r3, [r7, #8]
    a756:	3301      	adds	r3, #1
    a758:	781b      	ldrb	r3, [r3, #0]
    a75a:	021b      	lsls	r3, r3, #8
    a75c:	4313      	orrs	r3, r2
    a75e:	68ba      	ldr	r2, [r7, #8]
    a760:	7812      	ldrb	r2, [r2, #0]
    a762:	4313      	orrs	r3, r2
    a764:	600b      	str	r3, [r1, #0]
        pbBuf += 4;
    a766:	68bb      	ldr	r3, [r7, #8]
    a768:	3304      	adds	r3, #4
    a76a:	60bb      	str	r3, [r7, #8]
    
    // set packet length
    USBTxPLen = iLen;
    
    // write data
    while (USBCtrl & WR_EN) {
    a76c:	4b0a      	ldr	r3, [pc, #40]	; (a798 <USBHwEPWrite+0x90>)
    a76e:	681b      	ldr	r3, [r3, #0]
    a770:	f003 0302 	and.w	r3, r3, #2
    a774:	2b00      	cmp	r3, #0
    a776:	d1e3      	bne.n	a740 <USBHwEPWrite+0x38>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
        pbBuf += 4;
    }

    USBCtrl = 0;
    a778:	4b07      	ldr	r3, [pc, #28]	; (a798 <USBHwEPWrite+0x90>)
    a77a:	2200      	movs	r2, #0
    a77c:	601a      	str	r2, [r3, #0]

    // select endpoint and validate buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    a77e:	697b      	ldr	r3, [r7, #20]
    a780:	b2db      	uxtb	r3, r3
    a782:	4618      	mov	r0, r3
    a784:	f7ff fe62 	bl	a44c <USBHwCmd>
    USBHwCmd(CMD_EP_VALIDATE_BUFFER);
    a788:	20fa      	movs	r0, #250	; 0xfa
    a78a:	f7ff fe5f 	bl	a44c <USBHwCmd>
    
    return iLen;
    a78e:	687b      	ldr	r3, [r7, #4]
}
    a790:	4618      	mov	r0, r3
    a792:	3718      	adds	r7, #24
    a794:	46bd      	mov	sp, r7
    a796:	bd80      	pop	{r7, pc}
    a798:	5000c228 	.word	0x5000c228
    a79c:	5000c224 	.word	0x5000c224
    a7a0:	5000c21c 	.word	0x5000c21c

0000a7a4 <USBHwEPRead>:
            
    @return the number of bytes available in the EP (possibly more than iMaxLen),
    or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    a7a4:	b580      	push	{r7, lr}
    a7a6:	b088      	sub	sp, #32
    a7a8:	af00      	add	r7, sp, #0
    a7aa:	4603      	mov	r3, r0
    a7ac:	60b9      	str	r1, [r7, #8]
    a7ae:	607a      	str	r2, [r7, #4]
    a7b0:	73fb      	strb	r3, [r7, #15]
    U32 i, idx;
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    a7b2:	7bfb      	ldrb	r3, [r7, #15]
    a7b4:	f003 030f 	and.w	r3, r3, #15
    a7b8:	005b      	lsls	r3, r3, #1
    a7ba:	7bfa      	ldrb	r2, [r7, #15]
    a7bc:	09d2      	lsrs	r2, r2, #7
    a7be:	b2d2      	uxtb	r2, r2
    a7c0:	4313      	orrs	r3, r2
    a7c2:	617b      	str	r3, [r7, #20]
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    a7c4:	4a27      	ldr	r2, [pc, #156]	; (a864 <USBHwEPRead+0xc0>)
    a7c6:	7bfb      	ldrb	r3, [r7, #15]
    a7c8:	f003 030f 	and.w	r3, r3, #15
    a7cc:	009b      	lsls	r3, r3, #2
    a7ce:	f043 0301 	orr.w	r3, r3, #1
    a7d2:	6013      	str	r3, [r2, #0]
    
    // wait for PKT_RDY
    do {
        dwLen = USBRxPLen;
    a7d4:	4b24      	ldr	r3, [pc, #144]	; (a868 <USBHwEPRead+0xc4>)
    a7d6:	681b      	ldr	r3, [r3, #0]
    a7d8:	613b      	str	r3, [r7, #16]
    } while ((dwLen & PKT_RDY) == 0);
    a7da:	693b      	ldr	r3, [r7, #16]
    a7dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    a7e0:	2b00      	cmp	r3, #0
    a7e2:	d0f7      	beq.n	a7d4 <USBHwEPRead+0x30>
    
    // packet valid?
    if ((dwLen & DV) == 0) {
    a7e4:	693b      	ldr	r3, [r7, #16]
    a7e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    a7ea:	2b00      	cmp	r3, #0
    a7ec:	d102      	bne.n	a7f4 <USBHwEPRead+0x50>
        return -1;
    a7ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a7f2:	e033      	b.n	a85c <USBHwEPRead+0xb8>
    }
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    a7f4:	693b      	ldr	r3, [r7, #16]
    a7f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    a7fa:	613b      	str	r3, [r7, #16]
    
    // get data
    dwData = 0;
    a7fc:	2300      	movs	r3, #0
    a7fe:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < dwLen; i++) {
    a800:	2300      	movs	r3, #0
    a802:	61fb      	str	r3, [r7, #28]
    a804:	e01a      	b.n	a83c <USBHwEPRead+0x98>
        if ((i % 4) == 0) {
    a806:	69fb      	ldr	r3, [r7, #28]
    a808:	f003 0303 	and.w	r3, r3, #3
    a80c:	2b00      	cmp	r3, #0
    a80e:	d102      	bne.n	a816 <USBHwEPRead+0x72>
            dwData = USBRxData;
    a810:	4b16      	ldr	r3, [pc, #88]	; (a86c <USBHwEPRead+0xc8>)
    a812:	681b      	ldr	r3, [r3, #0]
    a814:	61bb      	str	r3, [r7, #24]
        }
        if ((pbBuf != NULL) && (i < iMaxLen)) {
    a816:	68bb      	ldr	r3, [r7, #8]
    a818:	2b00      	cmp	r3, #0
    a81a:	d009      	beq.n	a830 <USBHwEPRead+0x8c>
    a81c:	69fa      	ldr	r2, [r7, #28]
    a81e:	687b      	ldr	r3, [r7, #4]
    a820:	429a      	cmp	r2, r3
    a822:	d205      	bcs.n	a830 <USBHwEPRead+0x8c>
            pbBuf[i] = dwData & 0xFF;
    a824:	68ba      	ldr	r2, [r7, #8]
    a826:	69fb      	ldr	r3, [r7, #28]
    a828:	4413      	add	r3, r2
    a82a:	69ba      	ldr	r2, [r7, #24]
    a82c:	b2d2      	uxtb	r2, r2
    a82e:	701a      	strb	r2, [r3, #0]
        }
        dwData >>= 8;
    a830:	69bb      	ldr	r3, [r7, #24]
    a832:	0a1b      	lsrs	r3, r3, #8
    a834:	61bb      	str	r3, [r7, #24]
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    for (i = 0; i < dwLen; i++) {
    a836:	69fb      	ldr	r3, [r7, #28]
    a838:	3301      	adds	r3, #1
    a83a:	61fb      	str	r3, [r7, #28]
    a83c:	69fa      	ldr	r2, [r7, #28]
    a83e:	693b      	ldr	r3, [r7, #16]
    a840:	429a      	cmp	r2, r3
    a842:	d3e0      	bcc.n	a806 <USBHwEPRead+0x62>
        }
        dwData >>= 8;
    }

    // make sure RD_EN is clear
    USBCtrl = 0;
    a844:	4b07      	ldr	r3, [pc, #28]	; (a864 <USBHwEPRead+0xc0>)
    a846:	2200      	movs	r2, #0
    a848:	601a      	str	r2, [r3, #0]

    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    a84a:	697b      	ldr	r3, [r7, #20]
    a84c:	b2db      	uxtb	r3, r3
    a84e:	4618      	mov	r0, r3
    a850:	f7ff fdfc 	bl	a44c <USBHwCmd>
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    a854:	20f2      	movs	r0, #242	; 0xf2
    a856:	f7ff fdf9 	bl	a44c <USBHwCmd>
    
    return dwLen;
    a85a:	693b      	ldr	r3, [r7, #16]
}
    a85c:	4618      	mov	r0, r3
    a85e:	3720      	adds	r7, #32
    a860:	46bd      	mov	sp, r7
    a862:	bd80      	pop	{r7, pc}
    a864:	5000c228 	.word	0x5000c228
    a868:	5000c220 	.word	0x5000c220
    a86c:	5000c218 	.word	0x5000c218

0000a870 <USBHwConfigDevice>:
    'configured' bit is set in the device status register.
        
    @param [in] fConfigured If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
    a870:	b580      	push	{r7, lr}
    a872:	b082      	sub	sp, #8
    a874:	af00      	add	r7, sp, #0
    a876:	6078      	str	r0, [r7, #4]
    // set configured bit
    USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
    a878:	687b      	ldr	r3, [r7, #4]
    a87a:	2b00      	cmp	r3, #0
    a87c:	bf14      	ite	ne
    a87e:	2301      	movne	r3, #1
    a880:	2300      	moveq	r3, #0
    a882:	b2db      	uxtb	r3, r3
    a884:	b29b      	uxth	r3, r3
    a886:	20d8      	movs	r0, #216	; 0xd8
    a888:	4619      	mov	r1, r3
    a88a:	f7ff fdf7 	bl	a47c <USBHwCmdWrite>
}
    a88e:	3708      	adds	r7, #8
    a890:	46bd      	mov	sp, r7
    a892:	bd80      	pop	{r7, pc}

0000a894 <USBHwISR>:
    @todo Get all 11 bits of frame number instead of just 8

    Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
    a894:	b580      	push	{r7, lr}
    a896:	b086      	sub	sp, #24
    a898:	af00      	add	r7, sp, #0

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

    // handle device interrupts
    dwStatus = USBDevIntSt;
    a89a:	4b5b      	ldr	r3, [pc, #364]	; (aa08 <USBHwISR+0x174>)
    a89c:	681b      	ldr	r3, [r3, #0]
    a89e:	613b      	str	r3, [r7, #16]
    
    // frame interrupt
    if (dwStatus & FRAME) {
    a8a0:	693b      	ldr	r3, [r7, #16]
    a8a2:	f003 0301 	and.w	r3, r3, #1
    a8a6:	2b00      	cmp	r3, #0
    a8a8:	d010      	beq.n	a8cc <USBHwISR+0x38>
        // clear int
        USBDevIntClr = FRAME;
    a8aa:	4b58      	ldr	r3, [pc, #352]	; (aa0c <USBHwISR+0x178>)
    a8ac:	2201      	movs	r2, #1
    a8ae:	601a      	str	r2, [r3, #0]
        // call handler
        if (_pfnFrameHandler != NULL) {
    a8b0:	4b57      	ldr	r3, [pc, #348]	; (aa10 <USBHwISR+0x17c>)
    a8b2:	681b      	ldr	r3, [r3, #0]
    a8b4:	2b00      	cmp	r3, #0
    a8b6:	d009      	beq.n	a8cc <USBHwISR+0x38>
            wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
    a8b8:	20f5      	movs	r0, #245	; 0xf5
    a8ba:	f7ff fdf9 	bl	a4b0 <USBHwCmdRead>
    a8be:	4603      	mov	r3, r0
    a8c0:	81fb      	strh	r3, [r7, #14]
            _pfnFrameHandler(wFrame);
    a8c2:	4b53      	ldr	r3, [pc, #332]	; (aa10 <USBHwISR+0x17c>)
    a8c4:	681b      	ldr	r3, [r3, #0]
    a8c6:	89fa      	ldrh	r2, [r7, #14]
    a8c8:	4610      	mov	r0, r2
    a8ca:	4798      	blx	r3
        }
    }
    
    // device status interrupt
    if (dwStatus & DEV_STAT) {
    a8cc:	693b      	ldr	r3, [r7, #16]
    a8ce:	f003 0308 	and.w	r3, r3, #8
    a8d2:	2b00      	cmp	r3, #0
    a8d4:	d02b      	beq.n	a92e <USBHwISR+0x9a>
        /*  Clear DEV_STAT interrupt before reading DEV_STAT register.
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
    a8d6:	4b4d      	ldr	r3, [pc, #308]	; (aa0c <USBHwISR+0x178>)
    a8d8:	2208      	movs	r2, #8
    a8da:	601a      	str	r2, [r3, #0]
        bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
    a8dc:	20fe      	movs	r0, #254	; 0xfe
    a8de:	f7ff fde7 	bl	a4b0 <USBHwCmdRead>
    a8e2:	4603      	mov	r3, r0
    a8e4:	737b      	strb	r3, [r7, #13]
        if (bDevStat & (CON_CH | SUS_CH | RST)) {
    a8e6:	7b7b      	ldrb	r3, [r7, #13]
    a8e8:	f003 031a 	and.w	r3, r3, #26
    a8ec:	2b00      	cmp	r3, #0
    a8ee:	d01e      	beq.n	a92e <USBHwISR+0x9a>
            // convert device status into something HW independent
            bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
    a8f0:	7b7b      	ldrb	r3, [r7, #13]
    a8f2:	f003 0301 	and.w	r3, r3, #1
    a8f6:	2b00      	cmp	r3, #0
    a8f8:	bf14      	ite	ne
    a8fa:	2301      	movne	r3, #1
    a8fc:	2300      	moveq	r3, #0
    a8fe:	b2db      	uxtb	r3, r3
    a900:	b2da      	uxtb	r2, r3
    a902:	7b7b      	ldrb	r3, [r7, #13]
    a904:	f003 0304 	and.w	r3, r3, #4
    a908:	b2db      	uxtb	r3, r3
    a90a:	4313      	orrs	r3, r2
    a90c:	b2da      	uxtb	r2, r3
    a90e:	7b7b      	ldrb	r3, [r7, #13]
    a910:	f003 0310 	and.w	r3, r3, #16
    a914:	b2db      	uxtb	r3, r3
    a916:	4313      	orrs	r3, r2
    a918:	b2db      	uxtb	r3, r3
    a91a:	733b      	strb	r3, [r7, #12]
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
                    ((bDevStat & RST) ? DEV_STATUS_RESET : 0);
            // call handler
            if (_pfnDevIntHandler != NULL) {
    a91c:	4b3d      	ldr	r3, [pc, #244]	; (aa14 <USBHwISR+0x180>)
    a91e:	681b      	ldr	r3, [r3, #0]
    a920:	2b00      	cmp	r3, #0
    a922:	d004      	beq.n	a92e <USBHwISR+0x9a>
DEBUG_LED_ON(8);        
                _pfnDevIntHandler(bStat);
    a924:	4b3b      	ldr	r3, [pc, #236]	; (aa14 <USBHwISR+0x180>)
    a926:	681b      	ldr	r3, [r3, #0]
    a928:	7b3a      	ldrb	r2, [r7, #12]
    a92a:	4610      	mov	r0, r2
    a92c:	4798      	blx	r3
            }
        }
    }
    
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
    a92e:	693b      	ldr	r3, [r7, #16]
    a930:	f003 0304 	and.w	r3, r3, #4
    a934:	2b00      	cmp	r3, #0
    a936:	d063      	beq.n	aa00 <USBHwISR+0x16c>
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
    a938:	4b34      	ldr	r3, [pc, #208]	; (aa0c <USBHwISR+0x178>)
    a93a:	2204      	movs	r2, #4
    a93c:	601a      	str	r2, [r3, #0]
        // check all endpoints
        for (i = 0; i < 32; i++) {
    a93e:	2300      	movs	r3, #0
    a940:	617b      	str	r3, [r7, #20]
    a942:	e05a      	b.n	a9fa <USBHwISR+0x166>
            dwIntBit = (1 << i);
    a944:	2201      	movs	r2, #1
    a946:	697b      	ldr	r3, [r7, #20]
    a948:	fa02 f303 	lsl.w	r3, r2, r3
    a94c:	60bb      	str	r3, [r7, #8]
            if (USBEpIntSt & dwIntBit) {
    a94e:	4b32      	ldr	r3, [pc, #200]	; (aa18 <USBHwISR+0x184>)
    a950:	681a      	ldr	r2, [r3, #0]
    a952:	68bb      	ldr	r3, [r7, #8]
    a954:	4013      	ands	r3, r2
    a956:	2b00      	cmp	r3, #0
    a958:	d04c      	beq.n	a9f4 <USBHwISR+0x160>
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    a95a:	4a30      	ldr	r2, [pc, #192]	; (aa1c <USBHwISR+0x188>)
    a95c:	68bb      	ldr	r3, [r7, #8]
    a95e:	6013      	str	r3, [r2, #0]
                Wait4DevInt(CDFULL);
    a960:	2020      	movs	r0, #32
    a962:	f7ff fd5b 	bl	a41c <Wait4DevInt>
                bEPStat = USBCmdData;
    a966:	4b2e      	ldr	r3, [pc, #184]	; (aa20 <USBHwISR+0x18c>)
    a968:	681b      	ldr	r3, [r3, #0]
    a96a:	71fb      	strb	r3, [r7, #7]
                // convert EP pipe stat into something HW independent
                bStat = ((bEPStat & EPSTAT_FE) ? EP_STATUS_DATA : 0) |
    a96c:	79fb      	ldrb	r3, [r7, #7]
    a96e:	f003 0301 	and.w	r3, r3, #1
    a972:	2b00      	cmp	r3, #0
    a974:	bf14      	ite	ne
    a976:	2301      	movne	r3, #1
    a978:	2300      	moveq	r3, #0
    a97a:	b2db      	uxtb	r3, r3
    a97c:	b2da      	uxtb	r2, r3
    a97e:	79fb      	ldrb	r3, [r7, #7]
    a980:	f003 0302 	and.w	r3, r3, #2
    a984:	b2db      	uxtb	r3, r3
    a986:	4313      	orrs	r3, r2
    a988:	b2da      	uxtb	r2, r3
    a98a:	79fb      	ldrb	r3, [r7, #7]
    a98c:	f003 0304 	and.w	r3, r3, #4
    a990:	b2db      	uxtb	r3, r3
    a992:	4313      	orrs	r3, r2
    a994:	b2da      	uxtb	r2, r3
    a996:	79fb      	ldrb	r3, [r7, #7]
    a998:	f003 0310 	and.w	r3, r3, #16
    a99c:	b2db      	uxtb	r3, r3
    a99e:	4313      	orrs	r3, r2
    a9a0:	b2da      	uxtb	r2, r3
    a9a2:	79fb      	ldrb	r3, [r7, #7]
    a9a4:	f003 0308 	and.w	r3, r3, #8
    a9a8:	b2db      	uxtb	r3, r3
    a9aa:	4313      	orrs	r3, r2
    a9ac:	b2db      	uxtb	r3, r3
    a9ae:	733b      	strb	r3, [r7, #12]
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    a9b0:	697b      	ldr	r3, [r7, #20]
    a9b2:	0fda      	lsrs	r2, r3, #31
    a9b4:	4413      	add	r3, r2
    a9b6:	105b      	asrs	r3, r3, #1
    a9b8:	461a      	mov	r2, r3
    a9ba:	4b1a      	ldr	r3, [pc, #104]	; (aa24 <USBHwISR+0x190>)
    a9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a9c0:	2b00      	cmp	r3, #0
    a9c2:	d017      	beq.n	a9f4 <USBHwISR+0x160>
DEBUG_LED_ON(10);       
                    _apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
    a9c4:	697b      	ldr	r3, [r7, #20]
    a9c6:	0fda      	lsrs	r2, r3, #31
    a9c8:	4413      	add	r3, r2
    a9ca:	105b      	asrs	r3, r3, #1
    a9cc:	461a      	mov	r2, r3
    a9ce:	4b15      	ldr	r3, [pc, #84]	; (aa24 <USBHwISR+0x190>)
    a9d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a9d4:	697a      	ldr	r2, [r7, #20]
    a9d6:	01d2      	lsls	r2, r2, #7
    a9d8:	b2d1      	uxtb	r1, r2
    a9da:	697a      	ldr	r2, [r7, #20]
    a9dc:	1052      	asrs	r2, r2, #1
    a9de:	b2d2      	uxtb	r2, r2
    a9e0:	f002 020f 	and.w	r2, r2, #15
    a9e4:	b2d2      	uxtb	r2, r2
    a9e6:	430a      	orrs	r2, r1
    a9e8:	b2d2      	uxtb	r2, r2
    a9ea:	b2d1      	uxtb	r1, r2
    a9ec:	7b3a      	ldrb	r2, [r7, #12]
    a9ee:	4608      	mov	r0, r1
    a9f0:	4611      	mov	r1, r2
    a9f2:	4798      	blx	r3
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
        // check all endpoints
        for (i = 0; i < 32; i++) {
    a9f4:	697b      	ldr	r3, [r7, #20]
    a9f6:	3301      	adds	r3, #1
    a9f8:	617b      	str	r3, [r7, #20]
    a9fa:	697b      	ldr	r3, [r7, #20]
    a9fc:	2b1f      	cmp	r3, #31
    a9fe:	dda1      	ble.n	a944 <USBHwISR+0xb0>
            }
        }
    }
    
DEBUG_LED_OFF(9);       
}
    aa00:	3718      	adds	r7, #24
    aa02:	46bd      	mov	sp, r7
    aa04:	bd80      	pop	{r7, pc}
    aa06:	bf00      	nop
    aa08:	5000c200 	.word	0x5000c200
    aa0c:	5000c208 	.word	0x5000c208
    aa10:	10000aec 	.word	0x10000aec
    aa14:	10000aa8 	.word	0x10000aa8
    aa18:	5000c230 	.word	0x5000c230
    aa1c:	5000c238 	.word	0x5000c238
    aa20:	5000c214 	.word	0x5000c214
    aa24:	10000aac 	.word	0x10000aac

0000aa28 <USBHwInit>:
    acts as a pull-up and so prevents detection of USB disconnect.
        
    @return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
    aa28:	b580      	push	{r7, lr}
    aa2a:	af00      	add	r7, sp, #0
#ifdef LPC17xx
	// P2.9 is USB_CONNECT
    PINSEL4 = (PINSEL4 & ~(3 << 18)) | (1 << 18);
    aa2c:	4a2d      	ldr	r2, [pc, #180]	; (aae4 <USBHwInit+0xbc>)
    aa2e:	4b2d      	ldr	r3, [pc, #180]	; (aae4 <USBHwInit+0xbc>)
    aa30:	681b      	ldr	r3, [r3, #0]
    aa32:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    aa36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    aa3a:	6013      	str	r3, [r2, #0]

	// P1.18 is USB_UP_LED
    PINSEL3 = (PINSEL3 & ~(3 << 4)) | (1 << 4);
    aa3c:	4a2a      	ldr	r2, [pc, #168]	; (aae8 <USBHwInit+0xc0>)
    aa3e:	4b2a      	ldr	r3, [pc, #168]	; (aae8 <USBHwInit+0xc0>)
    aa40:	681b      	ldr	r3, [r3, #0]
    aa42:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    aa46:	f043 0310 	orr.w	r3, r3, #16
    aa4a:	6013      	str	r3, [r2, #0]

	// P1.30 is VBUS
    PINSEL3 = (PINSEL3 & ~(3 << 28)) | (2 << 28);
    aa4c:	4a26      	ldr	r2, [pc, #152]	; (aae8 <USBHwInit+0xc0>)
    aa4e:	4b26      	ldr	r3, [pc, #152]	; (aae8 <USBHwInit+0xc0>)
    aa50:	681b      	ldr	r3, [r3, #0]
    aa52:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    aa56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    aa5a:	6013      	str	r3, [r2, #0]

	// P0.29 is USB_D+
    PINSEL1 = (PINSEL1 & ~(3 << 26)) | (1 << 26);
    aa5c:	4a23      	ldr	r2, [pc, #140]	; (aaec <USBHwInit+0xc4>)
    aa5e:	4b23      	ldr	r3, [pc, #140]	; (aaec <USBHwInit+0xc4>)
    aa60:	681b      	ldr	r3, [r3, #0]
    aa62:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
    aa66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    aa6a:	6013      	str	r3, [r2, #0]

	// P0.30 is USB_D-
    PINSEL1 = (PINSEL1 & ~(3 << 28)) | (1 << 28);
    aa6c:	4a1f      	ldr	r2, [pc, #124]	; (aaec <USBHwInit+0xc4>)
    aa6e:	4b1f      	ldr	r3, [pc, #124]	; (aaec <USBHwInit+0xc4>)
    aa70:	681b      	ldr	r3, [r3, #0]
    aa72:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    aa76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    aa7a:	6013      	str	r3, [r2, #0]

	// enable PUSB
	PCONP |= PCONP_PCUSB;
    aa7c:	4a1c      	ldr	r2, [pc, #112]	; (aaf0 <USBHwInit+0xc8>)
    aa7e:	4b1c      	ldr	r3, [pc, #112]	; (aaf0 <USBHwInit+0xc8>)
    aa80:	681b      	ldr	r3, [r3, #0]
    aa82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    aa86:	6013      	str	r3, [r2, #0]

	/* enable the USB controller clocks */
    USBClkCtrl |= (USBClkCtrl_DEV_CLK_EN | USBClkCtrl_AHB_CLK_EN);
    aa88:	4a1a      	ldr	r2, [pc, #104]	; (aaf4 <USBHwInit+0xcc>)
    aa8a:	4b1a      	ldr	r3, [pc, #104]	; (aaf4 <USBHwInit+0xcc>)
    aa8c:	681b      	ldr	r3, [r3, #0]
    aa8e:	f043 0312 	orr.w	r3, r3, #18
    aa92:	6013      	str	r3, [r2, #0]
    while (!(USBClkSt & USBClkSt_DEV_CLK_ON));
    aa94:	bf00      	nop
    aa96:	4b18      	ldr	r3, [pc, #96]	; (aaf8 <USBHwInit+0xd0>)
    aa98:	681b      	ldr	r3, [r3, #0]
    aa9a:	f003 0302 	and.w	r3, r3, #2
    aa9e:	2b00      	cmp	r3, #0
    aaa0:	d0f9      	beq.n	aa96 <USBHwInit+0x6e>
    while (!(USBClkSt & USBClkSt_AHB_CLK_ON));
    aaa2:	bf00      	nop
    aaa4:	4b14      	ldr	r3, [pc, #80]	; (aaf8 <USBHwInit+0xd0>)
    aaa6:	681b      	ldr	r3, [r3, #0]
    aaa8:	f003 0310 	and.w	r3, r3, #16
    aaac:	2b00      	cmp	r3, #0
    aaae:	d0f9      	beq.n	aaa4 <USBHwInit+0x7c>
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    aab0:	4b12      	ldr	r3, [pc, #72]	; (aafc <USBHwInit+0xd4>)
    aab2:	2200      	movs	r2, #0
    aab4:	601a      	str	r2, [r3, #0]
    USBDevIntClr = 0xFFFFFFFF;
    aab6:	4b12      	ldr	r3, [pc, #72]	; (ab00 <USBHwInit+0xd8>)
    aab8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    aabc:	601a      	str	r2, [r3, #0]
    USBDevIntPri = 0;
    aabe:	4b11      	ldr	r3, [pc, #68]	; (ab04 <USBHwInit+0xdc>)
    aac0:	2200      	movs	r2, #0
    aac2:	601a      	str	r2, [r3, #0]

    USBEpIntEn = 0;
    aac4:	4b10      	ldr	r3, [pc, #64]	; (ab08 <USBHwInit+0xe0>)
    aac6:	2200      	movs	r2, #0
    aac8:	601a      	str	r2, [r3, #0]
    USBEpIntClr = 0xFFFFFFFF;
    aaca:	4b10      	ldr	r3, [pc, #64]	; (ab0c <USBHwInit+0xe4>)
    aacc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    aad0:	601a      	str	r2, [r3, #0]
    USBEpIntPri = 0;
    aad2:	4b0f      	ldr	r3, [pc, #60]	; (ab10 <USBHwInit+0xe8>)
    aad4:	2200      	movs	r2, #0
    aad6:	601a      	str	r2, [r3, #0]

    // by default, only ACKs generate interrupts
    USBHwNakIntEnable(0);
    aad8:	2000      	movs	r0, #0
    aada:	f7ff fdcb 	bl	a674 <USBHwNakIntEnable>
    // init debug leds
    DEBUG_LED_INIT(8);
    DEBUG_LED_INIT(9);
    DEBUG_LED_INIT(10);

    return TRUE;
    aade:	2301      	movs	r3, #1
}
    aae0:	4618      	mov	r0, r3
    aae2:	bd80      	pop	{r7, pc}
    aae4:	4002c010 	.word	0x4002c010
    aae8:	4002c00c 	.word	0x4002c00c
    aaec:	4002c004 	.word	0x4002c004
    aaf0:	400fc0c4 	.word	0x400fc0c4
    aaf4:	5000cff4 	.word	0x5000cff4
    aaf8:	5000cff8 	.word	0x5000cff8
    aafc:	5000c204 	.word	0x5000c204
    ab00:	5000c208 	.word	0x5000c208
    ab04:	5000c22c 	.word	0x5000c22c
    ab08:	5000c234 	.word	0x5000c234
    ab0c:	5000c238 	.word	0x5000c238
    ab10:	5000c240 	.word	0x5000c240

0000ab14 <USBFilterOsVendorMessage>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the request was handled by this filter, FALSE otherwise
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
    ab14:	b480      	push	{r7}
    ab16:	b089      	sub	sp, #36	; 0x24
    ab18:	af00      	add	r7, sp, #0
    ab1a:	60f8      	str	r0, [r7, #12]
    ab1c:	60b9      	str	r1, [r7, #8]
    ab1e:	607a      	str	r2, [r7, #4]
    ab20:	603b      	str	r3, [r7, #0]
	if(bMsVendorIndex == 0)	{
    ab22:	4b2d      	ldr	r3, [pc, #180]	; (abd8 <USBFilterOsVendorMessage+0xc4>)
    ab24:	781b      	ldrb	r3, [r3, #0]
    ab26:	2b00      	cmp	r3, #0
    ab28:	d101      	bne.n	ab2e <USBFilterOsVendorMessage+0x1a>
		// Feature is disabled.
		return FALSE;
    ab2a:	2300      	movs	r3, #0
    ab2c:	e04e      	b.n	abcc <USBFilterOsVendorMessage+0xb8>
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
    ab2e:	68fb      	ldr	r3, [r7, #12]
    ab30:	785a      	ldrb	r2, [r3, #1]
    ab32:	4b29      	ldr	r3, [pc, #164]	; (abd8 <USBFilterOsVendorMessage+0xc4>)
    ab34:	781b      	ldrb	r3, [r3, #0]
    ab36:	429a      	cmp	r2, r3
    ab38:	d147      	bne.n	abca <USBFilterOsVendorMessage+0xb6>
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
    ab3a:	68bb      	ldr	r3, [r7, #8]
    ab3c:	2200      	movs	r2, #0
    ab3e:	601a      	str	r2, [r3, #0]
	
		int iRequestLength = pSetup->wLength;
    ab40:	68fb      	ldr	r3, [r7, #12]
    ab42:	88db      	ldrh	r3, [r3, #6]
    ab44:	61fb      	str	r3, [r7, #28]
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
    ab46:	68fb      	ldr	r3, [r7, #12]
    ab48:	885b      	ldrh	r3, [r3, #2]
    ab4a:	76fb      	strb	r3, [r7, #27]
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
    ab4c:	68fb      	ldr	r3, [r7, #12]
    ab4e:	885b      	ldrh	r3, [r3, #2]
    ab50:	0a1b      	lsrs	r3, r3, #8
    ab52:	b29b      	uxth	r3, r3
    ab54:	76bb      	strb	r3, [r7, #26]
	
		switch (pSetup->wIndex) {
    ab56:	68fb      	ldr	r3, [r7, #12]
    ab58:	889b      	ldrh	r3, [r3, #4]
    ab5a:	2b04      	cmp	r3, #4
    ab5c:	d002      	beq.n	ab64 <USBFilterOsVendorMessage+0x50>
    ab5e:	2b05      	cmp	r3, #5
    ab60:	d007      	beq.n	ab72 <USBFilterOsVendorMessage+0x5e>
    ab62:	e00d      	b.n	ab80 <USBFilterOsVendorMessage+0x6c>
		case DESC_EXT_OS_FEATURES:
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
    ab64:	683b      	ldr	r3, [r7, #0]
    ab66:	4a1d      	ldr	r2, [pc, #116]	; (abdc <USBFilterOsVendorMessage+0xc8>)
    ab68:	601a      	str	r2, [r3, #0]
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
    ab6a:	687b      	ldr	r3, [r7, #4]
    ab6c:	2228      	movs	r2, #40	; 0x28
    ab6e:	601a      	str	r2, [r3, #0]
			break;
    ab70:	e008      	b.n	ab84 <USBFilterOsVendorMessage+0x70>
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
    ab72:	683b      	ldr	r3, [r7, #0]
    ab74:	4a1a      	ldr	r2, [pc, #104]	; (abe0 <USBFilterOsVendorMessage+0xcc>)
    ab76:	601a      	str	r2, [r3, #0]
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    ab78:	687b      	ldr	r3, [r7, #4]
    ab7a:	2292      	movs	r2, #146	; 0x92
    ab7c:	601a      	str	r2, [r3, #0]
			break;
    ab7e:	e001      	b.n	ab84 <USBFilterOsVendorMessage+0x70>

		default:
			return TRUE;
    ab80:	2301      	movs	r3, #1
    ab82:	e023      	b.n	abcc <USBFilterOsVendorMessage+0xb8>
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    ab84:	7ebb      	ldrb	r3, [r7, #26]
    ab86:	041b      	lsls	r3, r3, #16
    ab88:	617b      	str	r3, [r7, #20]
		if (*piLen < iPageOffset) {
    ab8a:	687b      	ldr	r3, [r7, #4]
    ab8c:	681a      	ldr	r2, [r3, #0]
    ab8e:	697b      	ldr	r3, [r7, #20]
    ab90:	429a      	cmp	r2, r3
    ab92:	da01      	bge.n	ab98 <USBFilterOsVendorMessage+0x84>
			// Not enough data for the requested offset.
			return TRUE;
    ab94:	2301      	movs	r3, #1
    ab96:	e019      	b.n	abcc <USBFilterOsVendorMessage+0xb8>
		}
		*ppbData += iPageOffset;
    ab98:	683b      	ldr	r3, [r7, #0]
    ab9a:	681a      	ldr	r2, [r3, #0]
    ab9c:	697b      	ldr	r3, [r7, #20]
    ab9e:	441a      	add	r2, r3
    aba0:	683b      	ldr	r3, [r7, #0]
    aba2:	601a      	str	r2, [r3, #0]
		*piLen -= iPageOffset;
    aba4:	687b      	ldr	r3, [r7, #4]
    aba6:	681a      	ldr	r2, [r3, #0]
    aba8:	697b      	ldr	r3, [r7, #20]
    abaa:	1ad2      	subs	r2, r2, r3
    abac:	687b      	ldr	r3, [r7, #4]
    abae:	601a      	str	r2, [r3, #0]
		
		if (*piLen > iRequestLength) {
    abb0:	687b      	ldr	r3, [r7, #4]
    abb2:	681a      	ldr	r2, [r3, #0]
    abb4:	69fb      	ldr	r3, [r7, #28]
    abb6:	429a      	cmp	r2, r3
    abb8:	dd02      	ble.n	abc0 <USBFilterOsVendorMessage+0xac>
			// Clip data longer than the requested length
			*piLen = iRequestLength;
    abba:	687b      	ldr	r3, [r7, #4]
    abbc:	69fa      	ldr	r2, [r7, #28]
    abbe:	601a      	str	r2, [r3, #0]
		}
	
		*pfSuccess = TRUE;
    abc0:	68bb      	ldr	r3, [r7, #8]
    abc2:	2201      	movs	r2, #1
    abc4:	601a      	str	r2, [r3, #0]
		return TRUE;
    abc6:	2301      	movs	r3, #1
    abc8:	e000      	b.n	abcc <USBFilterOsVendorMessage+0xb8>
	}
	
	// These are not the requests you are looking for
	return FALSE;
    abca:	2300      	movs	r3, #0
}
    abcc:	4618      	mov	r0, r3
    abce:	3724      	adds	r7, #36	; 0x24
    abd0:	46bd      	mov	sp, r7
    abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    abd6:	4770      	bx	lr
    abd8:	10000afc 	.word	0x10000afc
    abdc:	0000bcd4 	.word	0x0000bcd4
    abe0:	100008cc 	.word	0x100008cc

0000abe4 <USBRegisterWinusbInterface>:
	@param [in]		pcInterfaceGuid			ASCII String GUID in curly braces
												Windows will use this as a 
												Device Interface GUID
 */
void USBRegisterWinusbInterface(U8 bVendorRequestIndex, const char* pcInterfaceGuid)
{
    abe4:	b480      	push	{r7}
    abe6:	b087      	sub	sp, #28
    abe8:	af00      	add	r7, sp, #0
    abea:	4603      	mov	r3, r0
    abec:	6039      	str	r1, [r7, #0]
    abee:	71fb      	strb	r3, [r7, #7]
	bMsVendorIndex = bVendorRequestIndex;
    abf0:	4a18      	ldr	r2, [pc, #96]	; (ac54 <USBRegisterWinusbInterface+0x70>)
    abf2:	79fb      	ldrb	r3, [r7, #7]
    abf4:	7013      	strb	r3, [r2, #0]
	
	if(!pcInterfaceGuid) {
    abf6:	683b      	ldr	r3, [r7, #0]
    abf8:	2b00      	cmp	r3, #0
    abfa:	d100      	bne.n	abfe <USBRegisterWinusbInterface+0x1a>
		return; // Trust that caller is actually specifying this with nonzero RequestIndex.
    abfc:	e024      	b.n	ac48 <USBRegisterWinusbInterface+0x64>
	}
	
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
    abfe:	4b16      	ldr	r3, [pc, #88]	; (ac58 <USBRegisterWinusbInterface+0x74>)
    ac00:	617b      	str	r3, [r7, #20]
	const int ciMaxLength = 38;
    ac02:	2326      	movs	r3, #38	; 0x26
    ac04:	60fb      	str	r3, [r7, #12]
	
	for(int i = 0; i < ciMaxLength; i++) {
    ac06:	2300      	movs	r3, #0
    ac08:	613b      	str	r3, [r7, #16]
    ac0a:	e012      	b.n	ac32 <USBRegisterWinusbInterface+0x4e>
		if(!pcInterfaceGuid[i]) break;
    ac0c:	693b      	ldr	r3, [r7, #16]
    ac0e:	683a      	ldr	r2, [r7, #0]
    ac10:	4413      	add	r3, r2
    ac12:	781b      	ldrb	r3, [r3, #0]
    ac14:	2b00      	cmp	r3, #0
    ac16:	d100      	bne.n	ac1a <USBRegisterWinusbInterface+0x36>
    ac18:	e00f      	b.n	ac3a <USBRegisterWinusbInterface+0x56>
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
    ac1a:	693b      	ldr	r3, [r7, #16]
    ac1c:	683a      	ldr	r2, [r7, #0]
    ac1e:	4413      	add	r3, r2
    ac20:	781a      	ldrb	r2, [r3, #0]
    ac22:	697b      	ldr	r3, [r7, #20]
    ac24:	701a      	strb	r2, [r3, #0]
		pbWriteCursor += 2;
    ac26:	697b      	ldr	r3, [r7, #20]
    ac28:	3302      	adds	r3, #2
    ac2a:	617b      	str	r3, [r7, #20]
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
    ac2c:	693b      	ldr	r3, [r7, #16]
    ac2e:	3301      	adds	r3, #1
    ac30:	613b      	str	r3, [r7, #16]
    ac32:	693a      	ldr	r2, [r7, #16]
    ac34:	68fb      	ldr	r3, [r7, #12]
    ac36:	429a      	cmp	r2, r3
    ac38:	dbe8      	blt.n	ac0c <USBRegisterWinusbInterface+0x28>
		if(!pcInterfaceGuid[i]) break;
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
		pbWriteCursor += 2;
	}
	// Double terminate
	pbWriteCursor[0] = 0;
    ac3a:	697b      	ldr	r3, [r7, #20]
    ac3c:	2200      	movs	r2, #0
    ac3e:	701a      	strb	r2, [r3, #0]
	pbWriteCursor[2] = 0;
    ac40:	697b      	ldr	r3, [r7, #20]
    ac42:	3302      	adds	r3, #2
    ac44:	2200      	movs	r2, #0
    ac46:	701a      	strb	r2, [r3, #0]
	
}
    ac48:	371c      	adds	r7, #28
    ac4a:	46bd      	mov	sp, r7
    ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac50:	4770      	bx	lr
    ac52:	bf00      	nop
    ac54:	10000afc 	.word	0x10000afc
    ac58:	1000090e 	.word	0x1000090e

0000ac5c <USBGetOsStringDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
    ac5c:	b480      	push	{r7}
    ac5e:	b083      	sub	sp, #12
    ac60:	af00      	add	r7, sp, #0
    ac62:	6078      	str	r0, [r7, #4]
    ac64:	6039      	str	r1, [r7, #0]
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    ac66:	4b08      	ldr	r3, [pc, #32]	; (ac88 <USBGetOsStringDescriptor+0x2c>)
    ac68:	781a      	ldrb	r2, [r3, #0]
    ac6a:	4b08      	ldr	r3, [pc, #32]	; (ac8c <USBGetOsStringDescriptor+0x30>)
    ac6c:	741a      	strb	r2, [r3, #16]
	
	*ppbData = abOsStringDescriptor;
    ac6e:	683b      	ldr	r3, [r7, #0]
    ac70:	4a06      	ldr	r2, [pc, #24]	; (ac8c <USBGetOsStringDescriptor+0x30>)
    ac72:	601a      	str	r2, [r3, #0]
	*piLen = sizeof(abOsStringDescriptor);
    ac74:	687b      	ldr	r3, [r7, #4]
    ac76:	2212      	movs	r2, #18
    ac78:	601a      	str	r2, [r3, #0]
	return TRUE;
    ac7a:	2301      	movs	r3, #1
}
    ac7c:	4618      	mov	r0, r3
    ac7e:	370c      	adds	r7, #12
    ac80:	46bd      	mov	sp, r7
    ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac86:	4770      	bx	lr
    ac88:	10000afc 	.word	0x10000afc
    ac8c:	100008b8 	.word	0x100008b8

0000ac90 <USBRegisterDescriptors>:
	for the device.

	@param [in]	pabDescriptors	The descriptor byte array
 */
void USBRegisterDescriptors(const U8 *pabDescriptors)
{
    ac90:	b480      	push	{r7}
    ac92:	b083      	sub	sp, #12
    ac94:	af00      	add	r7, sp, #0
    ac96:	6078      	str	r0, [r7, #4]
	pabDescrip = pabDescriptors;
    ac98:	4a03      	ldr	r2, [pc, #12]	; (aca8 <USBRegisterDescriptors+0x18>)
    ac9a:	687b      	ldr	r3, [r7, #4]
    ac9c:	6013      	str	r3, [r2, #0]
}
    ac9e:	370c      	adds	r7, #12
    aca0:	46bd      	mov	sp, r7
    aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
    aca6:	4770      	bx	lr
    aca8:	10000af8 	.word	0x10000af8

0000acac <USBGetDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
    acac:	b580      	push	{r7, lr}
    acae:	b088      	sub	sp, #32
    acb0:	af00      	add	r7, sp, #0
    acb2:	60ba      	str	r2, [r7, #8]
    acb4:	607b      	str	r3, [r7, #4]
    acb6:	4603      	mov	r3, r0
    acb8:	81fb      	strh	r3, [r7, #14]
    acba:	460b      	mov	r3, r1
    acbc:	81bb      	strh	r3, [r7, #12]
	U8	*pab;
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
    acbe:	89fb      	ldrh	r3, [r7, #14]
    acc0:	0a1b      	lsrs	r3, r3, #8
    acc2:	b29b      	uxth	r3, r3
    acc4:	75fb      	strb	r3, [r7, #23]
	bIndex = GET_DESC_INDEX(wTypeIndex);
    acc6:	89fb      	ldrh	r3, [r7, #14]
    acc8:	75bb      	strb	r3, [r7, #22]
	
    if (bType == DESC_STRING &&
    acca:	7dfb      	ldrb	r3, [r7, #23]
    accc:	2b03      	cmp	r3, #3
    acce:	d10b      	bne.n	ace8 <USBGetDescriptor+0x3c>
    acd0:	7dbb      	ldrb	r3, [r7, #22]
    acd2:	2bee      	cmp	r3, #238	; 0xee
    acd4:	d108      	bne.n	ace8 <USBGetDescriptor+0x3c>
        bIndex == DESC_STRING_OS) {
        
        if (USBGetOsStringDescriptor(piLen, ppbData)) {
    acd6:	68b8      	ldr	r0, [r7, #8]
    acd8:	6879      	ldr	r1, [r7, #4]
    acda:	f7ff ffbf 	bl	ac5c <USBGetOsStringDescriptor>
    acde:	4603      	mov	r3, r0
    ace0:	2b00      	cmp	r3, #0
    ace2:	d001      	beq.n	ace8 <USBGetDescriptor+0x3c>
            
            return TRUE;
    ace4:	2301      	movs	r3, #1
    ace6:	e036      	b.n	ad56 <USBGetDescriptor+0xaa>
        }
    }
    	
	
	pab = (U8 *)pabDescrip;
    ace8:	4b1d      	ldr	r3, [pc, #116]	; (ad60 <USBGetDescriptor+0xb4>)
    acea:	681b      	ldr	r3, [r3, #0]
    acec:	61fb      	str	r3, [r7, #28]
	iCurIndex = 0;
    acee:	2300      	movs	r3, #0
    acf0:	61bb      	str	r3, [r7, #24]
	
	while (pab[DESC_bLength] != 0) {
    acf2:	e02b      	b.n	ad4c <USBGetDescriptor+0xa0>
		if (pab[DESC_bDescriptorType] == bType) {
    acf4:	69fb      	ldr	r3, [r7, #28]
    acf6:	3301      	adds	r3, #1
    acf8:	781b      	ldrb	r3, [r3, #0]
    acfa:	7dfa      	ldrb	r2, [r7, #23]
    acfc:	429a      	cmp	r2, r3
    acfe:	d11f      	bne.n	ad40 <USBGetDescriptor+0x94>
			if (iCurIndex == bIndex) {
    ad00:	7dba      	ldrb	r2, [r7, #22]
    ad02:	69bb      	ldr	r3, [r7, #24]
    ad04:	429a      	cmp	r2, r3
    ad06:	d118      	bne.n	ad3a <USBGetDescriptor+0x8e>
				// set data pointer
				*ppbData = pab;
    ad08:	687b      	ldr	r3, [r7, #4]
    ad0a:	69fa      	ldr	r2, [r7, #28]
    ad0c:	601a      	str	r2, [r3, #0]
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    ad0e:	7dfb      	ldrb	r3, [r7, #23]
    ad10:	2b02      	cmp	r3, #2
    ad12:	d10b      	bne.n	ad2c <USBGetDescriptor+0x80>
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    ad14:	69fb      	ldr	r3, [r7, #28]
    ad16:	3302      	adds	r3, #2
    ad18:	781b      	ldrb	r3, [r3, #0]
    ad1a:	461a      	mov	r2, r3
								(pab[CONF_DESC_wTotalLength + 1] << 8);
    ad1c:	69fb      	ldr	r3, [r7, #28]
    ad1e:	3303      	adds	r3, #3
    ad20:	781b      	ldrb	r3, [r3, #0]
    ad22:	021b      	lsls	r3, r3, #8
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    ad24:	431a      	orrs	r2, r3
    ad26:	68bb      	ldr	r3, [r7, #8]
    ad28:	601a      	str	r2, [r3, #0]
    ad2a:	e004      	b.n	ad36 <USBGetDescriptor+0x8a>
								(pab[CONF_DESC_wTotalLength + 1] << 8);
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
    ad2c:	69fb      	ldr	r3, [r7, #28]
    ad2e:	781b      	ldrb	r3, [r3, #0]
    ad30:	461a      	mov	r2, r3
    ad32:	68bb      	ldr	r3, [r7, #8]
    ad34:	601a      	str	r2, [r3, #0]
				}
				return TRUE;
    ad36:	2301      	movs	r3, #1
    ad38:	e00d      	b.n	ad56 <USBGetDescriptor+0xaa>
			}
			iCurIndex++;
    ad3a:	69bb      	ldr	r3, [r7, #24]
    ad3c:	3301      	adds	r3, #1
    ad3e:	61bb      	str	r3, [r7, #24]
		}
		// skip to next descriptor
		pab += pab[DESC_bLength];
    ad40:	69fb      	ldr	r3, [r7, #28]
    ad42:	781b      	ldrb	r3, [r3, #0]
    ad44:	461a      	mov	r2, r3
    ad46:	69fb      	ldr	r3, [r7, #28]
    ad48:	4413      	add	r3, r2
    ad4a:	61fb      	str	r3, [r7, #28]
    	
	
	pab = (U8 *)pabDescrip;
	iCurIndex = 0;
	
	while (pab[DESC_bLength] != 0) {
    ad4c:	69fb      	ldr	r3, [r7, #28]
    ad4e:	781b      	ldrb	r3, [r3, #0]
    ad50:	2b00      	cmp	r3, #0
    ad52:	d1cf      	bne.n	acf4 <USBGetDescriptor+0x48>
		// skip to next descriptor
		pab += pab[DESC_bLength];
	}
	// nothing found
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
    ad54:	2300      	movs	r3, #0
}
    ad56:	4618      	mov	r0, r3
    ad58:	3720      	adds	r7, #32
    ad5a:	46bd      	mov	sp, r7
    ad5c:	bd80      	pop	{r7, pc}
    ad5e:	bf00      	nop
    ad60:	10000af8 	.word	0x10000af8

0000ad64 <USBSetConfiguration>:
	@todo function always returns TRUE, add stricter checking?
	
	@return TRUE if successfully configured, FALSE otherwise
 */
static BOOL USBSetConfiguration(U8 bConfigIndex, U8 bAltSetting)
{
    ad64:	b580      	push	{r7, lr}
    ad66:	b086      	sub	sp, #24
    ad68:	af00      	add	r7, sp, #0
    ad6a:	4603      	mov	r3, r0
    ad6c:	460a      	mov	r2, r1
    ad6e:	71fb      	strb	r3, [r7, #7]
    ad70:	4613      	mov	r3, r2
    ad72:	71bb      	strb	r3, [r7, #6]
	U8	bEP;
	U16	wMaxPktSize;
	
	ASSERT(pabDescrip != NULL);

	if (bConfigIndex == 0) {
    ad74:	79fb      	ldrb	r3, [r7, #7]
    ad76:	2b00      	cmp	r3, #0
    ad78:	d103      	bne.n	ad82 <USBSetConfiguration+0x1e>
		// unconfigure device
		USBHwConfigDevice(FALSE);
    ad7a:	2000      	movs	r0, #0
    ad7c:	f7ff fd78 	bl	a870 <USBHwConfigDevice>
    ad80:	e045      	b.n	ae0e <USBSetConfiguration+0xaa>
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
    ad82:	4b25      	ldr	r3, [pc, #148]	; (ae18 <USBSetConfiguration+0xb4>)
    ad84:	681b      	ldr	r3, [r3, #0]
    ad86:	617b      	str	r3, [r7, #20]
		bCurConfig = 0xFF;
    ad88:	23ff      	movs	r3, #255	; 0xff
    ad8a:	74fb      	strb	r3, [r7, #19]
		bCurAltSetting = 0xFF;
    ad8c:	23ff      	movs	r3, #255	; 0xff
    ad8e:	74bb      	strb	r3, [r7, #18]

		while (pab[DESC_bLength] != 0) {
    ad90:	e036      	b.n	ae00 <USBSetConfiguration+0x9c>

			switch (pab[DESC_bDescriptorType]) {
    ad92:	697b      	ldr	r3, [r7, #20]
    ad94:	3301      	adds	r3, #1
    ad96:	781b      	ldrb	r3, [r3, #0]
    ad98:	2b04      	cmp	r3, #4
    ad9a:	d008      	beq.n	adae <USBSetConfiguration+0x4a>
    ad9c:	2b05      	cmp	r3, #5
    ad9e:	d00a      	beq.n	adb6 <USBSetConfiguration+0x52>
    ada0:	2b02      	cmp	r3, #2
    ada2:	d000      	beq.n	ada6 <USBSetConfiguration+0x42>
					USBHwEPConfig(bEP, wMaxPktSize);
				}
				break;

			default:
				break;
    ada4:	e026      	b.n	adf4 <USBSetConfiguration+0x90>

			switch (pab[DESC_bDescriptorType]) {

			case DESC_CONFIGURATION:
				// remember current configuration index
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
    ada6:	697b      	ldr	r3, [r7, #20]
    ada8:	795b      	ldrb	r3, [r3, #5]
    adaa:	74fb      	strb	r3, [r7, #19]
				break;
    adac:	e022      	b.n	adf4 <USBSetConfiguration+0x90>

			case DESC_INTERFACE:
				// remember current alternate setting
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
    adae:	697b      	ldr	r3, [r7, #20]
    adb0:	78db      	ldrb	r3, [r3, #3]
    adb2:	74bb      	strb	r3, [r7, #18]
				break;
    adb4:	e01e      	b.n	adf4 <USBSetConfiguration+0x90>

			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
    adb6:	7cfa      	ldrb	r2, [r7, #19]
    adb8:	79fb      	ldrb	r3, [r7, #7]
    adba:	429a      	cmp	r2, r3
    adbc:	d119      	bne.n	adf2 <USBSetConfiguration+0x8e>
    adbe:	7cba      	ldrb	r2, [r7, #18]
    adc0:	79bb      	ldrb	r3, [r7, #6]
    adc2:	429a      	cmp	r2, r3
    adc4:	d115      	bne.n	adf2 <USBSetConfiguration+0x8e>
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
    adc6:	697b      	ldr	r3, [r7, #20]
    adc8:	789b      	ldrb	r3, [r3, #2]
    adca:	747b      	strb	r3, [r7, #17]
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    adcc:	697b      	ldr	r3, [r7, #20]
    adce:	3304      	adds	r3, #4
    add0:	781b      	ldrb	r3, [r3, #0]
    add2:	b29a      	uxth	r2, r3
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
    add4:	697b      	ldr	r3, [r7, #20]
    add6:	3305      	adds	r3, #5
    add8:	781b      	ldrb	r3, [r3, #0]
    adda:	021b      	lsls	r3, r3, #8
			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    addc:	b29b      	uxth	r3, r3
    adde:	4313      	orrs	r3, r2
    ade0:	b29b      	uxth	r3, r3
    ade2:	81fb      	strh	r3, [r7, #14]
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
					// configure endpoint
					USBHwEPConfig(bEP, wMaxPktSize);
    ade4:	7c7a      	ldrb	r2, [r7, #17]
    ade6:	89fb      	ldrh	r3, [r7, #14]
    ade8:	4610      	mov	r0, r2
    adea:	4619      	mov	r1, r3
    adec:	f7ff fbb8 	bl	a560 <USBHwEPConfig>
				}
				break;
    adf0:	e7ff      	b.n	adf2 <USBSetConfiguration+0x8e>
    adf2:	bf00      	nop

			default:
				break;
			}
			// skip to next descriptor
			pab += pab[DESC_bLength];
    adf4:	697b      	ldr	r3, [r7, #20]
    adf6:	781b      	ldrb	r3, [r3, #0]
    adf8:	461a      	mov	r2, r3
    adfa:	697b      	ldr	r3, [r7, #20]
    adfc:	4413      	add	r3, r2
    adfe:	617b      	str	r3, [r7, #20]
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;

		while (pab[DESC_bLength] != 0) {
    ae00:	697b      	ldr	r3, [r7, #20]
    ae02:	781b      	ldrb	r3, [r3, #0]
    ae04:	2b00      	cmp	r3, #0
    ae06:	d1c4      	bne.n	ad92 <USBSetConfiguration+0x2e>
			// skip to next descriptor
			pab += pab[DESC_bLength];
		}
		
		// configure device
		USBHwConfigDevice(TRUE);
    ae08:	2001      	movs	r0, #1
    ae0a:	f7ff fd31 	bl	a870 <USBHwConfigDevice>
	}

	return TRUE;
    ae0e:	2301      	movs	r3, #1
}
    ae10:	4618      	mov	r0, r3
    ae12:	3718      	adds	r7, #24
    ae14:	46bd      	mov	sp, r7
    ae16:	bd80      	pop	{r7, pc}
    ae18:	10000af8 	.word	0x10000af8

0000ae1c <HandleStdDeviceReq>:
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
    ae1c:	b580      	push	{r7, lr}
    ae1e:	b086      	sub	sp, #24
    ae20:	af00      	add	r7, sp, #0
    ae22:	60f8      	str	r0, [r7, #12]
    ae24:	60b9      	str	r1, [r7, #8]
    ae26:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    ae28:	687b      	ldr	r3, [r7, #4]
    ae2a:	681b      	ldr	r3, [r3, #0]
    ae2c:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    ae2e:	68fb      	ldr	r3, [r7, #12]
    ae30:	785b      	ldrb	r3, [r3, #1]
    ae32:	2b09      	cmp	r3, #9
    ae34:	d852      	bhi.n	aedc <HandleStdDeviceReq+0xc0>
    ae36:	a201      	add	r2, pc, #4	; (adr r2, ae3c <HandleStdDeviceReq+0x20>)
    ae38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ae3c:	0000ae65 	.word	0x0000ae65
    ae40:	0000aed5 	.word	0x0000aed5
    ae44:	0000aedd 	.word	0x0000aedd
    ae48:	0000aed5 	.word	0x0000aed5
    ae4c:	0000aedd 	.word	0x0000aedd
    ae50:	0000ae7b 	.word	0x0000ae7b
    ae54:	0000ae89 	.word	0x0000ae89
    ae58:	0000aed9 	.word	0x0000aed9
    ae5c:	0000aea1 	.word	0x0000aea1
    ae60:	0000aeb1 	.word	0x0000aeb1
	
	case REQ_GET_STATUS:
		// bit 0: self-powered
		// bit 1: remote wakeup = not supported
		pbData[0] = 0;
    ae64:	697b      	ldr	r3, [r7, #20]
    ae66:	2200      	movs	r2, #0
    ae68:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    ae6a:	697b      	ldr	r3, [r7, #20]
    ae6c:	3301      	adds	r3, #1
    ae6e:	2200      	movs	r2, #0
    ae70:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    ae72:	68bb      	ldr	r3, [r7, #8]
    ae74:	2202      	movs	r2, #2
    ae76:	601a      	str	r2, [r3, #0]
		break;
    ae78:	e032      	b.n	aee0 <HandleStdDeviceReq+0xc4>
		
	case REQ_SET_ADDRESS:
		USBHwSetAddress(pSetup->wValue);
    ae7a:	68fb      	ldr	r3, [r7, #12]
    ae7c:	885b      	ldrh	r3, [r3, #2]
    ae7e:	b2db      	uxtb	r3, r3
    ae80:	4618      	mov	r0, r3
    ae82:	f7ff fbd3 	bl	a62c <USBHwSetAddress>
		break;
    ae86:	e02b      	b.n	aee0 <HandleStdDeviceReq+0xc4>

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    ae88:	68fb      	ldr	r3, [r7, #12]
    ae8a:	885a      	ldrh	r2, [r3, #2]
    ae8c:	68fb      	ldr	r3, [r7, #12]
    ae8e:	889b      	ldrh	r3, [r3, #4]
    ae90:	4610      	mov	r0, r2
    ae92:	4619      	mov	r1, r3
    ae94:	68ba      	ldr	r2, [r7, #8]
    ae96:	687b      	ldr	r3, [r7, #4]
    ae98:	f7ff ff08 	bl	acac <USBGetDescriptor>
    ae9c:	4603      	mov	r3, r0
    ae9e:	e020      	b.n	aee2 <HandleStdDeviceReq+0xc6>

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    aea0:	4b12      	ldr	r3, [pc, #72]	; (aeec <HandleStdDeviceReq+0xd0>)
    aea2:	781a      	ldrb	r2, [r3, #0]
    aea4:	697b      	ldr	r3, [r7, #20]
    aea6:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    aea8:	68bb      	ldr	r3, [r7, #8]
    aeaa:	2201      	movs	r2, #1
    aeac:	601a      	str	r2, [r3, #0]
		break;
    aeae:	e017      	b.n	aee0 <HandleStdDeviceReq+0xc4>

	case REQ_SET_CONFIGURATION:
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
    aeb0:	68fb      	ldr	r3, [r7, #12]
    aeb2:	885b      	ldrh	r3, [r3, #2]
    aeb4:	b2db      	uxtb	r3, r3
    aeb6:	4618      	mov	r0, r3
    aeb8:	2100      	movs	r1, #0
    aeba:	f7ff ff53 	bl	ad64 <USBSetConfiguration>
    aebe:	4603      	mov	r3, r0
    aec0:	2b00      	cmp	r3, #0
    aec2:	d101      	bne.n	aec8 <HandleStdDeviceReq+0xac>
			DBG("USBSetConfiguration failed!\n");
			return FALSE;
    aec4:	2300      	movs	r3, #0
    aec6:	e00c      	b.n	aee2 <HandleStdDeviceReq+0xc6>
		}
		// configuration successful, update current configuration
		bConfiguration = pSetup->wValue & 0xFF;	
    aec8:	68fb      	ldr	r3, [r7, #12]
    aeca:	885b      	ldrh	r3, [r3, #2]
    aecc:	b2da      	uxtb	r2, r3
    aece:	4b07      	ldr	r3, [pc, #28]	; (aeec <HandleStdDeviceReq+0xd0>)
    aed0:	701a      	strb	r2, [r3, #0]
		break;
    aed2:	e005      	b.n	aee0 <HandleStdDeviceReq+0xc4>
			// put DEVICE_REMOTE_WAKEUP code here
		}
		if (pSetup->wValue == FEA_TEST_MODE) {
			// put TEST_MODE code here
		}
		return FALSE;
    aed4:	2300      	movs	r3, #0
    aed6:	e004      	b.n	aee2 <HandleStdDeviceReq+0xc6>

	case REQ_SET_DESCRIPTOR:
		DBG("Device req %d not implemented\n", pSetup->bRequest);
		return FALSE;
    aed8:	2300      	movs	r3, #0
    aeda:	e002      	b.n	aee2 <HandleStdDeviceReq+0xc6>

	default:
		DBG("Illegal device req %d\n", pSetup->bRequest);
		return FALSE;
    aedc:	2300      	movs	r3, #0
    aede:	e000      	b.n	aee2 <HandleStdDeviceReq+0xc6>
	}
	
	return TRUE;
    aee0:	2301      	movs	r3, #1
}
    aee2:	4618      	mov	r0, r3
    aee4:	3718      	adds	r7, #24
    aee6:	46bd      	mov	sp, r7
    aee8:	bd80      	pop	{r7, pc}
    aeea:	bf00      	nop
    aeec:	10000af0 	.word	0x10000af0

0000aef0 <HandleStdInterfaceReq>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    aef0:	b480      	push	{r7}
    aef2:	b087      	sub	sp, #28
    aef4:	af00      	add	r7, sp, #0
    aef6:	60f8      	str	r0, [r7, #12]
    aef8:	60b9      	str	r1, [r7, #8]
    aefa:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    aefc:	687b      	ldr	r3, [r7, #4]
    aefe:	681b      	ldr	r3, [r3, #0]
    af00:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    af02:	68fb      	ldr	r3, [r7, #12]
    af04:	785b      	ldrb	r3, [r3, #1]
    af06:	2b0b      	cmp	r3, #11
    af08:	d838      	bhi.n	af7c <HandleStdInterfaceReq+0x8c>
    af0a:	a201      	add	r2, pc, #4	; (adr r2, af10 <HandleStdInterfaceReq+0x20>)
    af0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    af10:	0000af41 	.word	0x0000af41
    af14:	0000af57 	.word	0x0000af57
    af18:	0000af7d 	.word	0x0000af7d
    af1c:	0000af57 	.word	0x0000af57
    af20:	0000af7d 	.word	0x0000af7d
    af24:	0000af7d 	.word	0x0000af7d
    af28:	0000af7d 	.word	0x0000af7d
    af2c:	0000af7d 	.word	0x0000af7d
    af30:	0000af7d 	.word	0x0000af7d
    af34:	0000af7d 	.word	0x0000af7d
    af38:	0000af5b 	.word	0x0000af5b
    af3c:	0000af69 	.word	0x0000af69

	case REQ_GET_STATUS:
		// no bits specified
		pbData[0] = 0;
    af40:	697b      	ldr	r3, [r7, #20]
    af42:	2200      	movs	r2, #0
    af44:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    af46:	697b      	ldr	r3, [r7, #20]
    af48:	3301      	adds	r3, #1
    af4a:	2200      	movs	r2, #0
    af4c:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    af4e:	68bb      	ldr	r3, [r7, #8]
    af50:	2202      	movs	r2, #2
    af52:	601a      	str	r2, [r3, #0]
		break;
    af54:	e014      	b.n	af80 <HandleStdInterfaceReq+0x90>

	case REQ_CLEAR_FEATURE:
	case REQ_SET_FEATURE:
		// not defined for interface
		return FALSE;
    af56:	2300      	movs	r3, #0
    af58:	e013      	b.n	af82 <HandleStdInterfaceReq+0x92>
	
	case REQ_GET_INTERFACE:	// TODO use bNumInterfaces
        // there is only one interface, return n-1 (= 0)
		pbData[0] = 0;
    af5a:	697b      	ldr	r3, [r7, #20]
    af5c:	2200      	movs	r2, #0
    af5e:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    af60:	68bb      	ldr	r3, [r7, #8]
    af62:	2201      	movs	r2, #1
    af64:	601a      	str	r2, [r3, #0]
		break;
    af66:	e00b      	b.n	af80 <HandleStdInterfaceReq+0x90>
	
	case REQ_SET_INTERFACE:	// TODO use bNumInterfaces
		// there is only one interface (= 0)
		if (pSetup->wValue != 0) {
    af68:	68fb      	ldr	r3, [r7, #12]
    af6a:	885b      	ldrh	r3, [r3, #2]
    af6c:	2b00      	cmp	r3, #0
    af6e:	d001      	beq.n	af74 <HandleStdInterfaceReq+0x84>
			return FALSE;
    af70:	2300      	movs	r3, #0
    af72:	e006      	b.n	af82 <HandleStdInterfaceReq+0x92>
		}
		*piLen = 0;
    af74:	68bb      	ldr	r3, [r7, #8]
    af76:	2200      	movs	r2, #0
    af78:	601a      	str	r2, [r3, #0]
		break;
    af7a:	e001      	b.n	af80 <HandleStdInterfaceReq+0x90>

	default:
		DBG("Illegal interface req %d\n", pSetup->bRequest);
		return FALSE;
    af7c:	2300      	movs	r3, #0
    af7e:	e000      	b.n	af82 <HandleStdInterfaceReq+0x92>
	}

	return TRUE;
    af80:	2301      	movs	r3, #1
}
    af82:	4618      	mov	r0, r3
    af84:	371c      	adds	r7, #28
    af86:	46bd      	mov	sp, r7
    af88:	f85d 7b04 	ldr.w	r7, [sp], #4
    af8c:	4770      	bx	lr
    af8e:	bf00      	nop

0000af90 <HandleStdEndPointReq>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdEndPointReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    af90:	b580      	push	{r7, lr}
    af92:	b086      	sub	sp, #24
    af94:	af00      	add	r7, sp, #0
    af96:	60f8      	str	r0, [r7, #12]
    af98:	60b9      	str	r1, [r7, #8]
    af9a:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    af9c:	687b      	ldr	r3, [r7, #4]
    af9e:	681b      	ldr	r3, [r3, #0]
    afa0:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    afa2:	68fb      	ldr	r3, [r7, #12]
    afa4:	785b      	ldrb	r3, [r3, #1]
    afa6:	2b0c      	cmp	r3, #12
    afa8:	d853      	bhi.n	b052 <HandleStdEndPointReq+0xc2>
    afaa:	a201      	add	r2, pc, #4	; (adr r2, afb0 <HandleStdEndPointReq+0x20>)
    afac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    afb0:	0000afe5 	.word	0x0000afe5
    afb4:	0000b017 	.word	0x0000b017
    afb8:	0000b053 	.word	0x0000b053
    afbc:	0000b033 	.word	0x0000b033
    afc0:	0000b053 	.word	0x0000b053
    afc4:	0000b053 	.word	0x0000b053
    afc8:	0000b053 	.word	0x0000b053
    afcc:	0000b053 	.word	0x0000b053
    afd0:	0000b053 	.word	0x0000b053
    afd4:	0000b053 	.word	0x0000b053
    afd8:	0000b053 	.word	0x0000b053
    afdc:	0000b053 	.word	0x0000b053
    afe0:	0000b04f 	.word	0x0000b04f
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    afe4:	68fb      	ldr	r3, [r7, #12]
    afe6:	889b      	ldrh	r3, [r3, #4]
    afe8:	b2db      	uxtb	r3, r3
    afea:	4618      	mov	r0, r3
    afec:	f7ff fb50 	bl	a690 <USBHwEPGetStatus>
    aff0:	4603      	mov	r3, r0
    aff2:	f003 0302 	and.w	r3, r3, #2
    aff6:	2b00      	cmp	r3, #0
    aff8:	bf14      	ite	ne
    affa:	2301      	movne	r3, #1
    affc:	2300      	moveq	r3, #0
    affe:	b2db      	uxtb	r3, r3
    b000:	461a      	mov	r2, r3
    b002:	697b      	ldr	r3, [r7, #20]
    b004:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    b006:	697b      	ldr	r3, [r7, #20]
    b008:	3301      	adds	r3, #1
    b00a:	2200      	movs	r2, #0
    b00c:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    b00e:	68bb      	ldr	r3, [r7, #8]
    b010:	2202      	movs	r2, #2
    b012:	601a      	str	r2, [r3, #0]
		break;
    b014:	e01f      	b.n	b056 <HandleStdEndPointReq+0xc6>
		
	case REQ_CLEAR_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    b016:	68fb      	ldr	r3, [r7, #12]
    b018:	885b      	ldrh	r3, [r3, #2]
    b01a:	2b00      	cmp	r3, #0
    b01c:	d107      	bne.n	b02e <HandleStdEndPointReq+0x9e>
			// clear HALT by unstalling
			USBHwEPStall(pSetup->wIndex, FALSE);
    b01e:	68fb      	ldr	r3, [r7, #12]
    b020:	889b      	ldrh	r3, [r3, #4]
    b022:	b2db      	uxtb	r3, r3
    b024:	4618      	mov	r0, r3
    b026:	2100      	movs	r1, #0
    b028:	f7ff fb4a 	bl	a6c0 <USBHwEPStall>
			break;
    b02c:	e013      	b.n	b056 <HandleStdEndPointReq+0xc6>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
    b02e:	2300      	movs	r3, #0
    b030:	e012      	b.n	b058 <HandleStdEndPointReq+0xc8>
	
	case REQ_SET_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    b032:	68fb      	ldr	r3, [r7, #12]
    b034:	885b      	ldrh	r3, [r3, #2]
    b036:	2b00      	cmp	r3, #0
    b038:	d107      	bne.n	b04a <HandleStdEndPointReq+0xba>
			// set HALT by stalling
			USBHwEPStall(pSetup->wIndex, TRUE);
    b03a:	68fb      	ldr	r3, [r7, #12]
    b03c:	889b      	ldrh	r3, [r3, #4]
    b03e:	b2db      	uxtb	r3, r3
    b040:	4618      	mov	r0, r3
    b042:	2101      	movs	r1, #1
    b044:	f7ff fb3c 	bl	a6c0 <USBHwEPStall>
			break;
    b048:	e005      	b.n	b056 <HandleStdEndPointReq+0xc6>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
    b04a:	2300      	movs	r3, #0
    b04c:	e004      	b.n	b058 <HandleStdEndPointReq+0xc8>

	case REQ_SYNCH_FRAME:
		DBG("EP req %d not implemented\n", pSetup->bRequest);
		return FALSE;
    b04e:	2300      	movs	r3, #0
    b050:	e002      	b.n	b058 <HandleStdEndPointReq+0xc8>

	default:
		DBG("Illegal EP req %d\n", pSetup->bRequest);
		return FALSE;
    b052:	2300      	movs	r3, #0
    b054:	e000      	b.n	b058 <HandleStdEndPointReq+0xc8>
	}
	
	return TRUE;
    b056:	2301      	movs	r3, #1
}
    b058:	4618      	mov	r0, r3
    b05a:	3718      	adds	r7, #24
    b05c:	46bd      	mov	sp, r7
    b05e:	bd80      	pop	{r7, pc}

0000b060 <USBHandleStandardRequest>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    b060:	b580      	push	{r7, lr}
    b062:	b084      	sub	sp, #16
    b064:	af00      	add	r7, sp, #0
    b066:	60f8      	str	r0, [r7, #12]
    b068:	60b9      	str	r1, [r7, #8]
    b06a:	607a      	str	r2, [r7, #4]
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    b06c:	4b19      	ldr	r3, [pc, #100]	; (b0d4 <USBHandleStandardRequest+0x74>)
    b06e:	681b      	ldr	r3, [r3, #0]
    b070:	2b00      	cmp	r3, #0
    b072:	d00a      	beq.n	b08a <USBHandleStandardRequest+0x2a>
    b074:	4b17      	ldr	r3, [pc, #92]	; (b0d4 <USBHandleStandardRequest+0x74>)
    b076:	681b      	ldr	r3, [r3, #0]
    b078:	68f8      	ldr	r0, [r7, #12]
    b07a:	68b9      	ldr	r1, [r7, #8]
    b07c:	687a      	ldr	r2, [r7, #4]
    b07e:	4798      	blx	r3
    b080:	4603      	mov	r3, r0
    b082:	2b00      	cmp	r3, #0
    b084:	d001      	beq.n	b08a <USBHandleStandardRequest+0x2a>
		return TRUE;
    b086:	2301      	movs	r3, #1
    b088:	e01f      	b.n	b0ca <USBHandleStandardRequest+0x6a>
	}
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
    b08a:	68fb      	ldr	r3, [r7, #12]
    b08c:	781b      	ldrb	r3, [r3, #0]
    b08e:	f003 031f 	and.w	r3, r3, #31
    b092:	2b01      	cmp	r3, #1
    b094:	d00a      	beq.n	b0ac <USBHandleStandardRequest+0x4c>
    b096:	2b02      	cmp	r3, #2
    b098:	d00f      	beq.n	b0ba <USBHandleStandardRequest+0x5a>
    b09a:	2b00      	cmp	r3, #0
    b09c:	d114      	bne.n	b0c8 <USBHandleStandardRequest+0x68>
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
    b09e:	68f8      	ldr	r0, [r7, #12]
    b0a0:	68b9      	ldr	r1, [r7, #8]
    b0a2:	687a      	ldr	r2, [r7, #4]
    b0a4:	f7ff feba 	bl	ae1c <HandleStdDeviceReq>
    b0a8:	4603      	mov	r3, r0
    b0aa:	e00e      	b.n	b0ca <USBHandleStandardRequest+0x6a>
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
    b0ac:	68f8      	ldr	r0, [r7, #12]
    b0ae:	68b9      	ldr	r1, [r7, #8]
    b0b0:	687a      	ldr	r2, [r7, #4]
    b0b2:	f7ff ff1d 	bl	aef0 <HandleStdInterfaceReq>
    b0b6:	4603      	mov	r3, r0
    b0b8:	e007      	b.n	b0ca <USBHandleStandardRequest+0x6a>
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
    b0ba:	68f8      	ldr	r0, [r7, #12]
    b0bc:	68b9      	ldr	r1, [r7, #8]
    b0be:	687a      	ldr	r2, [r7, #4]
    b0c0:	f7ff ff66 	bl	af90 <HandleStdEndPointReq>
    b0c4:	4603      	mov	r3, r0
    b0c6:	e000      	b.n	b0ca <USBHandleStandardRequest+0x6a>
	default: 						return FALSE;
    b0c8:	2300      	movs	r3, #0
	}
}
    b0ca:	4618      	mov	r0, r3
    b0cc:	3710      	adds	r7, #16
    b0ce:	46bd      	mov	sp, r7
    b0d0:	bd80      	pop	{r7, pc}
    b0d2:	bf00      	nop
    b0d4:	10000af4 	.word	0x10000af4

0000b0d8 <memcmp>:
    b0d8:	2a03      	cmp	r2, #3
    b0da:	b470      	push	{r4, r5, r6}
    b0dc:	d926      	bls.n	b12c <memcmp+0x54>
    b0de:	ea40 0301 	orr.w	r3, r0, r1
    b0e2:	079b      	lsls	r3, r3, #30
    b0e4:	d011      	beq.n	b10a <memcmp+0x32>
    b0e6:	7804      	ldrb	r4, [r0, #0]
    b0e8:	780d      	ldrb	r5, [r1, #0]
    b0ea:	42ac      	cmp	r4, r5
    b0ec:	d122      	bne.n	b134 <memcmp+0x5c>
    b0ee:	4402      	add	r2, r0
    b0f0:	1c43      	adds	r3, r0, #1
    b0f2:	e005      	b.n	b100 <memcmp+0x28>
    b0f4:	f813 4b01 	ldrb.w	r4, [r3], #1
    b0f8:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    b0fc:	42ac      	cmp	r4, r5
    b0fe:	d119      	bne.n	b134 <memcmp+0x5c>
    b100:	4293      	cmp	r3, r2
    b102:	d1f7      	bne.n	b0f4 <memcmp+0x1c>
    b104:	2000      	movs	r0, #0
    b106:	bc70      	pop	{r4, r5, r6}
    b108:	4770      	bx	lr
    b10a:	460c      	mov	r4, r1
    b10c:	4603      	mov	r3, r0
    b10e:	681e      	ldr	r6, [r3, #0]
    b110:	6825      	ldr	r5, [r4, #0]
    b112:	4618      	mov	r0, r3
    b114:	42ae      	cmp	r6, r5
    b116:	4621      	mov	r1, r4
    b118:	f103 0304 	add.w	r3, r3, #4
    b11c:	f104 0404 	add.w	r4, r4, #4
    b120:	d104      	bne.n	b12c <memcmp+0x54>
    b122:	3a04      	subs	r2, #4
    b124:	2a03      	cmp	r2, #3
    b126:	4618      	mov	r0, r3
    b128:	4621      	mov	r1, r4
    b12a:	d8f0      	bhi.n	b10e <memcmp+0x36>
    b12c:	2a00      	cmp	r2, #0
    b12e:	d1da      	bne.n	b0e6 <memcmp+0xe>
    b130:	4610      	mov	r0, r2
    b132:	e7e8      	b.n	b106 <memcmp+0x2e>
    b134:	1b60      	subs	r0, r4, r5
    b136:	bc70      	pop	{r4, r5, r6}
    b138:	4770      	bx	lr
    b13a:	bf00      	nop

0000b13c <memcpy>:
    b13c:	4684      	mov	ip, r0
    b13e:	ea41 0300 	orr.w	r3, r1, r0
    b142:	f013 0303 	ands.w	r3, r3, #3
    b146:	d149      	bne.n	b1dc <memcpy+0xa0>
    b148:	3a40      	subs	r2, #64	; 0x40
    b14a:	d323      	bcc.n	b194 <memcpy+0x58>
    b14c:	680b      	ldr	r3, [r1, #0]
    b14e:	6003      	str	r3, [r0, #0]
    b150:	684b      	ldr	r3, [r1, #4]
    b152:	6043      	str	r3, [r0, #4]
    b154:	688b      	ldr	r3, [r1, #8]
    b156:	6083      	str	r3, [r0, #8]
    b158:	68cb      	ldr	r3, [r1, #12]
    b15a:	60c3      	str	r3, [r0, #12]
    b15c:	690b      	ldr	r3, [r1, #16]
    b15e:	6103      	str	r3, [r0, #16]
    b160:	694b      	ldr	r3, [r1, #20]
    b162:	6143      	str	r3, [r0, #20]
    b164:	698b      	ldr	r3, [r1, #24]
    b166:	6183      	str	r3, [r0, #24]
    b168:	69cb      	ldr	r3, [r1, #28]
    b16a:	61c3      	str	r3, [r0, #28]
    b16c:	6a0b      	ldr	r3, [r1, #32]
    b16e:	6203      	str	r3, [r0, #32]
    b170:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    b172:	6243      	str	r3, [r0, #36]	; 0x24
    b174:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    b176:	6283      	str	r3, [r0, #40]	; 0x28
    b178:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    b17a:	62c3      	str	r3, [r0, #44]	; 0x2c
    b17c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    b17e:	6303      	str	r3, [r0, #48]	; 0x30
    b180:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    b182:	6343      	str	r3, [r0, #52]	; 0x34
    b184:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    b186:	6383      	str	r3, [r0, #56]	; 0x38
    b188:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    b18a:	63c3      	str	r3, [r0, #60]	; 0x3c
    b18c:	3040      	adds	r0, #64	; 0x40
    b18e:	3140      	adds	r1, #64	; 0x40
    b190:	3a40      	subs	r2, #64	; 0x40
    b192:	d2db      	bcs.n	b14c <memcpy+0x10>
    b194:	3230      	adds	r2, #48	; 0x30
    b196:	d30b      	bcc.n	b1b0 <memcpy+0x74>
    b198:	680b      	ldr	r3, [r1, #0]
    b19a:	6003      	str	r3, [r0, #0]
    b19c:	684b      	ldr	r3, [r1, #4]
    b19e:	6043      	str	r3, [r0, #4]
    b1a0:	688b      	ldr	r3, [r1, #8]
    b1a2:	6083      	str	r3, [r0, #8]
    b1a4:	68cb      	ldr	r3, [r1, #12]
    b1a6:	60c3      	str	r3, [r0, #12]
    b1a8:	3010      	adds	r0, #16
    b1aa:	3110      	adds	r1, #16
    b1ac:	3a10      	subs	r2, #16
    b1ae:	d2f3      	bcs.n	b198 <memcpy+0x5c>
    b1b0:	320c      	adds	r2, #12
    b1b2:	d305      	bcc.n	b1c0 <memcpy+0x84>
    b1b4:	f851 3b04 	ldr.w	r3, [r1], #4
    b1b8:	f840 3b04 	str.w	r3, [r0], #4
    b1bc:	3a04      	subs	r2, #4
    b1be:	d2f9      	bcs.n	b1b4 <memcpy+0x78>
    b1c0:	3204      	adds	r2, #4
    b1c2:	d008      	beq.n	b1d6 <memcpy+0x9a>
    b1c4:	07d2      	lsls	r2, r2, #31
    b1c6:	bf1c      	itt	ne
    b1c8:	f811 3b01 	ldrbne.w	r3, [r1], #1
    b1cc:	f800 3b01 	strbne.w	r3, [r0], #1
    b1d0:	d301      	bcc.n	b1d6 <memcpy+0x9a>
    b1d2:	880b      	ldrh	r3, [r1, #0]
    b1d4:	8003      	strh	r3, [r0, #0]
    b1d6:	4660      	mov	r0, ip
    b1d8:	4770      	bx	lr
    b1da:	bf00      	nop
    b1dc:	2a08      	cmp	r2, #8
    b1de:	d313      	bcc.n	b208 <memcpy+0xcc>
    b1e0:	078b      	lsls	r3, r1, #30
    b1e2:	d0b1      	beq.n	b148 <memcpy+0xc>
    b1e4:	f010 0303 	ands.w	r3, r0, #3
    b1e8:	d0ae      	beq.n	b148 <memcpy+0xc>
    b1ea:	f1c3 0304 	rsb	r3, r3, #4
    b1ee:	1ad2      	subs	r2, r2, r3
    b1f0:	07db      	lsls	r3, r3, #31
    b1f2:	bf1c      	itt	ne
    b1f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    b1f8:	f800 3b01 	strbne.w	r3, [r0], #1
    b1fc:	d3a4      	bcc.n	b148 <memcpy+0xc>
    b1fe:	f831 3b02 	ldrh.w	r3, [r1], #2
    b202:	f820 3b02 	strh.w	r3, [r0], #2
    b206:	e79f      	b.n	b148 <memcpy+0xc>
    b208:	3a04      	subs	r2, #4
    b20a:	d3d9      	bcc.n	b1c0 <memcpy+0x84>
    b20c:	3a01      	subs	r2, #1
    b20e:	f811 3b01 	ldrb.w	r3, [r1], #1
    b212:	f800 3b01 	strb.w	r3, [r0], #1
    b216:	d2f9      	bcs.n	b20c <memcpy+0xd0>
    b218:	780b      	ldrb	r3, [r1, #0]
    b21a:	7003      	strb	r3, [r0, #0]
    b21c:	784b      	ldrb	r3, [r1, #1]
    b21e:	7043      	strb	r3, [r0, #1]
    b220:	788b      	ldrb	r3, [r1, #2]
    b222:	7083      	strb	r3, [r0, #2]
    b224:	4660      	mov	r0, ip
    b226:	4770      	bx	lr

0000b228 <strlen>:
    b228:	f020 0103 	bic.w	r1, r0, #3
    b22c:	f010 0003 	ands.w	r0, r0, #3
    b230:	f1c0 0000 	rsb	r0, r0, #0
    b234:	f851 3b04 	ldr.w	r3, [r1], #4
    b238:	f100 0c04 	add.w	ip, r0, #4
    b23c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    b240:	f06f 0200 	mvn.w	r2, #0
    b244:	bf1c      	itt	ne
    b246:	fa22 f20c 	lsrne.w	r2, r2, ip
    b24a:	4313      	orrne	r3, r2
    b24c:	f04f 0c01 	mov.w	ip, #1
    b250:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    b254:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    b258:	eba3 020c 	sub.w	r2, r3, ip
    b25c:	ea22 0203 	bic.w	r2, r2, r3
    b260:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    b264:	bf04      	itt	eq
    b266:	f851 3b04 	ldreq.w	r3, [r1], #4
    b26a:	3004      	addeq	r0, #4
    b26c:	d0f4      	beq.n	b258 <strlen+0x30>
    b26e:	f1c2 0100 	rsb	r1, r2, #0
    b272:	ea02 0201 	and.w	r2, r2, r1
    b276:	fab2 f282 	clz	r2, r2
    b27a:	f1c2 021f 	rsb	r2, r2, #31
    b27e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    b282:	4770      	bx	lr
    b284:	00000043 	.word	0x00000043

0000b288 <_global_impure_ptr>:
    b288:	10000020                                 ...

0000b28c <advertising_channels>:
    b28c:	00270c00                                ..'.

0000b290 <data_channels>:
    b290:	04030201 08070605 0d0b0a09 11100f0e     ................
    b2a0:	15141312 19181716 1d1c1b1a 21201f1e     .............. !
    b2b0:	25242322 00000026                       "#$%&...

0000b2b8 <whitening>:
    b2b8:	01010101 01000100 00000100 00010000     ................
    b2c8:	01000101 00010101 01010100 00010000     ................
    b2d8:	01010001 01010000 00000000 00010100     ................
    b2e8:	01000101 01010100 00000100 00010100     ................
    b2f8:	00000100 00000100 00000000 01000001     ................
    b308:	01010000 00000100 01010101 01010100     ................
    b318:	00000000 01010101 00010101 01010000     ................
    b328:	01010001 01000000 00000100 00010001     ................

0000b338 <whitening_index>:
    b338:	6f783e46 650f2e4d 1a1f2742 597d5350     F>xoM..eB'..PS}Y
    b348:	3608230a 0021117a 5e06733a 14343156     .#.6z.!.:s.^V14.
    b358:	5a541b28 662f703f                       (.TZ?p/f

0000b360 <hop_interval_lut>:
    b360:	19130100 101f0f1c 1b1a210e 05081422     .........!.."...
    b370:	02231807 1d201e0d 0b0a0311 06151704     ..#... .........
    b380:	120c0916 00000024                       ....$...

0000b388 <whitening_word>:
    b388:	c3bcb240 5f4a371f 9a9cf685 44c5d6c1     @....7J_.......D
    b398:	e1de5920 afa51b8f cd4e7b42 2262eb60      Y......B{N.`.b"
    b3a8:	f0ef2c90 57d28dc7 66a73da1 113175b0     .,.....W.=.f.u1.
    b3b8:	bcb24089 4a371fc3 9cf6855f c5d6c19a     .@....7J_.......
    b3c8:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    b3d8:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    b3e8:	3da157d2 75b066a7 96481131 46e3f877     .W.=.f.u1.H.w..F
    b3f8:	9ed0abe9 bad83353 cb240898 a371fc3b     ....S3....$.;.q.
    b408:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    b418:	42afa51b 60cd4e7b 902262eb c7f0ef2c     ...B{N.`.b".,...
    b428:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    b438:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    b448:	3f877964 0abe946e 833539ed 40898bad     dy.?n....95....@
    b458:	1fc3bcb2 855f4a37 c19a9cf6 2044c5d6     ....7J_.......D 
    b468:	8fe1de59 42afa51b 60cd4e7b 902262eb     Y......B{N.`.b".
    b478:	40898bad 1fc3bcb2 855f4a37 c19a9cf6     ...@....7J_.....
    b488:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    b498:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    b4a8:	c19a9cf6 2044c5d6 8fe1de59 42afa51b     ......D Y......B
    b4b8:	60cd4e7b 902262eb c7f0ef2c a157d28d     {N.`.b".,.....W.
    b4c8:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    b4d8:	be946e3f 3539ed0a 898bad83 c3bcb240     ?n....95....@...
    b4e8:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    b4f8:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    b508:	3bcb2408 f4a371fc a9cf6855 4c5d6c19     .$.;.q..Uh...l]L
    b518:	1de59204 fa51b8fe d4e7b42a 262eb60c     ......Q.*......&
    b528:	0ef2c902 7d28dc7f 6a73da15 13175b06     ......(}..sj.[..
    b538:	44c5d6c1 e1de5920 afa51b8f cd4e7b42     ...D Y......B{N.
    b548:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    b558:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    b568:	c5d6c19a de592044 a51b8fe1 4e7b42af     ....D Y......B{N
    b578:	62eb60cd ef2c9022 d28dc7f0 a73da157     .`.b".,.....W.=.
    b588:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    b598:	bad83353 cb240898 a371fc3b cf6855f4     S3....$.;.q..Uh.
    b5a8:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    b5b8:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    b5c8:	c7f0ef2c a157d28d b066a73d 48113175     ,.....W.=.f.u1.H
    b5d8:	e3f87796 d0abe946 d833539e 240898ba     .w..F....S3....$
    b5e8:	71fc3bcb 6855f4a3 6c19a9cf 92044c5d     .;.q..Uh...l]L..
    b5f8:	b8fe1de5 b42afa51 b60cd4e7 c902262e     ....Q.*......&..
    b608:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    b618:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    b628:	39ed0abe 8bad8335 bcb24089 4a371fc3     ...95....@....7J
    b638:	9cf6855f c5d6c19a de592044 a51b8fe1     _.......D Y.....
    b648:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    b658:	46e3f877 9ed0abe9 bad83353 cb240898     w..F....S3....$.
    b668:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    b678:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    b688:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    b698:	19a9cf68 044c5d6c fe1de592 2afa51b8     h...l]L......Q.*
    b6a8:	0cd4e7b4 02262eb6 7f0ef2c9 157d28dc     ......&......(}.
    b6b8:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    b6c8:	262eb60c 0ef2c902 7d28dc7f 6a73da15     ...&......(}..sj
    b6d8:	13175b06 87796481 be946e3f 3539ed0a     .[...dy.?n....95
    b6e8:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    b6f8:	66a73da1 113175b0 f8779648 abe946e3     .=.f.u1.H.w..F..
    b708:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    b718:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    b728:	592044c5 1b8fe1de 7b42afa5 eb60cd4e     .D Y......B{N.`.
    b738:	2c902262 8dc7f0ef 3da157d2 75b066a7     b".,.....W.=.f.u
    b748:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    b758:	e7b42afa 2eb60cd4 f2c90226 28dc7f0e     .*......&......(
    b768:	73da157d 175b066a 79648113 946e3f87     }..sj.[...dy.?n.
    b778:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    b788:	d833539e 240898ba 71fc3bcb 6855f4a3     .S3....$.;.q..Uh
    b798:	6c19a9cf 92044c5d b8fe1de5 b42afa51     ...l]L......Q.*.
    b7a8:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    b7b8:	98bad833 3bcb2408 f4a371fc a9cf6855     3....$.;.q..Uh..
    b7c8:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    b7d8:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    b7e8:	a73da157 3175b066 77964811 e946e3f8     W.=.f.u1.H.w..F.
    b7f8:	539ed0ab 98bad833 3bcb2408 f4a371fc     ...S3....$.;.q..
    b808:	cb240898 a371fc3b cf6855f4 5d6c19a9     ..$.;.q..Uh...l]
    b818:	e592044c 51b8fe1d e7b42afa 2eb60cd4     L......Q.*......
    b828:	f2c90226 28dc7f0e 73da157d 175b066a     &......(}..sj.[.
    b838:	b42afa51 b60cd4e7 c902262e dc7f0ef2     Q.*......&......
    b848:	da157d28 5b066a73 64811317 6e3f8779     (}..sj.[...dy.?n
    b858:	ed0abe94 ad833539 b240898b 371fc3bc     ....95....@....7
    b868:	3539ed0a 898bad83 c3bcb240 5f4a371f     ..95....@....7J_
    b878:	9a9cf685 44c5d6c1 e1de5920 afa51b8f     .......D Y......
    b888:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    b898:	4a371fc3 9cf6855f c5d6c19a de592044     ..7J_.......D Y.
    b8a8:	a51b8fe1 4e7b42af 62eb60cd ef2c9022     .....B{N.`.b".,.
    b8b8:	d28dc7f0 a73da157 3175b066 77964811     ....W.=.f.u1.H.w
    b8c8:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    b8d8:	1b8fe1de 7b42afa5 eb60cd4e 2c902262     ......B{N.`.b".,
    b8e8:	8dc7f0ef 3da157d2 75b066a7 96481131     .....W.=.f.u1.H.
    b8f8:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    b908:	240898ba 71fc3bcb 6855f4a3 6c19a9cf     ...$.;.q..Uh...l
    b918:	92044c5d b8fe1de5 b42afa51 b60cd4e7     ]L......Q.*.....
    b928:	c902262e dc7f0ef2 da157d28 5b066a73     .&......(}..sj.[
    b938:	64811317 6e3f8779 ed0abe94 ad833539     ...dy.?n....95..
    b948:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    b958:	b60cd4e7 c902262e dc7f0ef2 da157d28     .....&......(}..
    b968:	5b066a73 64811317 6e3f8779 ed0abe94     sj.[...dy.?n....
    b978:	ad833539 b240898b 371fc3bc f6855f4a     95....@....7J_..
    b988:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    b998:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    b9a8:	0898bad8 fc3bcb24 55f4a371 19a9cf68     ....$.;.q..Uh...
    b9b8:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    b9c8:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    b9d8:	175b066a 79648113 946e3f87 39ed0abe     j.[...dy.?n....9
    b9e8:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    b9f8:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    ba08:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    ba18:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    ba28:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    ba38:	28dc7f0e 73da157d 175b066a 79648113     ...(}..sj.[...dy
    ba48:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    ba58:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    ba68:	77964811 e946e3f8 539ed0ab 98bad833     .H.w..F....S3...
    ba78:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    ba88:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    ba98:	6855f4a3 6c19a9cf 92044c5d b8fe1de5     ..Uh...l]L......
    baa8:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    bab8:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    bac8:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    bad8:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    bae8:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    baf8:	57d28dc7 66a73da1 113175b0 f8779648     ...W.=.f.u1.H.w.

0000bb08 <compile_info>:
    bb08:	72656275 746f6f74 30322068 312d3531     ubertooth 2015-1
    bb18:	31522d30 6f722820 7940746f 20296379     0-R1 (root@yyc) 
    bb28:	36313032 3630202e 3033202e b828202e     2016. 06. 30. (.
    bb38:	302029f1 33333a38 2030313a 00435455     .) 08:33:10 UTC.
    bb48:	35313032 2d30312d 00003152 00000001     2015-10-R1......
    bb58:	00000001 00000001 00000001 ffff0900     ................
    bb68:	ffffffff ff050102 0000ffff 0985096c     ............l...
    bb78:	0000099e 03010200 03000100 01020001     ................
    bb88:	00000100 04020301 04020304 03040304     ................
    bb98:	00000203                                ....

0000bb9c <abDescriptors>:
    bb9c:	02000112 400000ff 60021d50 02010101     .......@P..`....
    bbac:	02090103 01010020 096e8000 02000004     .... .....n.....
    bbbc:	000000ff 02820507 07000040 40020505     ........@......@
    bbcc:	03040000 035c0409 00740068 00700074     ......\.h.t.t.p.
    bbdc:	002f003a 0067002f 00740069 00750068     :././.g.i.t.h.u.
    bbec:	002e0062 006f0063 002f006d 00720067     b...c.o.m./.g.r.
    bbfc:	00610065 00730074 006f0063 00740074     e.a.t.s.c.o.t.t.
    bc0c:	00610067 00670064 00740065 002f0073     g.a.d.g.e.t.s./.
    bc1c:	00620075 00720065 006f0074 0074006f     u.b.e.r.t.o.o.t.
    bc2c:	031e0068 006c0062 00650075 006f0074     h...b.l.u.e.t.o.
    bc3c:	0074006f 005f0068 00780072 00780074     o.t.h._.r.x.t.x.
    bc4c:	00300312 00300030 00300030 00300030     ..0.0.0.0.0.0.0.
    bc5c:	00000031 6361387b 38613734 63632d38     1...{8ac47a88-cc
    bc6c:	342d3632 2d396161 62373838 6332342d     26-4aa9-887b-42c
    bc7c:	66633861 36613730 00007d33 000093c9     a8cf07a63}......
    bc8c:	000093fd 00009415 000094fd 000093b5     ................
    bc9c:	000093b5 000093b5 00009561 000093fd     ........a.......
    bcac:	00009579 000093b5 000093b5 000093b5     y...............
    bcbc:	000093c9 000093fd 0000964d 0000980d     ........M.......
    bccc:	000096cd 00009791                       ........

0000bcd4 <abExtendedOsFeatureDescriptor>:
    bcd4:	00000028 00040100 00000001 00000000     (...............
    bce4:	49570100 4253554e 00000000 00000000     ..WINUSB........
    bcf4:	00000000 00000000                       ........

0000bcfc <_init>:
    bcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bcfe:	bf00      	nop
    bd00:	bcf8      	pop	{r3, r4, r5, r6, r7}
    bd02:	bc08      	pop	{r3}
    bd04:	469e      	mov	lr, r3
    bd06:	4770      	bx	lr

0000bd08 <__init_array_start>:
    bd08:	00004339 	.word	0x00004339

0000bd0c <__frame_dummy_init_array_entry>:
    bd0c:	00004139                                9A..

0000bd10 <_fini>:
    bd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bd12:	bf00      	nop
    bd14:	bcf8      	pop	{r3, r4, r5, r6, r7}
    bd16:	bc08      	pop	{r3}
    bd18:	469e      	mov	lr, r3
    bd1a:	4770      	bx	lr

0000bd1c <__fini_array_start>:
    bd1c:	00004111 	.word	0x00004111
